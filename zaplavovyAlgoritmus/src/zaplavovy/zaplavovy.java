/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zaplavovy;

import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juraj
 */
public class zaplavovy extends javax.swing.JFrame {

    /**
     * Creates new form zaplavovy
     */
    public zaplavovy() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        mapTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spustiZaplavovyAlgoritmusButton = new javax.swing.JButton();
        ulozMapuButton = new javax.swing.JButton();
        vymazMapuButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pointsTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        legendsTable = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        vzdialenostOdCiela = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Skúška záplavového algoritmu");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(mapTable);

        jLabel1.setText("Ovládací panel");

        spustiZaplavovyAlgoritmusButton.setText("Spusti záplavový algoritmus");
        spustiZaplavovyAlgoritmusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spustiZaplavovyAlgoritmusButtonActionPerformed(evt);
            }
        });

        ulozMapuButton.setText("Ulož mapu");
        ulozMapuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ulozMapuButtonActionPerformed(evt);
            }
        });

        vymazMapuButton.setText("Vymaž mapu");
        vymazMapuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vymazMapuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spustiZaplavovyAlgoritmusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ulozMapuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vymazMapuButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spustiZaplavovyAlgoritmusButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ulozMapuButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vymazMapuButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        spustiZaplavovyAlgoritmusButton.getAccessibleContext().setAccessibleName("zaplav");

        jLabel2.setText("Body - zmeny cesty pohybu");

        pointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(pointsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setText("Legenda");

        legendsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(legendsTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        vzdialenostOdCiela.setText("0");

        jLabel4.setText("Vzdialenost od ciela");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vzdialenostOdCiela, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vzdialenostOdCiela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    final String startString = "S";
    final String finishString = "F";
    final String barrierString = "x";
    final String extendBarrierString = "X";
    final String wayString = "O";
    final String cornerString = "Q";
    final Bod sipkaHore = new Bod(0, -1);
    final Bod sipkaDole = new Bod(0, +1);
    final Bod sipkaVlavo = new Bod(-1, 0);
    final Bod sipkaVpravo = new Bod(+1, 0);
    final Bod sipkaVpravoHore = new Bod(+1, -1);
    final Bod sipkaVpravoDole = new Bod(+1, +1);
    final Bod sipkaVlavoHore = new Bod(-1, -1);
    final Bod sipkaVlavoDole = new Bod(-1, +1);

    DefaultTableModel model;
    DefaultTableModel modelBody;
    DefaultTableModel modelLegends;

    private Bod startBod = null;
    private Bod finishBod = null;

    boolean isAtFinish = false;
    int aktualneOhodnotenie = 1;
    List<BodSOhodnotenim> prejdiBody = new ArrayList<BodSOhodnotenim>();
    Bod koncovyBod;

    class MyCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            setHorizontalAlignment(JLabel.CENTER);
            setVerticalAlignment(JLabel.CENTER);

            c.setBackground(Color.WHITE);
            c.setForeground(Color.BLACK);
            if (value instanceof String) {
                String hodnota = (String) value;

                if (hodnota.contains(cornerString)) {
                    c.setBackground(Color.RED);
                    c.setForeground(Color.BLACK);
                } else if (hodnota.contains(wayString)) {
                    c.setBackground(Color.PINK);
                    c.setForeground(Color.BLACK);
                } else if (hodnota.contains(extendBarrierString)) {
                    c.setBackground(Color.BLACK);
                    c.setForeground(Color.WHITE);
                } else if (hodnota.contains(barrierString)) {
                    c.setBackground(Color.GRAY);
                    c.setForeground(Color.WHITE);
                } else if (hodnota.contains(startString)) {
                    c.setBackground(Color.BLUE);
                    c.setForeground(Color.WHITE);
                } else if (hodnota.contains(finishString)) {
                    c.setBackground(Color.BLUE);
                    c.setForeground(Color.WHITE);
                }
            }
            return c;
        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        pointsTable.setModel(modelBody = new DefaultTableModel(new Object[][]{},
                new Object[]{"x", "y"}));
        legendsTable.setModel(modelLegends = new DefaultTableModel(new Object[][]{},
                new Object[]{"Map string", "Popis"}));

        modelLegends.addRow(new String[]{startString, "Začiatok(nastaviteľné)"});
        modelLegends.addRow(new String[]{finishString, "Koniec(nastaviteľné)"});
        modelLegends.addRow(new String[]{barrierString, "Prekážka(nastaviteľné)"});
        modelLegends.addRow(new String[]{extendBarrierString, "Rozšírenie prekážky(generované)"});
        modelLegends.addRow(new String[]{wayString, "Cesta pohybu robota(generované)"});
        modelLegends.addRow(new String[]{cornerString, "Zmeny smeru robota(generované)"});
        legendsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        legendsTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        legendsTable.getColumnModel().getColumn(1).setPreferredWidth(legendsTable.getWidth() - legendsTable.getColumnModel().getColumn(0).getPreferredWidth());
        mapTable.setModel(model = new DefaultTableModel());

        model.setNumRows(50);
        model.setColumnCount(50);

        FileInputStream fos = null;
        try {
            File fout = new File("out.txt");
            fos = new FileInputStream(fout);
            BufferedReader br = new BufferedReader(new InputStreamReader(fos));
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    model.setValueAt(br.readLine(), row, col);
                }
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        legendsTable.setDefaultRenderer(Object.class, new MyCellRenderer());
        mapTable.setDefaultRenderer(Object.class, new MyCellRenderer());
        pack();

    }//GEN-LAST:event_formWindowOpened

    private void spustiZaplavovyAlgoritmusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spustiZaplavovyAlgoritmusButtonActionPerformed
        try {
            vymazMapu();
            najdiStartACiel();

            isAtFinish = false;
            rozsirPrekazky();
            aktualneOhodnotenie = 1;
            zaplavovyAlgoritmus();
            List<Bod> bodyCesty = najdiCestu();
            while (prejdiBody.size() > 0) {
                prejdiBody.remove(0);
            }
            while (modelBody.getRowCount() > 0) {
                modelBody.removeRow(0);
            }
            for (int i = 0; i < bodyCesty.size(); i++) {
                modelBody.addRow(new String[]{String.valueOf(bodyCesty.get(i).getX()), String.valueOf(bodyCesty.get(i).getY())});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_spustiZaplavovyAlgoritmusButtonActionPerformed

    private void ulozMapuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ulozMapuButtonActionPerformed
        FileOutputStream fos = null;
        try {
            File fout = new File("out.txt");
            fos = new FileOutputStream(fout);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    if (model.getValueAt(row, col) != null && (model.getValueAt(row, col).toString().contains(barrierString) || model.getValueAt(row, col).toString().contains(startString) || model.getValueAt(row, col).toString().contains(finishString))) {
                        bw.write(model.getValueAt(row, col).toString());
                    }
                    bw.newLine();

                }
            }
            bw.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(zaplavovy.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ulozMapuButtonActionPerformed

    private void vymazMapuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vymazMapuButtonActionPerformed
        vymazMapu();
        while (prejdiBody.size() > 0) {
            prejdiBody.remove(0);
        }
    }//GEN-LAST:event_vymazMapuButtonActionPerformed

    void najdiStartACiel() throws Exception {
        startBod = null;
        finishBod = null;
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                if (model.getValueAt(row, col).toString().contains(startString)) {
                    if (startBod != null) {
                        throw new Exception("Viac štartov, prosím vložte iba jeden.");
                    }
                    startBod = new Bod(col, row);
                } else if (model.getValueAt(row, col).toString().contains(finishString)) {
                    if (finishBod != null) {
                        throw new Exception("Viac cieľov, prosím vložte iba jeden.");
                    }
                    finishBod = new Bod(col, row);
                }
            }
        }
    }

    void vymazMapu() {
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                if (model.getValueAt(row, col) != null
                        && !model.getValueAt(row, col).toString().contains(startString)
                        && !model.getValueAt(row, col).toString().contains(finishString)
                        && !model.getValueAt(row, col).toString().contains(barrierString)) {
                    model.setValueAt("", row, col);
                }
            }
        }
    }

    void rozsirPrekazky() {
        for (int x = 0; x < model.getColumnCount(); x++) {
            for (int y = 0; y < model.getRowCount(); y++) {
                if (model.getValueAt(y, x) != null && model.getValueAt(y, x).toString().contains("x")) {
                    osemSusednost(new BodSOhodnotenim(x, y, 0), true);
                }
            }
        }
    }

    void osemSusednost(BodSOhodnotenim bod, boolean rozsirovanie) {
        BodSOhodnotenim bodNaPrejdenie = null;
        int x = bod.getBod().getX();
        int y = bod.getBod().getY();
        int nasledujuceOhodnotenie = bod.getOhodnotenie() + 1;
        int t = Integer.parseInt(vzdialenostOdCiela.getText());
        isAtFinish = (Math.pow(bod.getBod().getX() - finishBod.getX(), 2) + Math.pow(bod.getBod().getY() - finishBod.getY(), 2)) <= t;
        if (!isAtFinish) {
            for (int i = 0; i < 8; i++) {
                switch (i) {
                    case 0:
                        bodNaPrejdenie = new BodSOhodnotenim(x - 1, y, nasledujuceOhodnotenie);
                        break;
                    case 1:
                        bodNaPrejdenie = new BodSOhodnotenim(x, y - 1, nasledujuceOhodnotenie);
                        break;
                    case 2:
                        bodNaPrejdenie = new BodSOhodnotenim(x + 1, y, nasledujuceOhodnotenie);
                        break;
                    case 3:
                        bodNaPrejdenie = new BodSOhodnotenim(x, y + 1, nasledujuceOhodnotenie);
                        break;
                    case 4:
                        bodNaPrejdenie = new BodSOhodnotenim(x - 1, y - 1, nasledujuceOhodnotenie);
                        break;
                    case 5:
                        bodNaPrejdenie = new BodSOhodnotenim(x + 1, y + 1, nasledujuceOhodnotenie);
                        break;
                    case 6:
                        bodNaPrejdenie = new BodSOhodnotenim(x + 1, y - 1, nasledujuceOhodnotenie);
                        break;
                    case 7:
                        bodNaPrejdenie = new BodSOhodnotenim(x - 1, y + 1, nasledujuceOhodnotenie);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Chybne definovana susednost");
                }
                if (isBodMoznaCesta(bodNaPrejdenie.getBod())) {
                    if (rozsirovanie) {
                        setExtendedBarrierOnMap(bodNaPrejdenie.getBod());
                    } else {
                        //isAtFinish = bodNaPrejdenie.getBod().getX() == finishBod.getX() && bodNaPrejdenie.getBod().getY() == finishBod.getY();

                        isAtFinish = (Math.pow(bodNaPrejdenie.getBod().getX() - finishBod.getX(), 2) + Math.pow(bodNaPrejdenie.getBod().getY() - finishBod.getY(), 2)) <= t;

                        if (!isAtFinish) {
                            setValueOnMap(bodNaPrejdenie);
                            prejdiBody.add(bodNaPrejdenie);
                        } else {
                            koncovyBod = bodNaPrejdenie.getBod();
                        }
                    }
                }
            }
        }
    }

    String getValueOnMap(Bod bod) {
        Object object = model.getValueAt(bod.getY(), bod.getX());
        if (object == null) {
            return null;
        } else {
            return object.toString();
        }
    }

    void setValueOnMap(BodSOhodnotenim bod) {
        model.setValueAt(bod.getOhodnotenie(), bod.getBod().getY(), bod.getBod().getX());
    }

    void setExtendedBarrierOnMap(Bod bod) {
        model.setValueAt(extendBarrierString, bod.getY(), bod.getX());
    }

    boolean isNumber(String string) {
        for (int i = 0; i < string.length(); i++) {
            if (!Character.isDigit(string.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    boolean isBodMoznaCesta(Bod bod) {
        return bod.getX() >= 0 && bod.getY() >= 0 && bod.getX() < model.getColumnCount() && bod.getY() < model.getRowCount()
                && (getValueOnMap(bod) == null
                || getValueOnMap(bod).isEmpty()
                || getValueOnMap(bod).contains(finishString));
    }

    boolean isHodnotyZaplavovy(Bod bod) {
        return bod.getX() >= 0 && bod.getY() >= 0 && bod.getX() < model.getColumnCount() && bod.getY() < model.getRowCount()
                && (getValueOnMap(bod) != null && !getValueOnMap(bod).isEmpty() && isNumber(getValueOnMap(bod)));
    }

    Bod posunBoduPodlaPriority(int priority, String pos) {
        if (pos.contains("R") && pos.contains("U")) { // rozlozenie 4
            switch (priority) {
                case 1:
                    return sipkaHore;
                case 2:
                    return sipkaVpravo;
                case 3:
                    return sipkaVlavo;
                case 4:
                    return sipkaDole;
                case 5:
                    return sipkaVpravoHore;
                case 6:
                    return sipkaVlavoHore;
                case 7:
                    return sipkaVpravoDole;
                case 8:
                    return sipkaVlavoDole;
            }
        } else if (pos.contains("R") && pos.contains("D")) { //rozlozenie 2
            switch (priority) {
                case 1:
                    return sipkaVpravo;
                case 2:
                    return sipkaDole;
                case 3:
                    return sipkaHore;
                case 4:
                    return sipkaVlavo;
                case 5:
                    return sipkaVpravoDole;
                case 6:
                    return sipkaVpravoHore;
                case 7:
                    return sipkaVlavoDole;
                case 8:
                    return sipkaVlavoHore;
            }
        } else if (pos.contains("L") && pos.contains("U")) { //rozlozenie 1
            switch (priority) {
                case 1:
                    return sipkaHore;
                case 2:
                    return sipkaVlavo;
                case 3:
                    return sipkaVpravo;
                case 4:
                    return sipkaDole;
                case 5:
                    return sipkaVlavoHore;
                case 6:
                    return sipkaVpravoHore;
                case 7:
                    return sipkaVlavoDole;
                case 8:
                    return sipkaVpravoDole;
            }
        } else if (pos.contains("L") && pos.contains("D")) { //rozlozenie 3
            switch (priority) {
                case 1:
                    return sipkaDole;
                case 2:
                    return sipkaVlavo;
                case 3:
                    return sipkaHore;
                case 4:
                    return sipkaVpravo;
                case 5:
                    return sipkaVlavoDole;
                case 6:
                    return sipkaVlavoHore;
                case 7:
                    return sipkaVpravoDole;
                case 8:
                    return sipkaVpravoHore;
            }
        } else if (pos.contains("R") && pos.contains("X")) { //rozlozenie 5
            switch (priority) {
                case 1:
                    return sipkaVpravo;
                case 2:
                    return sipkaHore;
                case 3:
                    return sipkaDole;
                case 4:
                    return sipkaVlavo;
                case 5:
                    return sipkaVpravoHore;
                case 6:
                    return sipkaVpravoDole;
                case 7:
                    return sipkaVlavoHore;
                case 8:
                    return sipkaVlavoDole;
            }
        } else if (pos.contains("L") && pos.contains("X")) { //rozlozenie 6
            switch (priority) {
                case 1:
                    return sipkaVlavo;
                case 2:
                    return sipkaHore;
                case 3:
                    return sipkaDole;
                case 4:
                    return sipkaVpravo;
                case 5:
                    return sipkaVlavoHore;
                case 6:
                    return sipkaVlavoDole;
                case 7:
                    return sipkaVpravoHore;
                case 8:
                    return sipkaVpravoDole;
            }
        } else if (pos.contains("U") && pos.contains("Q")) { //rozlozenie 8
            switch (priority) {
                case 1:
                    return sipkaHore;
                case 2:
                    return sipkaVpravo;
                case 3:
                    return sipkaVlavo;
                case 4:
                    return sipkaDole;
                case 5:
                    return sipkaVpravoHore;
                case 6:
                    return sipkaVlavoHore;
                case 7:
                    return sipkaVpravoDole;
                case 8:
                    return sipkaVlavoDole;
            }
        } else if (pos.contains("D") && pos.contains("Q")) { //rozlozenie 7
            switch (priority) {
                case 1:
                    return sipkaDole;
                case 2:
                    return sipkaVpravo;
                case 3:
                    return sipkaVlavo;
                case 4:
                    return sipkaHore;
                case 5:
                    return sipkaVpravoDole;
                case 6:
                    return sipkaVlavoDole;
                case 7:
                    return sipkaVpravoHore;
                case 8:
                    return sipkaVlavoHore;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nespravne zadanie pozicie startu a ciela.");
        }
        return null;
    }

    List<Bod> najdiCestu() {
        BodSOhodnotenim oznacenyBod = new BodSOhodnotenim(koncovyBod, aktualneOhodnotenie);
        List<Bod> bodyCestyList = new ArrayList<>();
        List<Bod> bodyCestyZoradeneList = new ArrayList<>();
        String poziciaCieluVociStartu = "RU";
        if (startBod.getX() < koncovyBod.getX()) {
            poziciaCieluVociStartu += "L";
        } else if (startBod.getX() == koncovyBod.getX()) {
            poziciaCieluVociStartu += "Q";
        } else {
            poziciaCieluVociStartu += "R";
        }
        if (startBod.getY() < koncovyBod.getY()) {
            poziciaCieluVociStartu += "U";
        } else if (startBod.getY() == koncovyBod.getY()) {
            poziciaCieluVociStartu += "X";
        } else {
            poziciaCieluVociStartu += "D";
        }
        int lastSmer = -1;
        boolean moznyPosun = true;
        BodSOhodnotenim predchadzajuci = oznacenyBod;
        while (oznacenyBod.getOhodnotenie() != 1 && moznyPosun) {
            moznyPosun = false;
            for (int smer = 1; smer <= 8; smer++) {
                Bod offsetBodu = posunBoduPodlaPriority(smer, poziciaCieluVociStartu);
                int x = oznacenyBod.getBod().getX() + offsetBodu.getX();
                int y = oznacenyBod.getBod().getY() + offsetBodu.getY();
                if (isHodnotyZaplavovy(new Bod(x, y)) && Integer.parseInt(model.getValueAt(y, x).toString()) == oznacenyBod.getOhodnotenie()) {
                    if (smer != lastSmer && lastSmer != -1) {
                        if (!predchadzajuci.getBod().equals(koncovyBod)) {
                            model.setValueAt(cornerString, predchadzajuci.getBod().getY(), predchadzajuci.getBod().getX());
                            bodyCestyList.add(predchadzajuci.getBod().clone());
                        }
                    }
                    lastSmer = smer;
                    predchadzajuci = oznacenyBod;
                    oznacenyBod.setBod(new Bod(x, y));
                    oznacenyBod.setOhodnotenie(Integer.parseInt(model.getValueAt(y, x).toString()) - 1);
                    model.setValueAt(wayString, oznacenyBod.getBod().getY(), oznacenyBod.getBod().getX());
                    moznyPosun = true;
                    break;
                }
            }
        }
        bodyCestyZoradeneList.add(startBod);
        for (int i = bodyCestyList.size() - 1; i >= 0; i--) {
            bodyCestyZoradeneList.add(bodyCestyList.get(i));
        }
        bodyCestyZoradeneList.add(koncovyBod);
        return bodyCestyZoradeneList;
    }

    void zaplavovyAlgoritmus() {
        osemSusednost(new BodSOhodnotenim(startBod, aktualneOhodnotenie), false);
        aktualneOhodnotenie++;
        while (!isAtFinish && prejdiBody.size() > 0) {
            int indexBoduNaRozsirenie = BodSOhodnotenim.indexOhodnotenie(prejdiBody, aktualneOhodnotenie);
            if (indexBoduNaRozsirenie == -1) {
                aktualneOhodnotenie++;
            } else {
                osemSusednost(prejdiBody.get(indexBoduNaRozsirenie), false);
                prejdiBody.remove(indexBoduNaRozsirenie);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(zaplavovy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(zaplavovy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(zaplavovy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(zaplavovy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new zaplavovy().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable legendsTable;
    private javax.swing.JTable mapTable;
    private javax.swing.JTable pointsTable;
    private javax.swing.JButton spustiZaplavovyAlgoritmusButton;
    private javax.swing.JButton ulozMapuButton;
    private javax.swing.JButton vymazMapuButton;
    private javax.swing.JTextField vzdialenostOdCiela;
    // End of variables declaration//GEN-END:variables
}
