#include <math.h>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
	switch (i) {
	case 1:
		return motor1;
	case 2:
		return motor2;
	case 3:
		return motor3;
	case 4:
		return motor4;
	case 5:
		return motor5;
	case 6:
		return motor6;
	}
}

extern "C" {
#include <I2CMasterLib/I2CMasterLib.h>
#include <I2CSlaveLib/I2CSlaveLib.h>
#include "stm32l1xx.h"
}
volatile bool timePosition = false;
int timePoc = 0;
volatile double x = 0;
volatile double y = 0;
volatile double angle = 0;
#define dt 0.025

enum Direction {
	FORWARD, BACKWARD, ROTATE_CLOCKWISE, ROTATE_ANTICLOCKWISE, STOP
};

void speedL(double speed) {
	getMotor(1)->setSpeedMotor(speed);
	getMotor(2)->setSpeedMotor(speed);
	getMotor(3)->setSpeedMotor(speed);
}
void speedR(double speed) {
	getMotor(4)->setSpeedMotor(speed);
	getMotor(5)->setSpeedMotor(speed);
	getMotor(6)->setSpeedMotor(speed);
}
void goDirection(Direction dir, double speed) {
	switch (dir) {
	case FORWARD:
		speedL(speed);
		speedR(speed);
		break;
	case BACKWARD:
		speedL(-speed);
		speedR(-speed);
		break;
	case ROTATE_CLOCKWISE:
		speedL(speed);
		speedR(-speed);
		break;
	case ROTATE_ANTICLOCKWISE:
		speedL(-speed);
		speedR(speed);
		break;
	case STOP:
		speedL(0);
		speedR(0);
		break;
	}

}

extern "C" void I2C1_ER_IRQHandler(void) {
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
	}
}

uint16_t i2c1_reg;
uint16_t numberOfRecvValues = 0;
int16_t i2c1_val;
#define I2C_MAX_SEND_BUFFER 4
uint8_t i2c_indexSendBuffer = 0;
uint8_t i2c_sendBuffer[I2C_MAX_SEND_BUFFER];
bool i2c1_recv_reg_done = false;

void longToI2CBuffer(long number) {
	for (int i = 0; i <4; i++) {
		i2c_sendBuffer[i] = (number >> ((3-i) * 8)) & 0xFF;
	}
}

void intToI2CBuffer(int16_t number) {
	for (int i = 0; i <2; i++) {
		i2c_sendBuffer[i] = (number >> ((1-i) * 8)) & 0xFF;
	}
}

extern "C" void I2C1_EV_IRQHandler() {
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
		I2C1->SR1;
		I2C1->SR2;
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
		if (!i2c1_recv_reg_done) {
			i2c1_reg = I2C1->DR;
			i2c1_recv_reg_done = true;
			i2c1_val = 0;
			numberOfRecvValues = 0;
			i2c_indexSendBuffer = 0;
			switch (i2c1_reg) {
			case 100:
				longToI2CBuffer(x);
				break;
			case 101:
				longToI2CBuffer(y);
				break;
			case 102:
				longToI2CBuffer(angle * 1000);
				break;
			}

		} else {
			i2c1_val = (i2c1_val << 8) | I2C1->DR;
			numberOfRecvValues++;
			if (numberOfRecvValues == 2) {
				switch (i2c1_reg) {
				case 1:
					getMotor(1)->setSpeedMotor((double) i2c1_val);
					break;
				case 2:
					getMotor(2)->setSpeedMotor((double) i2c1_val);
					break;
				case 3:
					getMotor(3)->setSpeedMotor((double) i2c1_val);
					break;
				case 4:
					getMotor(4)->setSpeedMotor((double) i2c1_val);
					break;
				case 5:
					getMotor(5)->setSpeedMotor((double) i2c1_val);
					break;
				case 6:
					getMotor(6)->setSpeedMotor((double) i2c1_val);
					break;
				case 7:
					goDirection(FORWARD, (double) i2c1_val);
					break;
				case 8:
					goDirection(BACKWARD, (double) i2c1_val);
					break;
				case 9:
					goDirection(ROTATE_CLOCKWISE, (double) i2c1_val);
					break;
				case 10:
					goDirection(ROTATE_ANTICLOCKWISE, (double) i2c1_val);
					break;
				case 11:
					goDirection(STOP, (double) i2c1_val);
					break;
				}
			}
		}

	}

//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
		if (i2c_indexSendBuffer < I2C_MAX_SEND_BUFFER) {
			I2C1->DR = i2c_sendBuffer[i2c_indexSendBuffer++];
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}

//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
		i2c1_recv_reg_done = false;
		I2C1->SR1;
		I2C1->CR1 |= 0x1;
	}
}

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
	double diff1 = fabs(val1 - val2);
	double diff2 = fabs(val2 - val3);
	double diff3 = fabs(val1 - val3);
	if (diff1 < diff2 && diff1 < diff3) {
		return (val1 + val2) / 2;
	} else if (diff2 < diff1 && diff2 < diff3) {
		return (val2 + val3) / 2;
	} else
		return (val1 + val3) / 2;
}

extern "C" void DMA1_Channel5_IRQHandler(void) {
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
		DMA_ClearFlag(DMA1_FLAG_TC5);
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		}else if (I2C2_getReadRegister() == GETWHO_I_AM) {
			for (int i = 1; i <= numberOfMotors; i++) {
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
					getMotor(i)->setTestValue((int8_t) I2C2_getRxBuffer(0));
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		}
		else {
			I2C2_clearReadRegister();
			I2C2_clearDeviceAddress();
		}

	}
}

extern "C" void TIM2_IRQHandler() {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
		timePosition = true;
	}
}

void Leds_Init(){
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIOB->BSRRL = GPIO_Pin_13;
	GPIOB->BSRRL = GPIO_Pin_14;
	GPIOB->BSRRL = GPIO_Pin_15;
	GPIOB->BSRRL = GPIO_Pin_1;
	GPIOB->BSRRL = GPIO_Pin_2;
	GPIOB->BSRRL = GPIO_Pin_12;
}

void Buttons_Init(){
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void InitializeTimer() {
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 40 hz
	timerInitStructure.TIM_Prescaler = 999;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = 49;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
	TIM_Cmd(TIM2, ENABLE);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
}

double lastDistance[6];
int main(void) {
	Leds_Init();
	Buttons_Init();
	I2C2_Init();
	I2C1_Init();
	//getMotor(1)->setSpeedMotor(-50);
	InitializeTimer();
	while (1) {
		int but = 0;
		if((GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6){
			but = 1;
		}
		if((GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8){
			but = 2;
		}
		if((GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9){
			but = 3;
		}

		if (timePosition) {
			double speeds[6];
			for (int i = 0; i < 6; i++) {
				speeds[i] = (getMotor(i)->getDistance() - lastDistance[i]);
				lastDistance[i] = getMotor(i)->getDistance();
			}

			double vL = getAverageOfSimilaryValues(speeds[1], speeds[2],
					speeds[3]);
			double vR = getAverageOfSimilaryValues(speeds[4], speeds[5],
					speeds[6]);
			double vT = (vL + vR) / 2;
			double omegaT = (vR - vL) / lengthBetweenLeftAndRightWheel;
			angle += omegaT;
			if (angle > 2 * M_PI)
				angle -= 2 * M_PI;
			else if (angle < 0)
				angle += 2 * M_PI;
			x += vT * cos(angle);
			y += vT * sin(angle);
			timePosition = false;
		} else {
			getMotor(1)->DMADeltaTicksInvoke();
			getMotor(2)->DMADeltaTicksInvoke();
			getMotor(3)->DMADeltaTicksInvoke();
			getMotor(4)->DMADeltaTicksInvoke();
			getMotor(5)->DMADeltaTicksInvoke();
			getMotor(6)->DMADeltaTicksInvoke();
			for (int i = 0; i < 1000; i++)
				;
		}
	}
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line)
{
	while (1)
	{
	}
}
#endif
