
C:\Users\Juraj\Atollic\TrueSTUDIO\ARM_workspace_7.0\motor_master1\Debug\motor_master1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002280  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080023e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000080  08002464  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000f4  08002464  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004369  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ef6  00000000  00000000  00024412  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005c8  00000000  00000000  00025308  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000201c  00000000  00000000  00025df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e3a  00000000  00000000  00027e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00029c46  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001a9c  00000000  00000000  00029cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  0002b760  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  0002b79c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080023a8 	.word	0x080023a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080023a8 	.word	0x080023a8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	2300      	movs	r3, #0
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	230f      	movs	r3, #15
 8000926:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d038      	beq.n	80009a2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <NVIC_Init+0xb8>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	43db      	mvns	r3, r3
 8000936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800093a:	0a1b      	lsrs	r3, r3, #8
 800093c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f1c3 0304 	rsb	r3, r3, #4
 8000944:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000946:	7b7a      	ldrb	r2, [r7, #13]
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	fa42 f303 	asr.w	r3, r2, r3
 800094e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	461a      	mov	r2, r3
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	789a      	ldrb	r2, [r3, #2]
 8000962:	7b7b      	ldrb	r3, [r7, #13]
 8000964:	4013      	ands	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4313      	orrs	r3, r2
 800096c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <NVIC_Init+0xbc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <NVIC_Init+0xbc>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	095b      	lsrs	r3, r3, #5
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f003 031f 	and.w	r3, r3, #31
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800099c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009a0:	e00f      	b.n	80009c2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009a2:	490b      	ldr	r1, [pc, #44]	; (80009d0 <NVIC_Init+0xbc>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	2201      	movs	r2, #1
 80009b8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ba:	f100 0320 	add.w	r3, r0, #32
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80009e4:	4013      	ands	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a43      	ldr	r2, [pc, #268]	; (8000b14 <DMA_DeInit+0x140>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000a0a:	4a43      	ldr	r2, [pc, #268]	; (8000b18 <DMA_DeInit+0x144>)
 8000a0c:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <DMA_DeInit+0x144>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f043 030f 	orr.w	r3, r3, #15
 8000a14:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a16:	e077      	b.n	8000b08 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <DMA_DeInit+0x148>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000a20:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <DMA_DeInit+0x144>)
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <DMA_DeInit+0x144>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a2a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a2c:	e06c      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <DMA_DeInit+0x14c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000a36:	4a38      	ldr	r2, [pc, #224]	; (8000b18 <DMA_DeInit+0x144>)
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <DMA_DeInit+0x144>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000a40:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a42:	e061      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <DMA_DeInit+0x150>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <DMA_DeInit+0x144>)
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <DMA_DeInit+0x144>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a56:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a58:	e056      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <DMA_DeInit+0x154>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000a62:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <DMA_DeInit+0x144>)
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <DMA_DeInit+0x144>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000a6c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a6e:	e04b      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <DMA_DeInit+0x158>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <DMA_DeInit+0x144>)
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <DMA_DeInit+0x144>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a82:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a84:	e040      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <DMA_DeInit+0x15c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <DMA_DeInit+0x144>)
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <DMA_DeInit+0x144>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000a98:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a9a:	e035      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <DMA_DeInit+0x160>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <DMA_DeInit+0x164>)
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <DMA_DeInit+0x164>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f043 030f 	orr.w	r3, r3, #15
 8000aae:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ab0:	e02a      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <DMA_DeInit+0x168>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000aba:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <DMA_DeInit+0x164>)
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <DMA_DeInit+0x164>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000ac4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ac6:	e01f      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <DMA_DeInit+0x16c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <DMA_DeInit+0x164>)
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <DMA_DeInit+0x164>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ada:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000adc:	e014      	b.n	8000b08 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <DMA_DeInit+0x170>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <DMA_DeInit+0x164>)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <DMA_DeInit+0x164>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000af0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000af2:	e009      	b.n	8000b08 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <DMA_DeInit+0x174>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d105      	bne.n	8000b08 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <DMA_DeInit+0x164>)
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <DMA_DeInit+0x164>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b06:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40026008 	.word	0x40026008
 8000b18:	40026000 	.word	0x40026000
 8000b1c:	4002601c 	.word	0x4002601c
 8000b20:	40026030 	.word	0x40026030
 8000b24:	40026044 	.word	0x40026044
 8000b28:	40026058 	.word	0x40026058
 8000b2c:	4002606c 	.word	0x4002606c
 8000b30:	40026080 	.word	0x40026080
 8000b34:	40026408 	.word	0x40026408
 8000b38:	40026400 	.word	0x40026400
 8000b3c:	4002641c 	.word	0x4002641c
 8000b40:	40026430 	.word	0x40026430
 8000b44:	40026444 	.word	0x40026444
 8000b48:	40026458 	.word	0x40026458

08000b4c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b6a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000b7a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b86:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000b92:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000be6:	e006      	b.n	8000bf6 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000c0c:	887a      	ldrh	r2, [r7, #2]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	605a      	str	r2, [r3, #4]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000c3c:	e006      	b.n	8000c4c <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <DMA_GetFlagStatus+0x48>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	e002      	b.n	8000c80 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <DMA_GetFlagStatus+0x4c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e001      	b.n	8000c94 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40026000 	.word	0x40026000
 8000ca4:	40026400 	.word	0x40026400

08000ca8 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <DMA_ClearFlag+0x2c>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000cc0:	e002      	b.n	8000cc8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <DMA_ClearFlag+0x30>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6053      	str	r3, [r2, #4]
  }  
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40026000 	.word	0x40026000
 8000cd8:	40026400 	.word	0x40026400

08000cdc <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e07e      	b.n	8000df6 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d16d      	bne.n	8000df0 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	4619      	mov	r1, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d003      	beq.n	8000d52 <GPIO_Init+0x76>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d136      	bne.n	8000dc0 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	795b      	ldrb	r3, [r3, #5]
 8000d70:	4619      	mov	r1, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	889b      	ldrh	r3, [r3, #4]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4013      	ands	r3, r2
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	889b      	ldrh	r3, [r3, #4]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	799b      	ldrb	r3, [r3, #6]
 8000daa:	4619      	mov	r1, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2103      	movs	r1, #3
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	79db      	ldrb	r3, [r3, #7]
 8000de0:	4619      	mov	r1, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	f67f af7d 	bls.w	8000cf8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
 8000e14:	4613      	mov	r3, r2
 8000e16:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e20:	787a      	ldrb	r2, [r7, #1]
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e30:	887b      	ldrh	r3, [r7, #2]
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	210f      	movs	r1, #15
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	ea02 0103 	and.w	r1, r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f100 0208 	add.w	r2, r0, #8
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <I2C_DeInit+0x44>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d10a      	bne.n	8000ebe <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000eae:	f000 fb3f 	bl	8001530 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000eb8:	f000 fb3a 	bl	8001530 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000ebc:	e009      	b.n	8000ed2 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ec4:	f000 fb34 	bl	8001530 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ece:	f000 fb2f 	bl	8001530 <RCC_APB1PeriphResetCmd>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005400 	.word	0x40005400

08000ee0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000eee:	2300      	movs	r3, #0
 8000ef0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <I2C_Init+0x174>)
 8000ef8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f06:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f9f9 	bl	8001304 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <I2C_Init+0x178>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f26:	4313      	orrs	r3, r2
 8000f28:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f2e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a44      	ldr	r2, [pc, #272]	; (800105c <I2C_Init+0x17c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d815      	bhi.n	8000f7a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d801      	bhi.n	8000f66 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000f62:	2304      	movs	r3, #4
 8000f64:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000f66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f70:	3301      	adds	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	841a      	strh	r2, [r3, #32]
 8000f78:	e040      	b.n	8000ffc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	88db      	ldrh	r3, [r3, #6]
 8000f7e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d109      	bne.n	8000f9a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f98:	e00e      	b.n	8000fb8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009a      	lsls	r2, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000fca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fda:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <I2C_Init+0x180>)
 8000fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fec:	1192      	asrs	r2, r2, #6
 8000fee:	17db      	asrs	r3, r3, #31
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001000:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800101a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	889a      	ldrh	r2, [r3, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	895b      	ldrh	r3, [r3, #10]
 800102c:	4313      	orrs	r3, r2
 800102e:	b29a      	uxth	r2, r3
 8001030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001032:	4313      	orrs	r3, r2
 8001034:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800103a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	899a      	ldrh	r2, [r3, #12]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	891b      	ldrh	r3, [r3, #8]
 8001044:	4313      	orrs	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	811a      	strh	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	007a1200 	.word	0x007a1200
 8001058:	431bde83 	.word	0x431bde83
 800105c:	000186a0 	.word	0x000186a0
 8001060:	10624dd3 	.word	0x10624dd3

08001064 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001086:	e007      	b.n	8001098 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	801a      	strh	r2, [r3, #0]
  }
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80010c6:	e007      	b.n	80010d8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	801a      	strh	r2, [r3, #0]
  }
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001106:	e007      	b.n	8001118 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	801a      	strh	r2, [r3, #0]
  }
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001146:	e007      	b.n	8001158 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	801a      	strh	r2, [r3, #0]
  }
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001174:	78bb      	ldrb	r3, [r7, #2]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	e003      	b.n	800118c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	821a      	strh	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	821a      	strh	r2, [r3, #16]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80011e2:	e007      	b.n	80011f4 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	889b      	ldrh	r3, [r3, #4]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	809a      	strh	r2, [r3, #4]
  }
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	889b      	ldrh	r3, [r3, #4]
 8001216:	b29b      	uxth	r3, r3
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 8001222:	e007      	b.n	8001234 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	b29b      	uxth	r3, r3
 800122a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	809a      	strh	r2, [r3, #4]
  }
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	8a9b      	ldrh	r3, [r3, #20]
 800125e:	b29b      	uxth	r3, r3
 8001260:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8b1b      	ldrh	r3, [r3, #24]
 8001266:	b29b      	uxth	r3, r3
 8001268:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4313      	orrs	r3, r2
 8001276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800127a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	401a      	ands	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d102      	bne.n	800128e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001288:	2301      	movs	r3, #1
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	e001      	b.n	8001292 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
}
 8001294:	4618      	mov	r0, r3
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	0f1b      	lsrs	r3, r3, #28
 80012be:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012c6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3314      	adds	r3, #20
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e005      	b.n	80012e2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3318      	adds	r3, #24
 80012e0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
 80012f2:	e001      	b.n	80012f8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d865      	bhi.n	8001400 <RCC_GetClocksFreq+0xfc>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <RCC_GetClocksFreq+0x38>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	08001371 	.word	0x08001371
 8001340:	08001401 	.word	0x08001401
 8001344:	08001401 	.word	0x08001401
 8001348:	08001401 	.word	0x08001401
 800134c:	08001391 	.word	0x08001391
 8001350:	08001401 	.word	0x08001401
 8001354:	08001401 	.word	0x08001401
 8001358:	08001401 	.word	0x08001401
 800135c:	08001399 	.word	0x08001399
 8001360:	08001401 	.word	0x08001401
 8001364:	08001401 	.word	0x08001401
 8001368:	08001401 	.word	0x08001401
 800136c:	080013a1 	.word	0x080013a1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001378:	0b5b      	lsrs	r3, r3, #13
 800137a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
      break;
 800138e:	e047      	b.n	8001420 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a45      	ldr	r2, [pc, #276]	; (80014a8 <RCC_GetClocksFreq+0x1a4>)
 8001394:	601a      	str	r2, [r3, #0]
      break;
 8001396:	e043      	b.n	8001420 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a44      	ldr	r2, [pc, #272]	; (80014ac <RCC_GetClocksFreq+0x1a8>)
 800139c:	601a      	str	r2, [r3, #0]
      break;
 800139e:	e03f      	b.n	8001420 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013a8:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80013aa:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80013b2:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <RCC_GetClocksFreq+0x1ac>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	0d9b      	lsrs	r3, r3, #22
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <RCC_GetClocksFreq+0x1a4>)
 80013dc:	fb02 f203 	mul.w	r2, r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80013ea:	e019      	b.n	8001420 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <RCC_GetClocksFreq+0x1a8>)
 80013f0:	fb02 f203 	mul.w	r2, r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
      }
      break;
 80013fe:	e00f      	b.n	8001420 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001408:	0b5b      	lsrs	r3, r3, #13
 800140a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3301      	adds	r3, #1
 8001410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
      break;
 800141e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001428:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <RCC_GetClocksFreq+0x1b0>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	40da      	lsrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001450:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <RCC_GetClocksFreq+0x1b0>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	40da      	lsrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <RCC_GetClocksFreq+0x1a0>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001478:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	0adb      	lsrs	r3, r3, #11
 800147e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <RCC_GetClocksFreq+0x1b0>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	40da      	lsrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	bf00      	nop
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	00f42400 	.word	0x00f42400
 80014ac:	007a1200 	.word	0x007a1200
 80014b0:	20000000 	.word	0x20000000
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80014d6:	e006      	b.n	80014e6 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <RCC_AHBPeriphClockCmd+0x38>)
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	61cb      	str	r3, [r1, #28]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40023800 	.word	0x40023800

080014f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001506:	4909      	ldr	r1, [pc, #36]	; (800152c <RCC_APB1PeriphClockCmd+0x38>)
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <RCC_APB1PeriphClockCmd+0x38>)
 800150a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001512:	e006      	b.n	8001522 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001514:	4905      	ldr	r1, [pc, #20]	; (800152c <RCC_APB1PeriphClockCmd+0x38>)
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <RCC_APB1PeriphClockCmd+0x38>)
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	43db      	mvns	r3, r3
 800151e:	4013      	ands	r3, r2
 8001520:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40023800 	.word	0x40023800

08001530 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <RCC_APB1PeriphResetCmd+0x38>)
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <RCC_APB1PeriphResetCmd+0x38>)
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800154e:	e006      	b.n	800155e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001550:	4905      	ldr	r1, [pc, #20]	; (8001568 <RCC_APB1PeriphResetCmd+0x38>)
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <RCC_APB1PeriphResetCmd+0x38>)
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	43db      	mvns	r3, r3
 800155a:	4013      	ands	r3, r2
 800155c:	618b      	str	r3, [r1, #24]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40023800 	.word	0x40023800

0800156c <I2C2_initDMA>:

uint32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C2_initDMA(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001572:	2101      	movs	r1, #1
 8001574:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001578:	f7ff ff9e 	bl	80014b8 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <I2C2_initDMA+0x84>)
 800157e:	f7ff fa29 	bl	80009d4 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <I2C2_initDMA+0x88>)
 8001584:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <I2C2_initDMA+0x8c>)
 8001588:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 800159c:	2302      	movs	r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <I2C2_initDMA+0x84>)
 80015b6:	f7ff fac9 	bl	8000b4c <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2102      	movs	r1, #2
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <I2C2_initDMA+0x84>)
 80015c0:	f7ff fb2c 	bl	8000c1c <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 80015c4:	230f      	movs	r3, #15
 80015c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 80015dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f997 	bl	8000914 <NVIC_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40026058 	.word	0x40026058
 80015f4:	40005810 	.word	0x40005810
 80015f8:	200000c8 	.word	0x200000c8

080015fc <I2C2_getDeviceAddress>:

uint8_t I2C2_getDeviceAddress(void) {
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	return deviceAddrUseI2c;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <I2C2_getDeviceAddress+0x10>)
 8001602:	781b      	ldrb	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	2000009c 	.word	0x2000009c

08001610 <I2C2_clearDeviceAddress>:

void I2C2_clearDeviceAddress(void) {
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <I2C2_clearDeviceAddress+0x14>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000009c 	.word	0x2000009c

08001628 <I2C2_getRxBuffer>:

uint32_t I2C2_getRxBuffer(int index) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <I2C2_getRxBuffer+0x1c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200000c8 	.word	0x200000c8

08001648 <I2C2_getReadRegister>:

uint8_t I2C2_getReadRegister(void) {
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return readReg;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <I2C2_getReadRegister+0x10>)
 800164e:	781b      	ldrb	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	2000009d 	.word	0x2000009d

0800165c <I2C2_clearReadRegister>:

void I2C2_clearReadRegister(void) {
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	readReg = 0;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <I2C2_clearReadRegister+0x14>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000009d 	.word	0x2000009d

08001674 <I2C2_Init>:


void I2C2_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff ff1b 	bl	80014b8 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001682:	2101      	movs	r1, #1
 8001684:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001688:	f7ff ff34 	bl	80014f4 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 800168c:	2204      	movs	r2, #4
 800168e:	210a      	movs	r1, #10
 8001690:	481e      	ldr	r0, [pc, #120]	; (800170c <I2C2_Init+0x98>)
 8001692:	f7ff fbb9 	bl	8000e08 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8001696:	2204      	movs	r2, #4
 8001698:	210b      	movs	r1, #11
 800169a:	481c      	ldr	r0, [pc, #112]	; (800170c <I2C2_Init+0x98>)
 800169c:	f7ff fbb4 	bl	8000e08 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 80016a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80016a6:	2302      	movs	r3, #2
 80016a8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80016b2:	2303      	movs	r3, #3
 80016b4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <I2C2_Init+0x98>)
 80016be:	f7ff fb0d 	bl	8000cdc <GPIO_Init>

	I2C_DeInit(I2C2);
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <I2C2_Init+0x9c>)
 80016c4:	f7ff fbe8 	bl	8000e98 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80016c8:	2300      	movs	r3, #0
 80016ca:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 80016cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d0:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80016dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e0:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <I2C2_Init+0xa0>)
 80016e4:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <I2C2_Init+0x9c>)
 80016ec:	f7ff fbf8 	bl	8000ee0 <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 80016f0:	2101      	movs	r1, #1
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <I2C2_Init+0x9c>)
 80016f4:	f7ff fcb6 	bl	8001064 <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 80016f8:	2101      	movs	r1, #1
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <I2C2_Init+0x9c>)
 80016fc:	f7ff fd12 	bl	8001124 <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8001700:	f7ff ff34 	bl	800156c <I2C2_initDMA>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020400 	.word	0x40020400
 8001710:	40005800 	.word	0x40005800
 8001714:	00061a80 	.word	0x00061a80

08001718 <I2C2_BytesWrite>:

void I2C2_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,uint8_t writeAddr) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6039      	str	r1, [r7, #0]
 8001720:	4611      	mov	r1, r2
 8001722:	461a      	mov	r2, r3
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	460b      	mov	r3, r1
 800172a:	71bb      	strb	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	717b      	strb	r3, [r7, #5]
	I2C_GenerateSTART(I2C2, ENABLE);
 8001730:	2101      	movs	r1, #1
 8001732:	4825      	ldr	r0, [pc, #148]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 8001734:	f7ff fcb6 	bl	80010a4 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001738:	bf00      	nop
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <I2C2_BytesWrite+0xb4>)
 800173c:	4822      	ldr	r0, [pc, #136]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 800173e:	f7ff fd7f 	bl	8001240 <I2C_CheckEvent>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f8      	beq.n	800173a <I2C2_BytesWrite+0x22>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	481e      	ldr	r0, [pc, #120]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 8001750:	f7ff fd08 	bl	8001164 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001754:	bf00      	nop
 8001756:	491e      	ldr	r1, [pc, #120]	; (80017d0 <I2C2_BytesWrite+0xb8>)
 8001758:	481b      	ldr	r0, [pc, #108]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 800175a:	f7ff fd71 	bl	8001240 <I2C_CheckEvent>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f8      	beq.n	8001756 <I2C2_BytesWrite+0x3e>
		;
	I2C_SendData(I2C2, writeAddr);
 8001764:	797b      	ldrb	r3, [r7, #5]
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 800176a:	f7ff fd19 	bl	80011a0 <I2C_SendData>
	for (int i = 0; i < length; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e014      	b.n	800179e <I2C2_BytesWrite+0x86>
		I2C_SendData(I2C2, pBuffer[i]);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 8001780:	f7ff fd0e 	bl	80011a0 <I2C_SendData>
		for (int x = 0; x < 1000; x++)
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e002      	b.n	8001790 <I2C2_BytesWrite+0x78>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001796:	dbf8      	blt.n	800178a <I2C2_BytesWrite+0x72>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;
	I2C_SendData(I2C2, writeAddr);
	for (int i = 0; i < length; i++) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	79ba      	ldrb	r2, [r7, #6]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dce6      	bgt.n	8001774 <I2C2_BytesWrite+0x5c>
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80017a6:	bf00      	nop
 80017a8:	490a      	ldr	r1, [pc, #40]	; (80017d4 <I2C2_BytesWrite+0xbc>)
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 80017ac:	f7ff fd48 	bl	8001240 <I2C_CheckEvent>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f8      	beq.n	80017a8 <I2C2_BytesWrite+0x90>
		;
	I2C_GenerateSTOP(I2C2, ENABLE);
 80017b6:	2101      	movs	r1, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <I2C2_BytesWrite+0xb0>)
 80017ba:	f7ff fc93 	bl	80010e4 <I2C_GenerateSTOP>

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005800 	.word	0x40005800
 80017cc:	00030001 	.word	0x00030001
 80017d0:	00070082 	.word	0x00070082
 80017d4:	00070084 	.word	0x00070084

080017d8 <I2C2_DMA_Read>:

void I2C2_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,uint8_t numberBytesReceive) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	while (deviceAddrUseI2c != 0);
 80017ea:	bf00      	nop
 80017ec:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <I2C2_DMA_Read+0xf8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1fb      	bne.n	80017ec <I2C2_DMA_Read+0x14>
	deviceAddrUseI2c = slaveAddr;
 80017f4:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <I2C2_DMA_Read+0xf8>)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	7013      	strb	r3, [r2, #0]
	readReg = readAddr;
 80017fa:	4a36      	ldr	r2, [pc, #216]	; (80018d4 <I2C2_DMA_Read+0xfc>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]

	/* Disable DMA channel*/
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8001800:	2100      	movs	r1, #0
 8001802:	4835      	ldr	r0, [pc, #212]	; (80018d8 <I2C2_DMA_Read+0x100>)
 8001804:	f7ff f9e0 	bl	8000bc8 <DMA_Cmd>

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <I2C2_DMA_Read+0x100>)
 8001810:	f7ff f9f6 	bl	8000c00 <DMA_SetCurrDataCounter>

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY))
 8001814:	bf00      	nop
 8001816:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800181a:	4830      	ldr	r0, [pc, #192]	; (80018dc <I2C2_DMA_Read+0x104>)
 800181c:	f7ff fd40 	bl	80012a0 <I2C_GetFlagStatus>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f7      	bne.n	8001816 <I2C2_DMA_Read+0x3e>
		;

	/* Enable DMA NACK automatic generation */
	I2C_DMALastTransferCmd(I2C2, ENABLE); //Note this one, very important
 8001826:	2101      	movs	r1, #1
 8001828:	482c      	ldr	r0, [pc, #176]	; (80018dc <I2C2_DMA_Read+0x104>)
 800182a:	f7ff fce9 	bl	8001200 <I2C_DMALastTransferCmd>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);
 800182e:	2101      	movs	r1, #1
 8001830:	482a      	ldr	r0, [pc, #168]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001832:	f7ff fc37 	bl	80010a4 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001836:	bf00      	nop
 8001838:	4929      	ldr	r1, [pc, #164]	; (80018e0 <I2C2_DMA_Read+0x108>)
 800183a:	4828      	ldr	r0, [pc, #160]	; (80018dc <I2C2_DMA_Read+0x104>)
 800183c:	f7ff fd00 	bl	8001240 <I2C_CheckEvent>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f8      	beq.n	8001838 <I2C2_DMA_Read+0x60>
		;

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	4823      	ldr	r0, [pc, #140]	; (80018dc <I2C2_DMA_Read+0x104>)
 800184e:	f7ff fc89 	bl	8001164 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 8001852:	bf00      	nop
 8001854:	4923      	ldr	r1, [pc, #140]	; (80018e4 <I2C2_DMA_Read+0x10c>)
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001858:	f7ff fcf2 	bl	8001240 <I2C_CheckEvent>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f8      	beq.n	8001854 <I2C2_DMA_Read+0x7c>
	I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(I2C2, ENABLE);
 8001862:	2101      	movs	r1, #1
 8001864:	481d      	ldr	r0, [pc, #116]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001866:	f7ff fbfd 	bl	8001064 <I2C_Cmd>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	4619      	mov	r1, r3
 800186e:	481b      	ldr	r0, [pc, #108]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001870:	f7ff fc96 	bl	80011a0 <I2C_SendData>

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001874:	bf00      	nop
 8001876:	491c      	ldr	r1, [pc, #112]	; (80018e8 <I2C2_DMA_Read+0x110>)
 8001878:	4818      	ldr	r0, [pc, #96]	; (80018dc <I2C2_DMA_Read+0x104>)
 800187a:	f7ff fce1 	bl	8001240 <I2C_CheckEvent>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f8      	beq.n	8001876 <I2C2_DMA_Read+0x9e>
		;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);
 8001884:	2101      	movs	r1, #1
 8001886:	4815      	ldr	r0, [pc, #84]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001888:	f7ff fc0c 	bl	80010a4 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 800188c:	bf00      	nop
 800188e:	4914      	ldr	r1, [pc, #80]	; (80018e0 <I2C2_DMA_Read+0x108>)
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <I2C2_DMA_Read+0x104>)
 8001892:	f7ff fcd5 	bl	8001240 <I2C_CheckEvent>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f8      	beq.n	800188e <I2C2_DMA_Read+0xb6>
		;

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <I2C2_DMA_Read+0x104>)
 80018a4:	f7ff fc5e 	bl	8001164 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80018a8:	bf00      	nop
 80018aa:	4910      	ldr	r1, [pc, #64]	; (80018ec <I2C2_DMA_Read+0x114>)
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <I2C2_DMA_Read+0x104>)
 80018ae:	f7ff fcc7 	bl	8001240 <I2C_CheckEvent>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f8      	beq.n	80018aa <I2C2_DMA_Read+0xd2>
		;

	/* Start DMA to receive data from I2C */
	DMA_Cmd(DMA1_Channel5, ENABLE);
 80018b8:	2101      	movs	r1, #1
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <I2C2_DMA_Read+0x100>)
 80018bc:	f7ff f984 	bl	8000bc8 <DMA_Cmd>
	I2C_DMACmd(I2C2, ENABLE);
 80018c0:	2101      	movs	r1, #1
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <I2C2_DMA_Read+0x104>)
 80018c4:	f7ff fc7c 	bl	80011c0 <I2C_DMACmd>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000009c 	.word	0x2000009c
 80018d4:	2000009d 	.word	0x2000009d
 80018d8:	40026058 	.word	0x40026058
 80018dc:	40005800 	.word	0x40005800
 80018e0:	00030001 	.word	0x00030001
 80018e4:	00070082 	.word	0x00070082
 80018e8:	00070084 	.word	0x00070084
 80018ec:	00030002 	.word	0x00030002

080018f0 <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <_ZN5MotorC1Eh+0x3c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
	this->motorAddr = motorAddr;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	81da      	strh	r2, [r3, #14]
}
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	080023c8 	.word	0x080023c8

08001930 <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <_ZN5MotorD1Ev+0x24>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]

}
 800193e:	2300      	movs	r3, #0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <_ZN5MotorD1Ev+0x1a>
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fbc4 	bl	80020d2 <_ZdlPv>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	080023c8 	.word	0x080023c8

08001958 <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

}
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe5 	bl	8001930 <_ZN5MotorD1Ev>
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fbb3 	bl	80020d2 <_ZdlPv>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <_ZN5Motor11setPWMMotorEs>:
	tmp[1] = data & 0xFF;
	tmp[0] = (data >> 8) && 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETCURRENTREG);
}
//------------------------------------------------------------------
void Motor::setPWMMotor(int16_t data) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	tmp[1] = data & 0xFF;
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	737b      	strb	r3, [r7, #13]
	tmp[0] = (data >> 8) && 0xFF;
 800198a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800198e:	121b      	asrs	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	733b      	strb	r3, [r7, #12]
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETPWMREG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7918      	ldrb	r0, [r3, #4]
 80019a0:	f107 010c 	add.w	r1, r7, #12
 80019a4:	2365      	movs	r3, #101	; 0x65
 80019a6:	2202      	movs	r2, #2
 80019a8:	f7ff feb6 	bl	8001718 <I2C2_BytesWrite>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN5Motor14DMASpeedInvokeEv>:
//------------------------------------------------------------------
void Motor::DMAVoltageInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETVOLTAGEREG, 2);
}
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	I2C2_DMA_Read(this->motorAddr, GETSPEEDREG, 2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff07 	bl	80017d8 <I2C2_DMA_Read>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop

080019d4 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e8:	441a      	add	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_ZN5Motor11setSpeedRawEs>:
	while (I2C2_getReadRegister() == GETDELTATICKSREG)
		;
	return this->ticks;
}
//------------------------------------------------------------------
void Motor::setSpeedRaw(int16_t speedRaw) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
	this->speedRaw=speedRaw;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	819a      	strh	r2, [r3, #12]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <_ZN5Motor11getSpeedRawEv>:
//------------------------------------------------------------------
int16_t Motor::getSpeedRaw(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	while (I2C2_getReadRegister() == GETSPEEDREG)
 8001a1c:	f7ff fe14 	bl	8001648 <I2C2_getReadRegister>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <_ZN5Motor11getSpeedRawEv+0x1e>
 8001a30:	e7f4      	b.n	8001a1c <_ZN5Motor11getSpeedRawEv+0x8>
		;
	return this->speedRaw;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN5Motor8getSpeedEv>:
//------------------------------------------------------------------
double Motor::getAngleSpeed(void) {
	return (getSpeedRaw()*periodSpeedRegulator)*(360/numberTicksOfWheel);
}
//------------------------------------------------------------------
double Motor::getSpeed(void) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	return (getSpeedRaw()*periodSpeedRegulator)*((wheelDiameter*M_PI)/numberTicksOfWheel);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe3 	bl	8001a14 <_ZN5Motor11getSpeedRawEv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fce7 	bl	8000424 <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <_ZN5Motor8getSpeedEv+0x48>)
 8001a5c:	f7fe fd48 	bl	80004f0 <__aeabi_dmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	4618      	mov	r0, r3
 8001a66:	4621      	mov	r1, r4
 8001a68:	a305      	add	r3, pc, #20	; (adr r3, 8001a80 <_ZN5Motor8getSpeedEv+0x40>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fd3f 	bl	80004f0 <__aeabi_dmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	2f974273 	.word	0x2f974273
 8001a84:	40020305 	.word	0x40020305
 8001a88:	3fd00000 	.word	0x3fd00000

08001a8c <_ZN5Motor13setVoltageRawEt>:
//------------------------------------------------------------------
void Motor::setVoltageRaw(uint16_t voltageRaw) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
	this->voltageRaw=voltageRaw;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	81da      	strh	r2, [r3, #14]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <_ZN5Motor10setCurrentEt>:
	while (I2C2_getReadRegister() == GETVOLTAGEREG)
		;
	return (double)this->voltageRaw * (25 / 1023);
}
//------------------------------------------------------------------
void Motor::setCurrent(uint16_t current) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
	this->current=current;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	821a      	strh	r2, [r3, #16]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_Z8getMotori>:
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	switch (i) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d821      	bhi.n	8001b18 <_Z8getMotori+0x54>
 8001ad4:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <_Z8getMotori+0x18>)
 8001ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ada:	bf00      	nop
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001afb 	.word	0x08001afb
 8001ae4:	08001b01 	.word	0x08001b01
 8001ae8:	08001b07 	.word	0x08001b07
 8001aec:	08001b0d 	.word	0x08001b0d
 8001af0:	08001b13 	.word	0x08001b13
	case 1:
		return motor1;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <_Z8getMotori+0x60>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e00e      	b.n	8001b18 <_Z8getMotori+0x54>
	case 2:
		return motor2;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <_Z8getMotori+0x64>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e00b      	b.n	8001b18 <_Z8getMotori+0x54>
	case 3:
		return motor3;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <_Z8getMotori+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e008      	b.n	8001b18 <_Z8getMotori+0x54>
	case 4:
		return motor4;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <_Z8getMotori+0x6c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e005      	b.n	8001b18 <_Z8getMotori+0x54>
	case 5:
		return motor5;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <_Z8getMotori+0x70>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e002      	b.n	8001b18 <_Z8getMotori+0x54>
	case 6:
		return motor6;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <_Z8getMotori+0x74>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e7ff      	b.n	8001b18 <_Z8getMotori+0x54>
	}
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200000a0 	.word	0x200000a0
 8001b28:	200000a4 	.word	0x200000a4
 8001b2c:	200000a8 	.word	0x200000a8
 8001b30:	200000ac 	.word	0x200000ac
 8001b34:	200000b0 	.word	0x200000b0
 8001b38:	200000b4 	.word	0x200000b4

08001b3c <DMA1_Channel5_IRQHandler>:

extern "C" {
#include <I2Clib/i2clib.h>
#include "stm32l1xx.h"

void DMA1_Channel5_IRQHandler(void) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 8001b42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b46:	f7ff f887 	bl	8000c58 <DMA_GetFlagStatus>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80e3 	beq.w	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 8001b5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b60:	f7ff f8a2 	bl	8000ca8 <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 8001b64:	2100      	movs	r1, #0
 8001b66:	4871      	ldr	r0, [pc, #452]	; (8001d2c <DMA1_Channel5_IRQHandler+0x1f0>)
 8001b68:	f7ff fb2a 	bl	80011c0 <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	486f      	ldr	r0, [pc, #444]	; (8001d2c <DMA1_Channel5_IRQHandler+0x1f0>)
 8001b70:	f7ff fab8 	bl	80010e4 <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 8001b74:	2100      	movs	r1, #0
 8001b76:	486e      	ldr	r0, [pc, #440]	; (8001d30 <DMA1_Channel5_IRQHandler+0x1f4>)
 8001b78:	f7ff f826 	bl	8000bc8 <DMA_Cmd>

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
 8001b7c:	f7ff fd64 	bl	8001648 <I2C2_getReadRegister>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d029      	beq.n	8001be4 <DMA1_Channel5_IRQHandler+0xa8>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001b90:	2301      	movs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	f300 80c3 	bgt.w	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i-1] == I2C2_getDeviceAddress()) {
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a64      	ldr	r2, [pc, #400]	; (8001d34 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001ba2:	5cd4      	ldrb	r4, [r2, r3]
 8001ba4:	f7ff fd2a 	bl	80015fc <I2C2_getDeviceAddress>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	429c      	cmp	r4, r3
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d011      	beq.n	8001bdc <DMA1_Channel5_IRQHandler+0xa0>
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff ff83 	bl	8001ac4 <_Z8getMotori>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fd31 	bl	8001628 <I2C2_getRxBuffer>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff ff01 	bl	80019d4 <_ZN5Motor13addDeltaTicksEs>
					I2C2_clearReadRegister();
 8001bd2:	f7ff fd43 	bl	800165c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001bd6:	f7ff fd1b 	bl	8001610 <I2C2_clearDeviceAddress>
					break;
 8001bda:	e0a2      	b.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e7d7      	b.n	8001b94 <DMA1_Channel5_IRQHandler+0x58>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
 8001be4:	f7ff fd30 	bl	8001648 <I2C2_getReadRegister>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d029      	beq.n	8001c4c <DMA1_Channel5_IRQHandler+0x110>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	f300 808f 	bgt.w	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i-1] == I2C2_getDeviceAddress()) {
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001c0a:	5cd4      	ldrb	r4, [r2, r3]
 8001c0c:	f7ff fcf6 	bl	80015fc <I2C2_getDeviceAddress>
 8001c10:	4603      	mov	r3, r0
 8001c12:	429c      	cmp	r4, r3
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d011      	beq.n	8001c44 <DMA1_Channel5_IRQHandler+0x108>
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f7ff ff4f 	bl	8001ac4 <_Z8getMotori>
 8001c26:	4604      	mov	r4, r0
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fcfd 	bl	8001628 <I2C2_getRxBuffer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff ff29 	bl	8001a8c <_ZN5Motor13setVoltageRawEt>
					I2C2_clearReadRegister();
 8001c3a:	f7ff fd0f 	bl	800165c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001c3e:	f7ff fce7 	bl	8001610 <I2C2_clearDeviceAddress>
					break;
 8001c42:	e06e      	b.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	e7d7      	b.n	8001bfc <DMA1_Channel5_IRQHandler+0xc0>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
 8001c4c:	f7ff fcfc 	bl	8001648 <I2C2_getReadRegister>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d028      	beq.n	8001cb2 <DMA1_Channel5_IRQHandler+0x176>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001c60:	2301      	movs	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	dc5b      	bgt.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i-1] == I2C2_getDeviceAddress()) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001c70:	5cd4      	ldrb	r4, [r2, r3]
 8001c72:	f7ff fcc3 	bl	80015fc <I2C2_getDeviceAddress>
 8001c76:	4603      	mov	r3, r0
 8001c78:	429c      	cmp	r4, r3
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <DMA1_Channel5_IRQHandler+0x16e>
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff1c 	bl	8001ac4 <_Z8getMotori>
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fcca 	bl	8001628 <I2C2_getRxBuffer>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff ff04 	bl	8001aa8 <_ZN5Motor10setCurrentEt>
					I2C2_clearReadRegister();
 8001ca0:	f7ff fcdc 	bl	800165c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001ca4:	f7ff fcb4 	bl	8001610 <I2C2_clearDeviceAddress>
					break;
 8001ca8:	e03b      	b.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	e7d8      	b.n	8001c64 <DMA1_Channel5_IRQHandler+0x128>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
 8001cb2:	f7ff fcc9 	bl	8001648 <I2C2_getReadRegister>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d028      	beq.n	8001d18 <DMA1_Channel5_IRQHandler+0x1dc>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	dc28      	bgt.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i-1] == I2C2_getDeviceAddress()) {
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001cd6:	5cd4      	ldrb	r4, [r2, r3]
 8001cd8:	f7ff fc90 	bl	80015fc <I2C2_getDeviceAddress>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d011      	beq.n	8001d10 <DMA1_Channel5_IRQHandler+0x1d4>
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f7ff fee9 	bl	8001ac4 <_Z8getMotori>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fc97 	bl	8001628 <I2C2_getRxBuffer>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff fe79 	bl	80019f8 <_ZN5Motor11setSpeedRawEs>
					I2C2_clearReadRegister();
 8001d06:	f7ff fca9 	bl	800165c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001d0a:	f7ff fc81 	bl	8001610 <I2C2_clearDeviceAddress>
					break;
 8001d0e:	e008      	b.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	e7d8      	b.n	8001cca <DMA1_Channel5_IRQHandler+0x18e>
					break;
				}
			}
		}
		else{
			I2C2_clearReadRegister();
 8001d18:	f7ff fca0 	bl	800165c <I2C2_clearReadRegister>
			I2C2_clearDeviceAddress();
 8001d1c:	f7ff fc78 	bl	8001610 <I2C2_clearDeviceAddress>
		}

	}
}
 8001d20:	e7ff      	b.n	8001d22 <DMA1_Channel5_IRQHandler+0x1e6>
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40005800 	.word	0x40005800
 8001d30:	40026058 	.word	0x40026058
 8001d34:	080023d0 	.word	0x080023d0

08001d38 <main>:
}

int main(void) {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
	I2C2_Init();
 8001d3e:	f7ff fc99 	bl	8001674 <I2C2_Init>
	getMotor(1)->setPWMMotor(200);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff febe 	bl	8001ac4 <_Z8getMotori>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	21c8      	movs	r1, #200	; 0xc8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe13 	bl	8001978 <_ZN5Motor11setPWMMotorEs>
	while (1) {
		getMotor(1)->DMASpeedInvoke();
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff feb6 	bl	8001ac4 <_Z8getMotori>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe2a 	bl	80019b4 <_ZN5Motor14DMASpeedInvokeEv>
		double raw = getMotor(1)->getSpeedRaw();
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff feaf 	bl	8001ac4 <_Z8getMotori>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe53 	bl	8001a14 <_ZN5Motor11getSpeedRawEv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb57 	bl	8000424 <__aeabi_i2d>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		double speed = getMotor(1)->getSpeed();
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fea0 	bl	8001ac4 <_Z8getMotori>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe5a 	bl	8001a40 <_ZN5Motor8getSpeedEv>
 8001d8c:	e9c7 0100 	strd	r0, r1, [r7]
		for (long i = 0; i < 100000; i++);
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <main+0x6c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	dcda      	bgt.n	8001d52 <main+0x1a>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e7f7      	b.n	8001d94 <main+0x5c>
 8001da4:	0001869f 	.word	0x0001869f

08001da8 <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d146      	bne.n	8001e46 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d141      	bne.n	8001e46 <_Z41__static_initialization_and_destruction_0ii+0x9e>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
 8001dc2:	2014      	movs	r0, #20
 8001dc4:	f000 f974 	bl	80020b0 <_Znwj>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461c      	mov	r4, r3
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff fd8e 	bl	80018f0 <_ZN5MotorC1Eh>
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001dd6:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 8001dd8:	2014      	movs	r0, #20
 8001dda:	f000 f969 	bl	80020b0 <_Znwj>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461c      	mov	r4, r3
 8001de2:	2104      	movs	r1, #4
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fd83 	bl	80018f0 <_ZN5MotorC1Eh>
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001dec:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 8001dee:	2014      	movs	r0, #20
 8001df0:	f000 f95e 	bl	80020b0 <_Znwj>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461c      	mov	r4, r3
 8001df8:	2106      	movs	r1, #6
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff fd78 	bl	80018f0 <_ZN5MotorC1Eh>
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001e02:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 8001e04:	2014      	movs	r0, #20
 8001e06:	f000 f953 	bl	80020b0 <_Znwj>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff fd6d 	bl	80018f0 <_ZN5MotorC1Eh>
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e18:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f000 f948 	bl	80020b0 <_Znwj>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461c      	mov	r4, r3
 8001e24:	210a      	movs	r1, #10
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd62 	bl	80018f0 <_ZN5MotorC1Eh>
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001e2e:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 8001e30:	2014      	movs	r0, #20
 8001e32:	f000 f93d 	bl	80020b0 <_Znwj>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461c      	mov	r4, r3
 8001e3a:	210c      	movs	r1, #12
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff fd57 	bl	80018f0 <_ZN5MotorC1Eh>
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001e44:	601c      	str	r4, [r3, #0]
		double raw = getMotor(1)->getSpeedRaw();
		double speed = getMotor(1)->getSpeed();
		for (long i = 0; i < 100000; i++);

	}
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200000a0 	.word	0x200000a0
 8001e54:	200000a4 	.word	0x200000a4
 8001e58:	200000a8 	.word	0x200000a8
 8001e5c:	200000ac 	.word	0x200000ac
 8001e60:	200000b0 	.word	0x200000b0
 8001e64:	200000b4 	.word	0x200000b4

08001e68 <_GLOBAL__sub_I_motor1>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7ff ff99 	bl	8001da8 <_Z41__static_initialization_and_destruction_0ii>
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e7e:	e003      	b.n	8001e88 <LoopCopyDataInit>

08001e80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001e82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e86:	3104      	adds	r1, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001e8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e90:	d3f6      	bcc.n	8001e80 <CopyDataInit>
  ldr r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001e94:	e002      	b.n	8001e9c <LoopFillZerobss>

08001e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e98:	f842 3b04 	str.w	r3, [r2], #4

08001e9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001e9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ea0:	d3f9      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f000 f841 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f000 f927 	bl	80020f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff ff45 	bl	8001d38 <main>
  bx lr
 8001eae:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001eb4:	080023e4 	.word	0x080023e4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ebc:	20000080 	.word	0x20000080
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001ec0:	20000080 	.word	0x20000080
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001ec4:	200000f4 	.word	0x200000f4

08001ec8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_IRQHandler>
	...

08001ecc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001edc:	e7fe      	b.n	8001edc <HardFault_Handler+0x4>
 8001ede:	bf00      	nop

08001ee0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>
 8001ee6:	bf00      	nop

08001ee8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001eec:	e7fe      	b.n	8001eec <BusFault_Handler+0x4>
 8001eee:	bf00      	nop

08001ef0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>
 8001ef6:	bf00      	nop

08001ef8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <SystemInit+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <SystemInit+0x5c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <SystemInit+0x5c>)
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <SystemInit+0x5c>)
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <SystemInit+0x60>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <SystemInit+0x5c>)
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <SystemInit+0x5c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001f4e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001f52:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <SystemInit+0x5c>)
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <SystemInit+0x5c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001f60:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <SystemInit+0x5c>)
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SystemInit+0x5c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001f6a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SystemInit+0x5c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001f72:	f000 f80d 	bl	8001f90 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SystemInit+0x64>)
 8001f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7c:	609a      	str	r2, [r3, #8]
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	88ffc00c 	.word	0x88ffc00c
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001f9e:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <SetSysClock+0x114>)
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <SetSysClock+0x114>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <SetSysClock+0x114>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <SetSysClock+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fc6:	d1f0      	bne.n	8001faa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <SetSysClock+0x114>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	e001      	b.n	8001fde <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d15a      	bne.n	800209a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <SetSysClock+0x118>)
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <SetSysClock+0x118>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <SetSysClock+0x118>)
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <SetSysClock+0x118>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <SetSysClock+0x118>)
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <SetSysClock+0x118>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <SetSysClock+0x114>)
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <SetSysClock+0x114>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <SetSysClock+0x11c>)
 8002016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800201c:	bf00      	nop
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <SetSysClock+0x11c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <SetSysClock+0x114>)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <SetSysClock+0x114>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <SetSysClock+0x114>)
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <SetSysClock+0x114>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <SetSysClock+0x114>)
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <SetSysClock+0x114>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <SetSysClock+0x114>)
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <SetSysClock+0x114>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800204c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <SetSysClock+0x114>)
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <SetSysClock+0x114>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8002058:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <SetSysClock+0x114>)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <SetSysClock+0x114>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002064:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002066:	bf00      	nop
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <SetSysClock+0x114>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f9      	beq.n	8002068 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <SetSysClock+0x114>)
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <SetSysClock+0x114>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <SetSysClock+0x114>)
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SetSysClock+0x114>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f043 0303 	orr.w	r3, r3, #3
 800208a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800208c:	bf00      	nop
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SetSysClock+0x114>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d1f9      	bne.n	800208e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40023c00 	.word	0x40023c00
 80020ac:	40007000 	.word	0x40007000

080020b0 <_Znwj>:
 80020b0:	b510      	push	{r4, lr}
 80020b2:	2800      	cmp	r0, #0
 80020b4:	bf14      	ite	ne
 80020b6:	4604      	movne	r4, r0
 80020b8:	2401      	moveq	r4, #1
 80020ba:	4620      	mov	r0, r4
 80020bc:	f000 f842 	bl	8002144 <malloc>
 80020c0:	b930      	cbnz	r0, 80020d0 <_Znwj+0x20>
 80020c2:	f000 f809 	bl	80020d8 <_ZSt15get_new_handlerv>
 80020c6:	b908      	cbnz	r0, 80020cc <_Znwj+0x1c>
 80020c8:	f000 f80e 	bl	80020e8 <abort>
 80020cc:	4780      	blx	r0
 80020ce:	e7f4      	b.n	80020ba <_Znwj+0xa>
 80020d0:	bd10      	pop	{r4, pc}

080020d2 <_ZdlPv>:
 80020d2:	f000 b83f 	b.w	8002154 <free>
	...

080020d8 <_ZSt15get_new_handlerv>:
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <_ZSt15get_new_handlerv+0xc>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	f3bf 8f5f 	dmb	sy
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200000b8 	.word	0x200000b8

080020e8 <abort>:
 80020e8:	b508      	push	{r3, lr}
 80020ea:	2006      	movs	r0, #6
 80020ec:	f000 f91e 	bl	800232c <raise>
 80020f0:	2001      	movs	r0, #1
 80020f2:	f000 f957 	bl	80023a4 <_exit>
	...

080020f8 <__libc_init_array>:
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <__libc_init_array+0x3c>)
 80020fa:	b570      	push	{r4, r5, r6, lr}
 80020fc:	461e      	mov	r6, r3
 80020fe:	4c0e      	ldr	r4, [pc, #56]	; (8002138 <__libc_init_array+0x40>)
 8002100:	2500      	movs	r5, #0
 8002102:	1ae4      	subs	r4, r4, r3
 8002104:	10a4      	asrs	r4, r4, #2
 8002106:	42a5      	cmp	r5, r4
 8002108:	d004      	beq.n	8002114 <__libc_init_array+0x1c>
 800210a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800210e:	4798      	blx	r3
 8002110:	3501      	adds	r5, #1
 8002112:	e7f8      	b.n	8002106 <__libc_init_array+0xe>
 8002114:	f000 f948 	bl	80023a8 <_init>
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <__libc_init_array+0x44>)
 800211a:	4c09      	ldr	r4, [pc, #36]	; (8002140 <__libc_init_array+0x48>)
 800211c:	461e      	mov	r6, r3
 800211e:	1ae4      	subs	r4, r4, r3
 8002120:	10a4      	asrs	r4, r4, #2
 8002122:	2500      	movs	r5, #0
 8002124:	42a5      	cmp	r5, r4
 8002126:	d004      	beq.n	8002132 <__libc_init_array+0x3a>
 8002128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800212c:	4798      	blx	r3
 800212e:	3501      	adds	r5, #1
 8002130:	e7f8      	b.n	8002124 <__libc_init_array+0x2c>
 8002132:	bd70      	pop	{r4, r5, r6, pc}
 8002134:	080023d8 	.word	0x080023d8
 8002138:	080023d8 	.word	0x080023d8
 800213c:	080023d8 	.word	0x080023d8
 8002140:	080023e0 	.word	0x080023e0

08002144 <malloc>:
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <malloc+0xc>)
 8002146:	4601      	mov	r1, r0
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f000 b857 	b.w	80021fc <_malloc_r>
 800214e:	bf00      	nop
 8002150:	2000007c 	.word	0x2000007c

08002154 <free>:
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <free+0xc>)
 8002156:	4601      	mov	r1, r0
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f000 b803 	b.w	8002164 <_free_r>
 800215e:	bf00      	nop
 8002160:	2000007c 	.word	0x2000007c

08002164 <_free_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4605      	mov	r5, r0
 8002168:	2900      	cmp	r1, #0
 800216a:	d044      	beq.n	80021f6 <_free_r+0x92>
 800216c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002170:	1f0c      	subs	r4, r1, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	bfb8      	it	lt
 8002176:	18e4      	addlt	r4, r4, r3
 8002178:	f000 f8f4 	bl	8002364 <__malloc_lock>
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <_free_r+0x94>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	4611      	mov	r1, r2
 8002182:	b913      	cbnz	r3, 800218a <_free_r+0x26>
 8002184:	6063      	str	r3, [r4, #4]
 8002186:	6014      	str	r4, [r2, #0]
 8002188:	e030      	b.n	80021ec <_free_r+0x88>
 800218a:	42a3      	cmp	r3, r4
 800218c:	d90d      	bls.n	80021aa <_free_r+0x46>
 800218e:	6822      	ldr	r2, [r4, #0]
 8002190:	18a0      	adds	r0, r4, r2
 8002192:	4283      	cmp	r3, r0
 8002194:	bf01      	itttt	eq
 8002196:	6818      	ldreq	r0, [r3, #0]
 8002198:	685b      	ldreq	r3, [r3, #4]
 800219a:	1812      	addeq	r2, r2, r0
 800219c:	6022      	streq	r2, [r4, #0]
 800219e:	6063      	str	r3, [r4, #4]
 80021a0:	600c      	str	r4, [r1, #0]
 80021a2:	e023      	b.n	80021ec <_free_r+0x88>
 80021a4:	42a2      	cmp	r2, r4
 80021a6:	d803      	bhi.n	80021b0 <_free_r+0x4c>
 80021a8:	4613      	mov	r3, r2
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1f9      	bne.n	80021a4 <_free_r+0x40>
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	1819      	adds	r1, r3, r0
 80021b4:	42a1      	cmp	r1, r4
 80021b6:	d10b      	bne.n	80021d0 <_free_r+0x6c>
 80021b8:	6821      	ldr	r1, [r4, #0]
 80021ba:	4401      	add	r1, r0
 80021bc:	1858      	adds	r0, r3, r1
 80021be:	4282      	cmp	r2, r0
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	d113      	bne.n	80021ec <_free_r+0x88>
 80021c4:	6810      	ldr	r0, [r2, #0]
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	4401      	add	r1, r0
 80021ca:	6019      	str	r1, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e00d      	b.n	80021ec <_free_r+0x88>
 80021d0:	d902      	bls.n	80021d8 <_free_r+0x74>
 80021d2:	230c      	movs	r3, #12
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	e009      	b.n	80021ec <_free_r+0x88>
 80021d8:	6821      	ldr	r1, [r4, #0]
 80021da:	1860      	adds	r0, r4, r1
 80021dc:	4282      	cmp	r2, r0
 80021de:	bf01      	itttt	eq
 80021e0:	6810      	ldreq	r0, [r2, #0]
 80021e2:	6852      	ldreq	r2, [r2, #4]
 80021e4:	1809      	addeq	r1, r1, r0
 80021e6:	6021      	streq	r1, [r4, #0]
 80021e8:	6062      	str	r2, [r4, #4]
 80021ea:	605c      	str	r4, [r3, #4]
 80021ec:	4628      	mov	r0, r5
 80021ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f2:	f000 b8b8 	b.w	8002366 <__malloc_unlock>
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
 80021f8:	200000c0 	.word	0x200000c0

080021fc <_malloc_r>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	1ccd      	adds	r5, r1, #3
 8002200:	f025 0503 	bic.w	r5, r5, #3
 8002204:	3508      	adds	r5, #8
 8002206:	2d0c      	cmp	r5, #12
 8002208:	bf38      	it	cc
 800220a:	250c      	movcc	r5, #12
 800220c:	2d00      	cmp	r5, #0
 800220e:	4606      	mov	r6, r0
 8002210:	db01      	blt.n	8002216 <_malloc_r+0x1a>
 8002212:	42a9      	cmp	r1, r5
 8002214:	d902      	bls.n	800221c <_malloc_r+0x20>
 8002216:	230c      	movs	r3, #12
 8002218:	6033      	str	r3, [r6, #0]
 800221a:	e046      	b.n	80022aa <_malloc_r+0xae>
 800221c:	f000 f8a2 	bl	8002364 <__malloc_lock>
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <_malloc_r+0xb4>)
 8002222:	681c      	ldr	r4, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4621      	mov	r1, r4
 8002228:	b1a1      	cbz	r1, 8002254 <_malloc_r+0x58>
 800222a:	680b      	ldr	r3, [r1, #0]
 800222c:	1b5b      	subs	r3, r3, r5
 800222e:	d40e      	bmi.n	800224e <_malloc_r+0x52>
 8002230:	2b0b      	cmp	r3, #11
 8002232:	d903      	bls.n	800223c <_malloc_r+0x40>
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	18cc      	adds	r4, r1, r3
 8002238:	50cd      	str	r5, [r1, r3]
 800223a:	e01e      	b.n	800227a <_malloc_r+0x7e>
 800223c:	428c      	cmp	r4, r1
 800223e:	bf0b      	itete	eq
 8002240:	6863      	ldreq	r3, [r4, #4]
 8002242:	684b      	ldrne	r3, [r1, #4]
 8002244:	6013      	streq	r3, [r2, #0]
 8002246:	6063      	strne	r3, [r4, #4]
 8002248:	bf18      	it	ne
 800224a:	460c      	movne	r4, r1
 800224c:	e015      	b.n	800227a <_malloc_r+0x7e>
 800224e:	460c      	mov	r4, r1
 8002250:	6849      	ldr	r1, [r1, #4]
 8002252:	e7e9      	b.n	8002228 <_malloc_r+0x2c>
 8002254:	4c17      	ldr	r4, [pc, #92]	; (80022b4 <_malloc_r+0xb8>)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	b91b      	cbnz	r3, 8002262 <_malloc_r+0x66>
 800225a:	4630      	mov	r0, r6
 800225c:	f000 f82c 	bl	80022b8 <_sbrk_r>
 8002260:	6020      	str	r0, [r4, #0]
 8002262:	4629      	mov	r1, r5
 8002264:	4630      	mov	r0, r6
 8002266:	f000 f827 	bl	80022b8 <_sbrk_r>
 800226a:	1c43      	adds	r3, r0, #1
 800226c:	d018      	beq.n	80022a0 <_malloc_r+0xa4>
 800226e:	1cc4      	adds	r4, r0, #3
 8002270:	f024 0403 	bic.w	r4, r4, #3
 8002274:	42a0      	cmp	r0, r4
 8002276:	d10d      	bne.n	8002294 <_malloc_r+0x98>
 8002278:	6025      	str	r5, [r4, #0]
 800227a:	4630      	mov	r0, r6
 800227c:	f000 f873 	bl	8002366 <__malloc_unlock>
 8002280:	f104 000b 	add.w	r0, r4, #11
 8002284:	1d23      	adds	r3, r4, #4
 8002286:	f020 0007 	bic.w	r0, r0, #7
 800228a:	1ac3      	subs	r3, r0, r3
 800228c:	d00e      	beq.n	80022ac <_malloc_r+0xb0>
 800228e:	425a      	negs	r2, r3
 8002290:	50e2      	str	r2, [r4, r3]
 8002292:	bd70      	pop	{r4, r5, r6, pc}
 8002294:	1a21      	subs	r1, r4, r0
 8002296:	4630      	mov	r0, r6
 8002298:	f000 f80e 	bl	80022b8 <_sbrk_r>
 800229c:	3001      	adds	r0, #1
 800229e:	d1eb      	bne.n	8002278 <_malloc_r+0x7c>
 80022a0:	230c      	movs	r3, #12
 80022a2:	6033      	str	r3, [r6, #0]
 80022a4:	4630      	mov	r0, r6
 80022a6:	f000 f85e 	bl	8002366 <__malloc_unlock>
 80022aa:	2000      	movs	r0, #0
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	bf00      	nop
 80022b0:	200000c0 	.word	0x200000c0
 80022b4:	200000bc 	.word	0x200000bc

080022b8 <_sbrk_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4c06      	ldr	r4, [pc, #24]	; (80022d4 <_sbrk_r+0x1c>)
 80022bc:	2300      	movs	r3, #0
 80022be:	4605      	mov	r5, r0
 80022c0:	4608      	mov	r0, r1
 80022c2:	6023      	str	r3, [r4, #0]
 80022c4:	f000 f860 	bl	8002388 <_sbrk>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d102      	bne.n	80022d2 <_sbrk_r+0x1a>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	b103      	cbz	r3, 80022d2 <_sbrk_r+0x1a>
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	200000f0 	.word	0x200000f0

080022d8 <_raise_r>:
 80022d8:	291f      	cmp	r1, #31
 80022da:	b538      	push	{r3, r4, r5, lr}
 80022dc:	4604      	mov	r4, r0
 80022de:	460d      	mov	r5, r1
 80022e0:	d904      	bls.n	80022ec <_raise_r+0x14>
 80022e2:	2316      	movs	r3, #22
 80022e4:	6003      	str	r3, [r0, #0]
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80022ee:	b112      	cbz	r2, 80022f6 <_raise_r+0x1e>
 80022f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80022f4:	b94b      	cbnz	r3, 800230a <_raise_r+0x32>
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f832 	bl	8002360 <_getpid_r>
 80022fc:	462a      	mov	r2, r5
 80022fe:	4601      	mov	r1, r0
 8002300:	4620      	mov	r0, r4
 8002302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002306:	f000 b819 	b.w	800233c <_kill_r>
 800230a:	2b01      	cmp	r3, #1
 800230c:	d00c      	beq.n	8002328 <_raise_r+0x50>
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	d103      	bne.n	800231a <_raise_r+0x42>
 8002312:	2316      	movs	r3, #22
 8002314:	6003      	str	r3, [r0, #0]
 8002316:	2001      	movs	r0, #1
 8002318:	bd38      	pop	{r3, r4, r5, pc}
 800231a:	2400      	movs	r4, #0
 800231c:	4628      	mov	r0, r5
 800231e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002322:	4798      	blx	r3
 8002324:	4620      	mov	r0, r4
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	2000      	movs	r0, #0
 800232a:	bd38      	pop	{r3, r4, r5, pc}

0800232c <raise>:
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <raise+0xc>)
 800232e:	4601      	mov	r1, r0
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	f7ff bfd1 	b.w	80022d8 <_raise_r>
 8002336:	bf00      	nop
 8002338:	2000007c 	.word	0x2000007c

0800233c <_kill_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4c07      	ldr	r4, [pc, #28]	; (800235c <_kill_r+0x20>)
 8002340:	2300      	movs	r3, #0
 8002342:	4605      	mov	r5, r0
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	f000 f815 	bl	8002378 <_kill>
 800234e:	1c43      	adds	r3, r0, #1
 8002350:	d102      	bne.n	8002358 <_kill_r+0x1c>
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	b103      	cbz	r3, 8002358 <_kill_r+0x1c>
 8002356:	602b      	str	r3, [r5, #0]
 8002358:	bd38      	pop	{r3, r4, r5, pc}
 800235a:	bf00      	nop
 800235c:	200000f0 	.word	0x200000f0

08002360 <_getpid_r>:
 8002360:	f000 b802 	b.w	8002368 <_getpid>

08002364 <__malloc_lock>:
 8002364:	4770      	bx	lr

08002366 <__malloc_unlock>:
 8002366:	4770      	bx	lr

08002368 <_getpid>:
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <_getpid+0xc>)
 800236a:	2258      	movs	r2, #88	; 0x58
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f04f 30ff 	mov.w	r0, #4294967295
 8002372:	4770      	bx	lr
 8002374:	200000f0 	.word	0x200000f0

08002378 <_kill>:
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <_kill+0xc>)
 800237a:	2258      	movs	r2, #88	; 0x58
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	4770      	bx	lr
 8002384:	200000f0 	.word	0x200000f0

08002388 <_sbrk>:
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <_sbrk+0x14>)
 800238a:	4602      	mov	r2, r0
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	b909      	cbnz	r1, 8002394 <_sbrk+0xc>
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <_sbrk+0x18>)
 8002392:	6019      	str	r1, [r3, #0]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	4402      	add	r2, r0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4770      	bx	lr
 800239c:	200000c4 	.word	0x200000c4
 80023a0:	200000f4 	.word	0x200000f4

080023a4 <_exit>:
 80023a4:	e7fe      	b.n	80023a4 <_exit>
	...

080023a8 <_init>:
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	bf00      	nop
 80023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ae:	bc08      	pop	{r3}
 80023b0:	469e      	mov	lr, r3
 80023b2:	4770      	bx	lr

080023b4 <_fini>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr
