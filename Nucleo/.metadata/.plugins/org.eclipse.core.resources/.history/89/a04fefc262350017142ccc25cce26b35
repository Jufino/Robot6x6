#include <math.h>
#include <Motor/Motor.h>

#define alfa 0.5

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);

Motor *getMotor(int i) {
	switch (i) {
	case 1:
		return motor1;
	case 2:
		return motor2;
	case 3:
		return motor3;
	case 4:
		return motor4;
	case 5:
		return motor5;
	case 6:
		return motor6;
	default:
		return NULL;
	}
}

extern "C" {
#include <Leds/Leds.h>
#include <Ultrasonic/Ultrasonic.h>
#include <Servomotor/Servomotor.h>
#include <Buttons/Buttons.h>
#include <IMU/IMU.h>
#include <I2CMasterLib/I2CMasterLib.h>
#include <I2CSlaveLib/I2CSlaveLib.h>
#include "stm32l1xx.h"
}

enum Direction {
	FORWARD, BACKWARD, ROTATE_CLOCKWISE, ROTATE_ANTICLOCKWISE, STOP
};

#define I2C1_MAX_SEND_BUFFER 4
volatile uint8_t motorTestValue = 0;
volatile long x = 0;
volatile long y = 0;
volatile long z = 0;

volatile double yaw = 0;
volatile double roll = 0;
volatile double pitch = 0;
volatile double lastDistance[6];
double yawEncoders = 0;

void InitializeTimer(void) {
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

	TIM_TimeBaseInitTypeDef timerInitStructure; //opakovat kazdych 0.025 s = 40 hz
	timerInitStructure.TIM_Prescaler = 49999;	//1Mhz/50000 = 20 hz
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = 5;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
	TIM_Cmd(TIM2, ENABLE);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
}

void speedL(int16_t mmPerSec) {
	getMotor(1)->setSpeedMotor(mmPerSec);
	getMotor(2)->setSpeedMotor(mmPerSec);
	getMotor(3)->setSpeedMotor(mmPerSec);
}

void speedR(int16_t mmPerSec) {
	getMotor(4)->setSpeedMotor(mmPerSec);
	getMotor(5)->setSpeedMotor(mmPerSec);
	getMotor(6)->setSpeedMotor(mmPerSec);
}

void goDirection(Direction dir, int16_t mmPerSec) {
	switch (dir) {
	case FORWARD:
		speedL(mmPerSec);
		speedR(mmPerSec);
		break;
	case BACKWARD:
		speedL(-mmPerSec);
		speedR(-mmPerSec);
		break;
	case ROTATE_CLOCKWISE:
		speedL(mmPerSec);
		speedR(-mmPerSec);
		break;
	case ROTATE_ANTICLOCKWISE:
		speedL(-mmPerSec);
		speedR(mmPerSec);
		break;
	case STOP:
		speedL(0);
		speedR(0);
		break;
	}
}

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
	double diff1 = fabs(val1 - val2);
	double diff2 = fabs(val2 - val3);
	double diff3 = fabs(val1 - val3);
	if (diff1 < diff2 && diff1 < diff3) {
		return (val1 + val2) / 2;
	} else if (diff2 < diff1 && diff2 < diff3) {
		return (val2 + val3) / 2;
	} else
		return (val1 + val3) / 2;
}

extern "C" void EXTI1_IRQHandler(void) {
	Ultrasonic_Pin_Interrupt();
}

extern "C" void TIM4_IRQHandler(void) {
	Ultrasonic_Timer_Update_Interrupt();
}

#define I2C1_BufferSize 10
volatile uint16_t I2C1_Buffer[I2C1_BufferSize];
volatile uint8_t I2C1_BufferIndex = 0;
volatile uint8_t I2C1_NumberBytesToSend = 0;
volatile uint8_t I2C1_Transmitter = 0;
volatile uint8_t I2C1_CommunicationByPeriod = 1;

extern "C" void I2C1_ER_IRQHandler(void) {
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
		I2C1_BufferIndex = 0;
		I2C1_NumberBytesToSend = 0;
	}
}

extern "C" void I2C1_EV_IRQHandler(void) {
	I2C1_CommunicationByPeriod = 1;
	uint16_t value;
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
		I2C1_BufferIndex = 0;
		I2C1->SR1;
		I2C1->SR2;
		I2C1_Transmitter = (I2C_SR2_TRA & I2C1->SR2) == I2C_SR2_TRA;
		if (I2C1_Transmitter == 1) {
			if (I2C1_BufferIndex < I2C1_BufferSize) {	//EV3-1
				I2C1->DR = I2C1_Buffer[I2C1_BufferIndex++];
			} else {
				I2C1->SR1 |= I2C_SR1_AF;
			}
			if (I2C1_BufferIndex >= I2C1_NumberBytesToSend) {
				I2C1->SR1 |= I2C_SR1_AF;
			}
		}
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
		I2C1_Buffer[I2C1_BufferIndex++] = I2C1->DR;
		switch (I2C1_Buffer[0]) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
			if (I2C1_BufferIndex == 3)
				getMotor(I2C1_Buffer[0])->setSpeedMotor(
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
		case 7:
			if (I2C1_BufferIndex == 2)
				goDirection(FORWARD, I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
		case 8:
			if (I2C1_BufferIndex == 2)
				goDirection(BACKWARD, I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
		case 9:
			if (I2C1_BufferIndex == 2)
				goDirection(ROTATE_CLOCKWISE,
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
		case 10:
			if (I2C1_BufferIndex == 2)
				goDirection(ROTATE_ANTICLOCKWISE,
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
		case 11:
			goDirection(STOP, 0);
			break;
		case 12:
			if (I2C1_BufferIndex == 2) {
				setLed(0, (I2C1_Buffer[1] & (1 << 1)) == (1 << 1) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 2)) == (1 << 2) ? ON : OFF);
				setLed(1, (I2C1_Buffer[1] & (1 << 3)) == (1 << 3) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 4)) == (1 << 4) ? ON : OFF);
				setLed(2, (I2C1_Buffer[1] & (1 << 5)) == (1 << 5) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 6)) == (1 << 6) ? ON : OFF);
			}
			break;
		case 13:
			if (I2C1_BufferIndex == 3) {
				setServo(I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			}
			break;
		case 100:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 24;
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 16;
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = x & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 101:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 24;
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 16;
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = y & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 102:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 24;
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 16;
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = z & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 103:
			I2C1_BufferIndex = 0;
			value = (int16_t) (roll * 10000);
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 104:
			I2C1_BufferIndex = 0;
			value = (int16_t) (pitch * 10000);
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 105:
			I2C1_BufferIndex = 0;
			value = (uint16_t) (yaw * 10000);
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 106:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex] = 0;
			if (buttons[0])
				I2C1_Buffer[I2C1_BufferIndex] |= 1;
			if (buttons[1])
				I2C1_Buffer[I2C1_BufferIndex] |= 2;
			if (buttons[2])
				I2C1_Buffer[I2C1_BufferIndex] |= 4;
			I2C1_BufferIndex++;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 107:
			I2C1_BufferIndex = 0;
			value = getUltRaw(0);
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
			;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 254:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex++] = motorTestValue & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		case 255:
			I2C1_BufferIndex = 0;
			I2C1_Buffer[I2C1_BufferIndex++] = slave_address & 0xFF;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
			I2C1_BufferIndex = 0;
			break;
		}
	}

	//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
		if (I2C1_BufferIndex < I2C1_BufferSize) {
			I2C1->DR = I2C1_Buffer[I2C1_BufferIndex++];
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
		}
		if (I2C1_BufferIndex >= I2C1_NumberBytesToSend) {
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}

	//ev3-2
/*	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_AF) {
		I2C1->SR1 |= I2C_SR1_AF;
	}*/

	if (I2C1_Transmitter == 0) {
		//ev4
		while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
			I2C1_BufferIndex = 0;
			I2C1->SR1;
			I2C1->CR1 |= 0x1;
		}
	}
}

extern "C" void DMA1_Channel5_IRQHandler(void) {
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
		DMA_ClearFlag(DMA1_FLAG_TC5);
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);
		I2C2_clearReadRegister();
	}
}

volatile uint8_t timerDone = 0;
long x_last = 0;
long y_last = 0;
extern "C" void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
		timerDone++;
/*		if (!I2C1_CommunicationByPeriod) {
			I2C1_BufferIndex = 0;
			I2C1_Init();
		} else {
			I2C1_CommunicationByPeriod = 0;
		}*/
	}
}

extern "C" void EXTI9_5_IRQHandler(void) {
	Buttons_Interrupt();
}

int main(void) {
	for (unsigned int i = 0; i < 100000; i++)
		;
	InitializePWMServo();
	Leds_Init();
	Buttons_Init();
	Ultrasonic_init();

	I2C1_Init();
	I2C2_Init();

	motorTestValue = 0;
	for (int i = 0; i < numberOfMotors; i++) {
		if (getMotor(i + 1)->isTestOk()) {
			motorTestValue |= (1 << i);
		}
	}

	InitializeTimer();

	while (1) {

		roll = getRoll();
		pitch = getPitch();
		yaw = getYaw();
		ultTriger(0);

		if (timerDone > 0) {

			for (int i = 1; i <= numberOfMotors / 2; i++) {
				getMotor(i)->DMADeltaTicksInvoke();
				getMotor(i + 3)->DMADeltaTicksInvoke();
			}
			double speeds[6];
			for (int i = 1; i <= numberOfMotors; i++) {
				speeds[i - 1] = (getMotor(i)->getDistance()
						- lastDistance[i - 1]);
				lastDistance[i - 1] = getMotor(i)->getDistance();
			}

			double vL = getAverageOfSimilaryValues(speeds[0], speeds[1],
					speeds[2]);
			double vR = getAverageOfSimilaryValues(speeds[3], speeds[4],
					speeds[5]);
			double vT = (vL + vR) / 2;

			double omegaT = (vR - vL) / lengthBetweenLeftAndRightWheel;

			yawEncoders = yawEncoders + omegaT;
			yaw = yaw * alfa + yawEncoders * (1 - alfa);
			if (yaw > 2 * M_PI)
				yaw -= 2 * M_PI;
			else if (yaw < 0)
				yaw += 2 * M_PI;
			yawEncoders = yaw;
			x += (long) (vT * cos(yaw));
			y += (long) (vT * sin(yaw));

			timerDone = 0;
		}
		for(int i=0;i<10000;i++);

	}
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line)
{
	while (1)
	{
	}
}
#endif
