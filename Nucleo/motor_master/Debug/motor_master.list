
C:\Users\Juraj\Documents\GitHub\Robot6x6\Nucleo\motor_master\Debug\motor_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006168  08006168  00016168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08006360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  20000088  080063e8  00020088  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  2000019c  080063e8  0002019c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000917a  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bf4  00000000  00000000  0002922b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b18  00000000  00000000  0002ae20  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0002b938  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000040bb  00000000  00000000  0002c318  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032d1  00000000  00000000  000303d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000336a4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003280  00000000  00000000  00033724  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  000369a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  000369e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	08006150 	.word	0x08006150

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	08006150 	.word	0x08006150

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	; 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b70:	f1a2 0201 	sub.w	r2, r2, #1
 8000b74:	d1ed      	bne.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fmul>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d06f      	beq.n	8000dc8 <__aeabi_fmul+0xf8>
 8000ce8:	441a      	add	r2, r3
 8000cea:	ea80 0c01 	eor.w	ip, r0, r1
 8000cee:	0240      	lsls	r0, r0, #9
 8000cf0:	bf18      	it	ne
 8000cf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf6:	d01e      	beq.n	8000d36 <__aeabi_fmul+0x66>
 8000cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d04:	fba0 3101 	umull	r3, r1, r0, r1
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d0c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d10:	bf3e      	ittt	cc
 8000d12:	0049      	lslcc	r1, r1, #1
 8000d14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d18:	005b      	lslcc	r3, r3, #1
 8000d1a:	ea40 0001 	orr.w	r0, r0, r1
 8000d1e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d22:	2afd      	cmp	r2, #253	; 0xfd
 8000d24:	d81d      	bhi.n	8000d62 <__aeabi_fmul+0x92>
 8000d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3e:	bf08      	it	eq
 8000d40:	0249      	lsleq	r1, r1, #9
 8000d42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4a:	3a7f      	subs	r2, #127	; 0x7f
 8000d4c:	bfc2      	ittt	gt
 8000d4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d56:	4770      	bxgt	lr
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	dc5d      	bgt.n	8000e20 <__aeabi_fmul+0x150>
 8000d64:	f112 0f19 	cmn.w	r2, #25
 8000d68:	bfdc      	itt	le
 8000d6a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d6e:	4770      	bxle	lr
 8000d70:	f1c2 0200 	rsb	r2, r2, #0
 8000d74:	0041      	lsls	r1, r0, #1
 8000d76:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7a:	f1c2 0220 	rsb	r2, r2, #32
 8000d7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d86:	f140 0000 	adc.w	r0, r0, #0
 8000d8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8e:	bf08      	it	eq
 8000d90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d94:	4770      	bx	lr
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0040      	lsleq	r0, r0, #1
 8000da2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000da6:	3a01      	subeq	r2, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xce>
 8000daa:	ea40 000c 	orr.w	r0, r0, ip
 8000dae:	f093 0f00 	teq	r3, #0
 8000db2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0049      	lsleq	r1, r1, #1
 8000dba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dbe:	3b01      	subeq	r3, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xe6>
 8000dc2:	ea41 010c 	orr.w	r1, r1, ip
 8000dc6:	e78f      	b.n	8000ce8 <__aeabi_fmul+0x18>
 8000dc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dcc:	ea92 0f0c 	teq	r2, ip
 8000dd0:	bf18      	it	ne
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d00a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	d1d8      	bne.n	8000d96 <__aeabi_fmul+0xc6>
 8000de4:	ea80 0001 	eor.w	r0, r0, r1
 8000de8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	bf17      	itett	ne
 8000df4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	f091 0f00 	teqne	r1, #0
 8000dfe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e02:	d014      	beq.n	8000e2e <__aeabi_fmul+0x15e>
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	d101      	bne.n	8000e0e <__aeabi_fmul+0x13e>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d10f      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e0e:	ea93 0f0c 	teq	r3, ip
 8000e12:	d103      	bne.n	8000e1c <__aeabi_fmul+0x14c>
 8000e14:	024b      	lsls	r3, r1, #9
 8000e16:	bf18      	it	ne
 8000e18:	4608      	movne	r0, r1
 8000e1a:	d108      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2c:	4770      	bx	lr
 8000e2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fdiv>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d069      	beq.n	8000f24 <__aeabi_fdiv+0xec>
 8000e50:	eba2 0203 	sub.w	r2, r2, r3
 8000e54:	ea80 0c01 	eor.w	ip, r0, r1
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5e:	d037      	beq.n	8000ed0 <__aeabi_fdiv+0x98>
 8000e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf38      	it	cc
 8000e74:	005b      	lslcc	r3, r3, #1
 8000e76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	bf24      	itt	cs
 8000e82:	1a5b      	subcs	r3, r3, r1
 8000e84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9a:	bf24      	itt	cs
 8000e9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	bf18      	it	ne
 8000eb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eba:	d1e0      	bne.n	8000e7e <__aeabi_fdiv+0x46>
 8000ebc:	2afd      	cmp	r2, #253	; 0xfd
 8000ebe:	f63f af50 	bhi.w	8000d62 <__aeabi_fmul+0x92>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed8:	327f      	adds	r2, #127	; 0x7f
 8000eda:	bfc2      	ittt	gt
 8000edc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee4:	4770      	bxgt	lr
 8000ee6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	e737      	b.n	8000d62 <__aeabi_fmul+0x92>
 8000ef2:	f092 0f00 	teq	r2, #0
 8000ef6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0040      	lsleq	r0, r0, #1
 8000efe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f02:	3a01      	subeq	r2, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xc2>
 8000f06:	ea40 000c 	orr.w	r0, r0, ip
 8000f0a:	f093 0f00 	teq	r3, #0
 8000f0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0049      	lsleq	r1, r1, #1
 8000f16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1a:	3b01      	subeq	r3, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xda>
 8000f1e:	ea41 010c 	orr.w	r1, r1, ip
 8000f22:	e795      	b.n	8000e50 <__aeabi_fdiv+0x18>
 8000f24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d108      	bne.n	8000f40 <__aeabi_fdiv+0x108>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	f47f af7d 	bne.w	8000e2e <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	f47f af70 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e776      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	d104      	bne.n	8000f50 <__aeabi_fdiv+0x118>
 8000f46:	024b      	lsls	r3, r1, #9
 8000f48:	f43f af4c 	beq.w	8000de4 <__aeabi_fmul+0x114>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e76e      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f54:	bf18      	it	ne
 8000f56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	d1ca      	bne.n	8000ef2 <__aeabi_fdiv+0xba>
 8000f5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f60:	f47f af5c 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	f47f af3c 	bne.w	8000de4 <__aeabi_fmul+0x114>
 8000f6c:	e75f      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f6e:	bf00      	nop

08000f70 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73bb      	strb	r3, [r7, #14]
 8000f80:	230f      	movs	r3, #15
 8000f82:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d038      	beq.n	8000ffe <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <NVIC_Init+0xb8>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f1c3 0304 	rsb	r3, r3, #4
 8000fa0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000fa2:	7b7a      	ldrb	r2, [r7, #13]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	fa42 f303 	asr.w	r3, r2, r3
 8000faa:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	789a      	ldrb	r2, [r3, #2]
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <NVIC_Init+0xbc>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <NVIC_Init+0xbc>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ff8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ffc:	e00f      	b.n	800101e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ffe:	490b      	ldr	r1, [pc, #44]	; (800102c <NVIC_Init+0xbc>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	095b      	lsrs	r3, r3, #5
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	2201      	movs	r2, #1
 8001014:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001016:	f100 0320 	add.w	r3, r0, #32
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	e000e100 	.word	0xe000e100

08001030 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001040:	4013      	ands	r3, r2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a43      	ldr	r2, [pc, #268]	; (8001170 <DMA_DeInit+0x140>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d106      	bne.n	8001074 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8001066:	4a43      	ldr	r2, [pc, #268]	; (8001174 <DMA_DeInit+0x144>)
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <DMA_DeInit+0x144>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f043 030f 	orr.w	r3, r3, #15
 8001070:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8001072:	e077      	b.n	8001164 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a40      	ldr	r2, [pc, #256]	; (8001178 <DMA_DeInit+0x148>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <DMA_DeInit+0x144>)
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <DMA_DeInit+0x144>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001086:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8001088:	e06c      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a3b      	ldr	r2, [pc, #236]	; (800117c <DMA_DeInit+0x14c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d106      	bne.n	80010a0 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <DMA_DeInit+0x144>)
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <DMA_DeInit+0x144>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800109c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800109e:	e061      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a37      	ldr	r2, [pc, #220]	; (8001180 <DMA_DeInit+0x150>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d106      	bne.n	80010b6 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 80010a8:	4a32      	ldr	r2, [pc, #200]	; (8001174 <DMA_DeInit+0x144>)
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <DMA_DeInit+0x144>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80010b2:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80010b4:	e056      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a32      	ldr	r2, [pc, #200]	; (8001184 <DMA_DeInit+0x154>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d106      	bne.n	80010cc <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <DMA_DeInit+0x144>)
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <DMA_DeInit+0x144>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80010c8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80010ca:	e04b      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <DMA_DeInit+0x158>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d106      	bne.n	80010e2 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <DMA_DeInit+0x144>)
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <DMA_DeInit+0x144>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010de:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80010e0:	e040      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <DMA_DeInit+0x15c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d106      	bne.n	80010f8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <DMA_DeInit+0x144>)
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <DMA_DeInit+0x144>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80010f4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80010f6:	e035      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <DMA_DeInit+0x160>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <DMA_DeInit+0x164>)
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <DMA_DeInit+0x164>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f043 030f 	orr.w	r3, r3, #15
 800110a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800110c:	e02a      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <DMA_DeInit+0x168>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d106      	bne.n	8001124 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <DMA_DeInit+0x164>)
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <DMA_DeInit+0x164>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001120:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8001122:	e01f      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <DMA_DeInit+0x16c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d106      	bne.n	800113a <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <DMA_DeInit+0x164>)
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <DMA_DeInit+0x164>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001136:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8001138:	e014      	b.n	8001164 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <DMA_DeInit+0x170>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d106      	bne.n	8001150 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <DMA_DeInit+0x164>)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <DMA_DeInit+0x164>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800114c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800114e:	e009      	b.n	8001164 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <DMA_DeInit+0x174>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d105      	bne.n	8001164 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <DMA_DeInit+0x164>)
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <DMA_DeInit+0x164>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001162:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40026008 	.word	0x40026008
 8001174:	40026000 	.word	0x40026000
 8001178:	4002601c 	.word	0x4002601c
 800117c:	40026030 	.word	0x40026030
 8001180:	40026044 	.word	0x40026044
 8001184:	40026058 	.word	0x40026058
 8001188:	4002606c 	.word	0x4002606c
 800118c:	40026080 	.word	0x40026080
 8001190:	40026408 	.word	0x40026408
 8001194:	40026400 	.word	0x40026400
 8001198:	4002641c 	.word	0x4002641c
 800119c:	40026430 	.word	0x40026430
 80011a0:	40026444 	.word	0x40026444
 80011a4:	40026458 	.word	0x40026458

080011a8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011c6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80011d6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80011e2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80011ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60da      	str	r2, [r3, #12]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001242:	e006      	b.n	8001252 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800124c:	4013      	ands	r3, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	605a      	str	r2, [r3, #4]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	431a      	orrs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001298:	e006      	b.n	80012a8 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	601a      	str	r2, [r3, #0]
  }
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <DMA_GetFlagStatus+0x48>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e002      	b.n	80012dc <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <DMA_GetFlagStatus+0x4c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e001      	b.n	80012f0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40026000 	.word	0x40026000
 8001300:	40026400 	.word	0x40026400

08001304 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <DMA_ClearFlag+0x2c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 800131c:	e002      	b.n	8001324 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <DMA_ClearFlag+0x30>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6053      	str	r3, [r2, #4]
  }  
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40026000 	.word	0x40026000
 8001334:	40026400 	.word	0x40026400

08001338 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <EXTI_Init+0xe0>)
 8001346:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d04f      	beq.n	80013f0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001350:	4931      	ldr	r1, [pc, #196]	; (8001418 <EXTI_Init+0xe0>)
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <EXTI_Init+0xe0>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	43db      	mvns	r3, r3
 800135c:	4013      	ands	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001360:	492d      	ldr	r1, [pc, #180]	; (8001418 <EXTI_Init+0xe0>)
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <EXTI_Init+0xe0>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	43db      	mvns	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	6811      	ldr	r1, [r2, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800138a:	4923      	ldr	r1, [pc, #140]	; (8001418 <EXTI_Init+0xe0>)
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <EXTI_Init+0xe0>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	43db      	mvns	r3, r3
 8001396:	4013      	ands	r3, r2
 8001398:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800139a:	491f      	ldr	r1, [pc, #124]	; (8001418 <EXTI_Init+0xe0>)
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <EXTI_Init+0xe0>)
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4013      	ands	r3, r2
 80013a8:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	795b      	ldrb	r3, [r3, #5]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d10e      	bne.n	80013d0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80013b2:	4919      	ldr	r1, [pc, #100]	; (8001418 <EXTI_Init+0xe0>)
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <EXTI_Init+0xe0>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80013c0:	4915      	ldr	r1, [pc, #84]	; (8001418 <EXTI_Init+0xe0>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <EXTI_Init+0xe0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80013ce:	e01d      	b.n	800140c <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <EXTI_Init+0xe0>)
 80013d2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	6811      	ldr	r1, [r2, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80013ee:	e00d      	b.n	800140c <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	43d2      	mvns	r2, r2
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
  }
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010400 	.word	0x40010400

0800141c <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <EXTI_GetITStatus+0x44>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4013      	ands	r3, r2
 8001434:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <EXTI_GetITStatus+0x44>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <EXTI_GetITStatus+0x32>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010400 	.word	0x40010400

08001464 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <EXTI_ClearITPendingBit+0x18>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6153      	str	r3, [r2, #20]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40010400 	.word	0x40010400

08001480 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e07e      	b.n	800159a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800149c:	2201      	movs	r2, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d16d      	bne.n	8001594 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2103      	movs	r1, #3
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	4619      	mov	r1, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	791b      	ldrb	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d003      	beq.n	80014f6 <GPIO_Init+0x76>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d136      	bne.n	8001564 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2103      	movs	r1, #3
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	4619      	mov	r1, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	889b      	ldrh	r3, [r3, #4]
 8001528:	b29a      	uxth	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	b29b      	uxth	r3, r3
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	4013      	ands	r3, r2
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	889b      	ldrh	r3, [r3, #4]
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	799b      	ldrb	r3, [r3, #6]
 800154e:	4619      	mov	r1, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	b29b      	uxth	r3, r3
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	b29b      	uxth	r3, r3
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2103      	movs	r1, #3
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	79db      	ldrb	r3, [r3, #7]
 8001584:	4619      	mov	r1, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	f67f af7d 	bls.w	800149c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80015c4:	787a      	ldrb	r2, [r7, #1]
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	210f      	movs	r1, #15
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	ea02 0103 	and.w	r1, r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f100 0208 	add.w	r2, r0, #8
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <I2C_DeInit+0x44>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10a      	bne.n	8001662 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800164c:	2101      	movs	r1, #1
 800164e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001652:	f000 fbc3 	bl	8001ddc <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8001656:	2100      	movs	r1, #0
 8001658:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800165c:	f000 fbbe 	bl	8001ddc <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8001660:	e009      	b.n	8001676 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001662:	2101      	movs	r1, #1
 8001664:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001668:	f000 fbb8 	bl	8001ddc <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800166c:	2100      	movs	r1, #0
 800166e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001672:	f000 fbb3 	bl	8001ddc <RCC_APB1PeriphResetCmd>
  }
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40005400 	.word	0x40005400

08001684 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001692:	2300      	movs	r3, #0
 8001694:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001696:	2304      	movs	r3, #4
 8001698:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <I2C_Init+0x174>)
 800169c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80016a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fa5f 	bl	8001b74 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <I2C_Init+0x178>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80016c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016ca:	4313      	orrs	r3, r2
 80016cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016d2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a44      	ldr	r2, [pc, #272]	; (8001800 <I2C_Init+0x17c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d815      	bhi.n	800171e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001702:	2b03      	cmp	r3, #3
 8001704:	d801      	bhi.n	800170a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001706:	2304      	movs	r3, #4
 8001708:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800170a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800170c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800170e:	4313      	orrs	r3, r2
 8001710:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001714:	3301      	adds	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	841a      	strh	r2, [r3, #32]
 800171c:	e040      	b.n	80017a0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	88db      	ldrh	r3, [r3, #6]
 8001722:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001726:	4293      	cmp	r3, r2
 8001728:	d109      	bne.n	800173e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800173c:	e00e      	b.n	800175c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800175c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800175e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800176e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001772:	4313      	orrs	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800177a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800177e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <I2C_Init+0x180>)
 800178c:	fb82 1203 	smull	r1, r2, r2, r3
 8001790:	1192      	asrs	r2, r2, #6
 8001792:	17db      	asrs	r3, r3, #31
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017a4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80017bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017be:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	889a      	ldrh	r2, [r3, #4]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	895b      	ldrh	r3, [r3, #10]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d6:	4313      	orrs	r3, r2
 80017d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017de:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	899a      	ldrh	r2, [r3, #12]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	891b      	ldrh	r3, [r3, #8]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	811a      	strh	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	007a1200 	.word	0x007a1200
 80017fc:	431bde83 	.word	0x431bde83
 8001800:	000186a0 	.word	0x000186a0
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800182a:	e007      	b.n	800183c <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	801a      	strh	r2, [r3, #0]
  }
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800186a:	e007      	b.n	800187c <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	801a      	strh	r2, [r3, #0]
  }
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80018aa:	e007      	b.n	80018bc <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	801a      	strh	r2, [r3, #0]
  }
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80018ea:	e007      	b.n	80018fc <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	801a      	strh	r2, [r3, #0]
  }
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	4613      	mov	r3, r2
 8001916:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001918:	78bb      	ldrb	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	70fb      	strb	r3, [r7, #3]
 8001926:	e003      	b.n	8001930 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	821a      	strh	r2, [r3, #16]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	821a      	strh	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	889b      	ldrh	r3, [r3, #4]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 8001986:	e007      	b.n	8001998 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	809a      	strh	r2, [r3, #4]
  }
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	889b      	ldrh	r3, [r3, #4]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 80019c6:	e007      	b.n	80019d8 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	809a      	strh	r2, [r3, #4]
  }
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 8001a0a:	e009      	b.n	8001a20 <I2C_ITConfig+0x3c>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	809a      	strh	r2, [r3, #4]
  }
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8a9b      	ldrh	r3, [r3, #20]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8b1b      	ldrh	r3, [r3, #24]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a66:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d102      	bne.n	8001a7a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001a74:	2301      	movs	r3, #1
 8001a76:	75fb      	strb	r3, [r7, #23]
 8001a78:	e001      	b.n	8001a7e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	0f1b      	lsrs	r3, r3, #28
 8001aaa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ab2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3314      	adds	r3, #20
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e005      	b.n	8001ace <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3318      	adds	r3, #24
 8001acc:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
 8001ade:	e001      	b.n	8001ae4 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	8892      	ldrh	r2, [r2, #4]
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b12:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b1a:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8a9b      	ldrh	r3, [r3, #20]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <I2C_GetITStatus+0x48>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b5c:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	829a      	strh	r2, [r3, #20]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d865      	bhi.n	8001c70 <RCC_GetClocksFreq+0xfc>
 8001ba4:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <RCC_GetClocksFreq+0x38>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001be1 	.word	0x08001be1
 8001bb0:	08001c71 	.word	0x08001c71
 8001bb4:	08001c71 	.word	0x08001c71
 8001bb8:	08001c71 	.word	0x08001c71
 8001bbc:	08001c01 	.word	0x08001c01
 8001bc0:	08001c71 	.word	0x08001c71
 8001bc4:	08001c71 	.word	0x08001c71
 8001bc8:	08001c71 	.word	0x08001c71
 8001bcc:	08001c09 	.word	0x08001c09
 8001bd0:	08001c71 	.word	0x08001c71
 8001bd4:	08001c71 	.word	0x08001c71
 8001bd8:	08001c71 	.word	0x08001c71
 8001bdc:	08001c11 	.word	0x08001c11
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001be8:	0b5b      	lsrs	r3, r3, #13
 8001bea:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
      break;
 8001bfe:	e047      	b.n	8001c90 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a45      	ldr	r2, [pc, #276]	; (8001d18 <RCC_GetClocksFreq+0x1a4>)
 8001c04:	601a      	str	r2, [r3, #0]
      break;
 8001c06:	e043      	b.n	8001c90 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a44      	ldr	r2, [pc, #272]	; (8001d1c <RCC_GetClocksFreq+0x1a8>)
 8001c0c:	601a      	str	r2, [r3, #0]
      break;
 8001c0e:	e03f      	b.n	8001c90 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c18:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001c22:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <RCC_GetClocksFreq+0x1ac>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	0d9b      	lsrs	r3, r3, #22
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	4a33      	ldr	r2, [pc, #204]	; (8001d18 <RCC_GetClocksFreq+0x1a4>)
 8001c4c:	fb02 f203 	mul.w	r2, r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001c5a:	e019      	b.n	8001c90 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <RCC_GetClocksFreq+0x1a8>)
 8001c60:	fb02 f203 	mul.w	r2, r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	601a      	str	r2, [r3, #0]
      }
      break;
 8001c6e:	e00f      	b.n	8001c90 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c78:	0b5b      	lsrs	r3, r3, #13
 8001c7a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
      break;
 8001c8e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c98:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001ca0:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <RCC_GetClocksFreq+0x1b0>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	40da      	lsrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <RCC_GetClocksFreq+0x1b0>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	40da      	lsrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <RCC_GetClocksFreq+0x1a0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ce8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	0adb      	lsrs	r3, r3, #11
 8001cee:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <RCC_GetClocksFreq+0x1b0>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3724      	adds	r7, #36	; 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	20000000 	.word	0x20000000
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001d3a:	4909      	ldr	r1, [pc, #36]	; (8001d60 <RCC_AHBPeriphClockCmd+0x38>)
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <RCC_AHBPeriphClockCmd+0x38>)
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001d46:	e006      	b.n	8001d56 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001d48:	4905      	ldr	r1, [pc, #20]	; (8001d60 <RCC_AHBPeriphClockCmd+0x38>)
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <RCC_AHBPeriphClockCmd+0x38>)
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4013      	ands	r3, r2
 8001d54:	61cb      	str	r3, [r1, #28]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40023800 	.word	0x40023800

08001d64 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d76:	4909      	ldr	r1, [pc, #36]	; (8001d9c <RCC_APB2PeriphClockCmd+0x38>)
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <RCC_APB2PeriphClockCmd+0x38>)
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001d82:	e006      	b.n	8001d92 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d84:	4905      	ldr	r1, [pc, #20]	; (8001d9c <RCC_APB2PeriphClockCmd+0x38>)
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <RCC_APB2PeriphClockCmd+0x38>)
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	620b      	str	r3, [r1, #32]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40023800 	.word	0x40023800

08001da0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001db2:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8001db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001dbe:	e006      	b.n	8001dce <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001dc0:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8001dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40023800 	.word	0x40023800

08001ddc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001dee:	4909      	ldr	r1, [pc, #36]	; (8001e14 <RCC_APB1PeriphResetCmd+0x38>)
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <RCC_APB1PeriphResetCmd+0x38>)
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001dfa:	e006      	b.n	8001e0a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001dfc:	4905      	ldr	r1, [pc, #20]	; (8001e14 <RCC_APB1PeriphResetCmd+0x38>)
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <RCC_APB1PeriphResetCmd+0x38>)
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	618b      	str	r3, [r1, #24]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40023800 	.word	0x40023800

08001e18 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001e18:	b490      	push	{r4, r7}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460a      	mov	r2, r1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <SYSCFG_EXTILineConfig+0x80>)
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <SYSCFG_EXTILineConfig+0x80>)
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	1c83      	adds	r3, r0, #2
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <SYSCFG_EXTILineConfig+0x80>)
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461c      	mov	r4, r3
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <SYSCFG_EXTILineConfig+0x80>)
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e78:	79f9      	ldrb	r1, [r7, #7]
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	431a      	orrs	r2, r3
 8001e88:	1ca3      	adds	r3, r4, #2
 8001e8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc90      	pop	{r4, r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010000 	.word	0x40010000

08001e9c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_TimeBaseInit+0x34>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <TIM_TimeBaseInit+0x90>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_TimeBaseInit+0x34>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <TIM_TimeBaseInit+0x94>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_TimeBaseInit+0x34>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <TIM_TimeBaseInit+0x98>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	885a      	ldrh	r2, [r3, #2]
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <TIM_TimeBaseInit+0x9c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00c      	beq.n	8001f04 <TIM_TimeBaseInit+0x68>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <TIM_TimeBaseInit+0xa0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d008      	beq.n	8001f04 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	891a      	ldrh	r2, [r3, #8]
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	89fa      	ldrh	r2, [r7, #14]
 8001f08:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	829a      	strh	r2, [r3, #20]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40001000 	.word	0x40001000
 8001f3c:	40001400 	.word	0x40001400

08001f40 <TIM_SetCounter>:
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8001f96:	e007      	b.n	8001fa8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	801a      	strh	r2, [r3, #0]
  }
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001fd6:	e007      	b.n	8001fe8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	801a      	strh	r2, [r3, #0]
  }
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	81fb      	strh	r3, [r7, #14]
 8002002:	2300      	movs	r3, #0
 8002004:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8c1b      	ldrh	r3, [r3, #32]
 800200a:	b29b      	uxth	r3, r3
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8c1b      	ldrh	r3, [r3, #32]
 800201a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8b1b      	ldrh	r3, [r3, #24]
 8002020:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002028:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	4313      	orrs	r3, r2
 800203a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800203c:	89bb      	ldrh	r3, [r7, #12]
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	891a      	ldrh	r2, [r3, #8]
 8002048:	89bb      	ldrh	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	885a      	ldrh	r2, [r3, #2]
 8002052:	89bb      	ldrh	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	89fa      	ldrh	r2, [r7, #14]
 8002064:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	89ba      	ldrh	r2, [r7, #12]
 800206a:	841a      	strh	r2, [r3, #32]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8b1b      	ldrh	r3, [r3, #24]
 800208c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	f023 0308 	bic.w	r3, r3, #8
 8002094:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002096:	89fa      	ldrh	r2, [r7, #14]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4313      	orrs	r3, r2
 800209c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	89fa      	ldrh	r2, [r7, #14]
 80020a2:	831a      	strh	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	899b      	ldrh	r3, [r3, #12]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80020d6:	e009      	b.n	80020ec <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	899b      	ldrh	r3, [r3, #12]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	819a      	strh	r2, [r3, #12]
  }
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002108:	2300      	movs	r3, #0
 800210a:	81bb      	strh	r3, [r7, #12]
 800210c:	2300      	movs	r3, #0
 800210e:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8a1b      	ldrh	r3, [r3, #16]
 8002114:	b29a      	uxth	r2, r3
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	4013      	ands	r3, r2
 800211a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	899b      	ldrh	r3, [r3, #12]
 8002120:	b29a      	uxth	r2, r3
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	4013      	ands	r3, r2
 8002126:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002128:	89bb      	ldrh	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <TIM_GetITStatus+0x42>
 800212e:	897b      	ldrh	r3, [r7, #10]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	43db      	mvns	r3, r3
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	821a      	strh	r2, [r3, #16]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <Buttons_Init>:
#include <Buttons/Buttons.h>
void Buttons_Init(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002172:	2101      	movs	r1, #1
 8002174:	2004      	movs	r0, #4
 8002176:	f7ff fdd7 	bl	8001d28 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800217a:	2101      	movs	r1, #1
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff fdf1 	bl	8001d64 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_9;
 8002182:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002186:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002188:	2300      	movs	r3, #0
 800218a:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800218c:	2301      	movs	r3, #1
 800218e:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002194:	2303      	movs	r3, #3
 8002196:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	4830      	ldr	r0, [pc, #192]	; (8002260 <Buttons_Init+0xf4>)
 80021a0:	f7ff f96e 	bl	8001480 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 80021a4:	2106      	movs	r1, #6
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff fe36 	bl	8001e18 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
 80021ac:	2108      	movs	r1, #8
 80021ae:	2002      	movs	r0, #2
 80021b0:	f7ff fe32 	bl	8001e18 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
 80021b4:	2109      	movs	r1, #9
 80021b6:	2002      	movs	r0, #2
 80021b8:	f7ff fe2e 	bl	8001e18 <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line6;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80021c0:	2300      	movs	r3, #0
 80021c2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80021c4:	2310      	movs	r3, #16
 80021c6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f8b2 	bl	8001338 <EXTI_Init>

	EXTI_InitStructure.EXTI_Line = EXTI_Line8;
 80021d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d8:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff f8ab 	bl	8001338 <EXTI_Init>
	EXTI_InitStructure.EXTI_Line = EXTI_Line9;
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f8a4 	bl	8001338 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 80021f0:	2317      	movs	r3, #23
 80021f2:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe feb3 	bl	8000f70 <NVIC_Init>

	buttons[0] = !(GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6;
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <Buttons_Init+0xf4>)
 800220c:	8a1b      	ldrh	r3, [r3, #16]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <Buttons_Init+0xb0>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <Buttons_Init+0xb2>
 800221c:	2300      	movs	r3, #0
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <Buttons_Init+0xf8>)
 8002222:	701a      	strb	r2, [r3, #0]
	buttons[1] = !(GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8;
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <Buttons_Init+0xf4>)
 8002226:	8a1b      	ldrh	r3, [r3, #16]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <Buttons_Init+0xca>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <Buttons_Init+0xcc>
 8002236:	2300      	movs	r3, #0
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <Buttons_Init+0xf8>)
 800223c:	705a      	strb	r2, [r3, #1]
	buttons[2] = !(GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9;
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <Buttons_Init+0xf4>)
 8002240:	8a1b      	ldrh	r3, [r3, #16]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <Buttons_Init+0xe4>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <Buttons_Init+0xe6>
 8002250:	2300      	movs	r3, #0
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <Buttons_Init+0xf8>)
 8002256:	709a      	strb	r2, [r3, #2]
}
 8002258:	bf00      	nop
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40020800 	.word	0x40020800
 8002264:	200000d4 	.word	0x200000d4

08002268 <Buttons_Interrupt>:
void Buttons_Interrupt(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line6) != RESET) {
 800226c:	2040      	movs	r0, #64	; 0x40
 800226e:	f7ff f8d5 	bl	800141c <EXTI_GetITStatus>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00f      	beq.n	8002298 <Buttons_Interrupt+0x30>
		buttons[0] = !(GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6;
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <Buttons_Interrupt+0x94>)
 800227a:	8a1b      	ldrh	r3, [r3, #16]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <Buttons_Interrupt+0x22>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <Buttons_Interrupt+0x24>
 800228a:	2300      	movs	r3, #0
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <Buttons_Interrupt+0x98>)
 8002290:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 8002292:	2040      	movs	r0, #64	; 0x40
 8002294:	f7ff f8e6 	bl	8001464 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line8) != RESET) {
 8002298:	f44f 7080 	mov.w	r0, #256	; 0x100
 800229c:	f7ff f8be 	bl	800141c <EXTI_GetITStatus>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <Buttons_Interrupt+0x60>
		buttons[1] = !(GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <Buttons_Interrupt+0x94>)
 80022a8:	8a1b      	ldrh	r3, [r3, #16]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <Buttons_Interrupt+0x50>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <Buttons_Interrupt+0x52>
 80022b8:	2300      	movs	r3, #0
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <Buttons_Interrupt+0x98>)
 80022be:	705a      	strb	r2, [r3, #1]
		EXTI_ClearITPendingBit(EXTI_Line8);
 80022c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022c4:	f7ff f8ce 	bl	8001464 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line9) != RESET) {
 80022c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022cc:	f7ff f8a6 	bl	800141c <EXTI_GetITStatus>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <Buttons_Interrupt+0x90>
		buttons[2] = !(GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <Buttons_Interrupt+0x94>)
 80022d8:	8a1b      	ldrh	r3, [r3, #16]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <Buttons_Interrupt+0x80>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <Buttons_Interrupt+0x82>
 80022e8:	2300      	movs	r3, #0
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <Buttons_Interrupt+0x98>)
 80022ee:	709a      	strb	r2, [r3, #2]
		EXTI_ClearITPendingBit(EXTI_Line9);
 80022f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022f4:	f7ff f8b6 	bl	8001464 <EXTI_ClearITPendingBit>
	}
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40020800 	.word	0x40020800
 8002300:	200000d4 	.word	0x200000d4

08002304 <I2C2_initDMA>:
#include <I2CMasterLib/I2CMasterLib.h>

volatile static uint8_t readReg = 0;
volatile static uint32_t I2C_Rx_Buffer[5];

void I2C2_initDMA(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800230a:	2101      	movs	r1, #1
 800230c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002310:	f7ff fd0a 	bl	8001d28 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <I2C2_initDMA+0x84>)
 8002316:	f7fe fe8b 	bl	8001030 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <I2C2_initDMA+0x88>)
 800231c:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <I2C2_initDMA+0x8c>)
 8002320:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 8002334:	2302      	movs	r3, #2
 8002336:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	480e      	ldr	r0, [pc, #56]	; (8002388 <I2C2_initDMA+0x84>)
 800234e:	f7fe ff2b 	bl	80011a8 <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 8002352:	2201      	movs	r2, #1
 8002354:	2102      	movs	r1, #2
 8002356:	480c      	ldr	r0, [pc, #48]	; (8002388 <I2C2_initDMA+0x84>)
 8002358:	f7fe ff8e 	bl	8001278 <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 800235c:	230f      	movs	r3, #15
 800235e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800236e:	2301      	movs	r3, #1
 8002370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fdf9 	bl	8000f70 <NVIC_Init>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40026058 	.word	0x40026058
 800238c:	40005810 	.word	0x40005810
 8002390:	200000a8 	.word	0x200000a8

08002394 <I2C2_Init>:

void I2C2_Init(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800239a:	2101      	movs	r1, #1
 800239c:	2002      	movs	r0, #2
 800239e:	f7ff fcc3 	bl	8001d28 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 80023a2:	2101      	movs	r1, #1
 80023a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80023a8:	f7ff fcfa 	bl	8001da0 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 80023ac:	2204      	movs	r2, #4
 80023ae:	210a      	movs	r1, #10
 80023b0:	481e      	ldr	r0, [pc, #120]	; (800242c <I2C2_Init+0x98>)
 80023b2:	f7ff f8fb 	bl	80015ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 80023b6:	2204      	movs	r2, #4
 80023b8:	210b      	movs	r1, #11
 80023ba:	481c      	ldr	r0, [pc, #112]	; (800242c <I2C2_Init+0x98>)
 80023bc:	f7ff f8f6 	bl	80015ac <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 80023c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80023c6:	2302      	movs	r3, #2
 80023c8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80023d2:	2303      	movs	r3, #3
 80023d4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	4813      	ldr	r0, [pc, #76]	; (800242c <I2C2_Init+0x98>)
 80023de:	f7ff f84f 	bl	8001480 <GPIO_Init>

	I2C_DeInit(I2C2);
 80023e2:	4813      	ldr	r0, [pc, #76]	; (8002430 <I2C2_Init+0x9c>)
 80023e4:	f7ff f92a 	bl	800163c <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80023e8:	2300      	movs	r3, #0
 80023ea:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 80023ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f0:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80023f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fa:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80023fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002400:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <I2C2_Init+0xa0>)
 8002404:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 8002406:	463b      	mov	r3, r7
 8002408:	4619      	mov	r1, r3
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <I2C2_Init+0x9c>)
 800240c:	f7ff f93a 	bl	8001684 <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 8002410:	2101      	movs	r1, #1
 8002412:	4807      	ldr	r0, [pc, #28]	; (8002430 <I2C2_Init+0x9c>)
 8002414:	f7ff f9f8 	bl	8001808 <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 8002418:	2101      	movs	r1, #1
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <I2C2_Init+0x9c>)
 800241c:	f7ff fa54 	bl	80018c8 <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8002420:	f7ff ff70 	bl	8002304 <I2C2_initDMA>
}
 8002424:	bf00      	nop
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40020400 	.word	0x40020400
 8002430:	40005800 	.word	0x40005800
 8002434:	00061a80 	.word	0x00061a80

08002438 <I2C2_BytesWrite>:

void I2C2_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,
		uint8_t writeAddr) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6039      	str	r1, [r7, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	461a      	mov	r2, r3
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	460b      	mov	r3, r1
 800244a:	71bb      	strb	r3, [r7, #6]
 800244c:	4613      	mov	r3, r2
 800244e:	717b      	strb	r3, [r7, #5]
	uint16_t timeout_var = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	82fb      	strh	r3, [r7, #22]

	I2C_GenerateSTART(I2C2, ENABLE);
 8002454:	2101      	movs	r1, #1
 8002456:	4835      	ldr	r0, [pc, #212]	; (800252c <I2C2_BytesWrite+0xf4>)
 8002458:	f7ff f9f6 	bl	8001848 <I2C_GenerateSTART>

	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 800245c:	e009      	b.n	8002472 <I2C2_BytesWrite+0x3a>
		if (I2C_TIMEOUT < timeout_var++) {
 800245e:	8afb      	ldrh	r3, [r7, #22]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	82fa      	strh	r2, [r7, #22]
 8002464:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002468:	4293      	cmp	r3, r2
 800246a:	d902      	bls.n	8002472 <I2C2_BytesWrite+0x3a>
			I2C2_Init();
 800246c:	f7ff ff92 	bl	8002394 <I2C2_Init>
			return;
 8002470:	e059      	b.n	8002526 <I2C2_BytesWrite+0xee>
		uint8_t writeAddr) {
	uint16_t timeout_var = 0;

	I2C_GenerateSTART(I2C2, ENABLE);

	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 8002472:	492f      	ldr	r1, [pc, #188]	; (8002530 <I2C2_BytesWrite+0xf8>)
 8002474:	482d      	ldr	r0, [pc, #180]	; (800252c <I2C2_BytesWrite+0xf4>)
 8002476:	f7ff fad9 	bl	8001a2c <I2C_CheckEvent>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <I2C2_BytesWrite+0x26>
		if (I2C_TIMEOUT < timeout_var++) {
			I2C2_Init();
			return;
		}
	}
	timeout_var = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	82fb      	strh	r3, [r7, #22]

	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2200      	movs	r2, #0
 8002488:	4619      	mov	r1, r3
 800248a:	4828      	ldr	r0, [pc, #160]	; (800252c <I2C2_BytesWrite+0xf4>)
 800248c:	f7ff fa3c 	bl	8001908 <I2C_Send7bitAddress>

	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) {
 8002490:	e009      	b.n	80024a6 <I2C2_BytesWrite+0x6e>
		if (I2C_TIMEOUT < timeout_var++) {
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	82fa      	strh	r2, [r7, #22]
 8002498:	f24c 3250 	movw	r2, #50000	; 0xc350
 800249c:	4293      	cmp	r3, r2
 800249e:	d902      	bls.n	80024a6 <I2C2_BytesWrite+0x6e>
			I2C2_Init();
 80024a0:	f7ff ff78 	bl	8002394 <I2C2_Init>
			return;
 80024a4:	e03f      	b.n	8002526 <I2C2_BytesWrite+0xee>
	}
	timeout_var = 0;

	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);

	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) {
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <I2C2_BytesWrite+0xfc>)
 80024a8:	4820      	ldr	r0, [pc, #128]	; (800252c <I2C2_BytesWrite+0xf4>)
 80024aa:	f7ff fabf 	bl	8001a2c <I2C_CheckEvent>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <I2C2_BytesWrite+0x5a>
		if (I2C_TIMEOUT < timeout_var++) {
			I2C2_Init();
			return;
		}
	}
	timeout_var = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	82fb      	strh	r3, [r7, #22]

	I2C_SendData(I2C2, writeAddr);
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	4619      	mov	r1, r3
 80024bc:	481b      	ldr	r0, [pc, #108]	; (800252c <I2C2_BytesWrite+0xf4>)
 80024be:	f7ff fa41 	bl	8001944 <I2C_SendData>
	for (int i = 0; i < length; i++) {
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e014      	b.n	80024f2 <I2C2_BytesWrite+0xba>
		I2C_SendData(I2C2, pBuffer[i]);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4816      	ldr	r0, [pc, #88]	; (800252c <I2C2_BytesWrite+0xf4>)
 80024d4:	f7ff fa36 	bl	8001944 <I2C_SendData>
		for (int x = 0; x < 1000; x++)
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e002      	b.n	80024e4 <I2C2_BytesWrite+0xac>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ea:	dbf8      	blt.n	80024de <I2C2_BytesWrite+0xa6>
		}
	}
	timeout_var = 0;

	I2C_SendData(I2C2, writeAddr);
	for (int i = 0; i < length; i++) {
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3301      	adds	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	79ba      	ldrb	r2, [r7, #6]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dce6      	bgt.n	80024c8 <I2C2_BytesWrite+0x90>
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 80024fa:	e009      	b.n	8002510 <I2C2_BytesWrite+0xd8>
		if (I2C_TIMEOUT < timeout_var++) {
 80024fc:	8afb      	ldrh	r3, [r7, #22]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	82fa      	strh	r2, [r7, #22]
 8002502:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002506:	4293      	cmp	r3, r2
 8002508:	d902      	bls.n	8002510 <I2C2_BytesWrite+0xd8>
			I2C2_Init();
 800250a:	f7ff ff43 	bl	8002394 <I2C2_Init>
			return;
 800250e:	e00a      	b.n	8002526 <I2C2_BytesWrite+0xee>
	for (int i = 0; i < length; i++) {
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <I2C2_BytesWrite+0x100>)
 8002512:	4806      	ldr	r0, [pc, #24]	; (800252c <I2C2_BytesWrite+0xf4>)
 8002514:	f7ff fa8a 	bl	8001a2c <I2C_CheckEvent>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ee      	beq.n	80024fc <I2C2_BytesWrite+0xc4>
			I2C2_Init();
			return;
		}
	}

	I2C_GenerateSTOP(I2C2, ENABLE);
 800251e:	2101      	movs	r1, #1
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <I2C2_BytesWrite+0xf4>)
 8002522:	f7ff f9b1 	bl	8001888 <I2C_GenerateSTOP>

}
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40005800 	.word	0x40005800
 8002530:	00030001 	.word	0x00030001
 8002534:	00070082 	.word	0x00070082
 8002538:	00070084 	.word	0x00070084

0800253c <I2C2_DMA_Read>:

void I2C2_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,
		uint8_t numberBytesReceive) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	460b      	mov	r3, r1
 8002548:	71bb      	strb	r3, [r7, #6]
 800254a:	4613      	mov	r3, r2
 800254c:	717b      	strb	r3, [r7, #5]
	uint16_t timeout_var = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	81fb      	strh	r3, [r7, #14]
	while (readReg != 0 && timeout_var++ < DMA_TIMEOUT)
 8002552:	bf00      	nop
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <I2C2_DMA_Read+0x2e>
 800255e:	89fb      	ldrh	r3, [r7, #14]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	81fa      	strh	r2, [r7, #14]
 8002564:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002568:	d3f4      	bcc.n	8002554 <I2C2_DMA_Read+0x18>
		;
	timeout_var = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	81fb      	strh	r3, [r7, #14]
	readReg = readAddr;
 800256e:	4a62      	ldr	r2, [pc, #392]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	7013      	strb	r3, [r2, #0]

	/* Disable DMA channel*/
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8002574:	2100      	movs	r1, #0
 8002576:	4861      	ldr	r0, [pc, #388]	; (80026fc <I2C2_DMA_Read+0x1c0>)
 8002578:	f7fe fe54 	bl	8001224 <DMA_Cmd>

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);
 800257c:	797b      	ldrb	r3, [r7, #5]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	485e      	ldr	r0, [pc, #376]	; (80026fc <I2C2_DMA_Read+0x1c0>)
 8002584:	f7fe fe6a 	bl	800125c <DMA_SetCurrDataCounter>

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY)) {
 8002588:	e00c      	b.n	80025a4 <I2C2_DMA_Read+0x68>
		if (I2C_TIMEOUT < timeout_var++) {
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	81fa      	strh	r2, [r7, #14]
 8002590:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002594:	4293      	cmp	r3, r2
 8002596:	d905      	bls.n	80025a4 <I2C2_DMA_Read+0x68>
			I2C2_Init();
 8002598:	f7ff fefc 	bl	8002394 <I2C2_Init>
			readReg = 0;
 800259c:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
			return;
 80025a2:	e0a5      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>
	DMA_Cmd(DMA1_Channel5, DISABLE);

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY)) {
 80025a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80025a8:	4855      	ldr	r0, [pc, #340]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80025aa:	f7ff fa6f 	bl	8001a8c <I2C_GetFlagStatus>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ea      	bne.n	800258a <I2C2_DMA_Read+0x4e>
			I2C2_Init();
			readReg = 0;
			return;
		}
	}
	timeout_var = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	81fb      	strh	r3, [r7, #14]

	/* Enable DMA NACK automatic generation */
	I2C_DMALastTransferCmd(I2C2, ENABLE); //Note this one, very important
 80025b8:	2101      	movs	r1, #1
 80025ba:	4851      	ldr	r0, [pc, #324]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80025bc:	f7ff f9f2 	bl	80019a4 <I2C_DMALastTransferCmd>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);
 80025c0:	2101      	movs	r1, #1
 80025c2:	484f      	ldr	r0, [pc, #316]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80025c4:	f7ff f940 	bl	8001848 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 80025c8:	e00c      	b.n	80025e4 <I2C2_DMA_Read+0xa8>
		if (I2C_TIMEOUT < timeout_var++) {
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	81fa      	strh	r2, [r7, #14]
 80025d0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d905      	bls.n	80025e4 <I2C2_DMA_Read+0xa8>
			I2C2_Init();
 80025d8:	f7ff fedc 	bl	8002394 <I2C2_Init>
			readReg = 0;
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
			return;
 80025e2:	e085      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 80025e4:	4947      	ldr	r1, [pc, #284]	; (8002704 <I2C2_DMA_Read+0x1c8>)
 80025e6:	4846      	ldr	r0, [pc, #280]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80025e8:	f7ff fa20 	bl	8001a2c <I2C_CheckEvent>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0eb      	beq.n	80025ca <I2C2_DMA_Read+0x8e>
			I2C2_Init();
			readReg = 0;
			return;
		}
	}
	timeout_var = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	81fb      	strh	r3, [r7, #14]

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4840      	ldr	r0, [pc, #256]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80025fe:	f7ff f983 	bl	8001908 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 8002602:	e00c      	b.n	800261e <I2C2_DMA_Read+0xe2>
	I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) {
		if (I2C_TIMEOUT < timeout_var++) {
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	81fa      	strh	r2, [r7, #14]
 800260a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800260e:	4293      	cmp	r3, r2
 8002610:	d905      	bls.n	800261e <I2C2_DMA_Read+0xe2>
			I2C2_Init();
 8002612:	f7ff febf 	bl	8002394 <I2C2_Init>
			readReg = 0;
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
			return;
 800261c:	e068      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 800261e:	493a      	ldr	r1, [pc, #232]	; (8002708 <I2C2_DMA_Read+0x1cc>)
 8002620:	4837      	ldr	r0, [pc, #220]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 8002622:	f7ff fa03 	bl	8001a2c <I2C_CheckEvent>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0eb      	beq.n	8002604 <I2C2_DMA_Read+0xc8>
			readReg = 0;
			return;
		}
	}

	timeout_var = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	81fb      	strh	r3, [r7, #14]

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(I2C2, ENABLE);
 8002630:	2101      	movs	r1, #1
 8002632:	4833      	ldr	r0, [pc, #204]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 8002634:	f7ff f8e8 	bl	8001808 <I2C_Cmd>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);
 8002638:	79bb      	ldrb	r3, [r7, #6]
 800263a:	4619      	mov	r1, r3
 800263c:	4830      	ldr	r0, [pc, #192]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 800263e:	f7ff f981 	bl	8001944 <I2C_SendData>

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8002642:	e00c      	b.n	800265e <I2C2_DMA_Read+0x122>
		if (I2C_TIMEOUT < timeout_var++) {
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	81fa      	strh	r2, [r7, #14]
 800264a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800264e:	4293      	cmp	r3, r2
 8002650:	d905      	bls.n	800265e <I2C2_DMA_Read+0x122>
			I2C2_Init();
 8002652:	f7ff fe9f 	bl	8002394 <I2C2_Init>
			readReg = 0;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
			return;
 800265c:	e048      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 800265e:	492b      	ldr	r1, [pc, #172]	; (800270c <I2C2_DMA_Read+0x1d0>)
 8002660:	4827      	ldr	r0, [pc, #156]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 8002662:	f7ff f9e3 	bl	8001a2c <I2C_CheckEvent>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0eb      	beq.n	8002644 <I2C2_DMA_Read+0x108>
			I2C2_Init();
			readReg = 0;
			return;
		}
	}
	timeout_var = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	81fb      	strh	r3, [r7, #14]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);
 8002670:	2101      	movs	r1, #1
 8002672:	4823      	ldr	r0, [pc, #140]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 8002674:	f7ff f8e8 	bl	8001848 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 8002678:	e00c      	b.n	8002694 <I2C2_DMA_Read+0x158>
		if (I2C_TIMEOUT < timeout_var++) {
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	81fa      	strh	r2, [r7, #14]
 8002680:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002684:	4293      	cmp	r3, r2
 8002686:	d905      	bls.n	8002694 <I2C2_DMA_Read+0x158>
			I2C2_Init();
 8002688:	f7ff fe84 	bl	8002394 <I2C2_Init>
			readReg = 0;
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
			return;
 8002692:	e02d      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT)) {
 8002694:	491b      	ldr	r1, [pc, #108]	; (8002704 <I2C2_DMA_Read+0x1c8>)
 8002696:	481a      	ldr	r0, [pc, #104]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 8002698:	f7ff f9c8 	bl	8001a2c <I2C_CheckEvent>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0eb      	beq.n	800267a <I2C2_DMA_Read+0x13e>
			I2C2_Init();
			readReg = 0;
			return;
		}
	}
	timeout_var = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	81fb      	strh	r3, [r7, #14]

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4619      	mov	r1, r3
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80026ae:	f7ff f92b 	bl	8001908 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80026b2:	e00c      	b.n	80026ce <I2C2_DMA_Read+0x192>
		if (I2C_TIMEOUT < timeout_var++) {
 80026b4:	89fb      	ldrh	r3, [r7, #14]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	81fa      	strh	r2, [r7, #14]
 80026ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80026be:	4293      	cmp	r3, r2
 80026c0:	d905      	bls.n	80026ce <I2C2_DMA_Read+0x192>
			I2C2_Init();
 80026c2:	f7ff fe67 	bl	8002394 <I2C2_Init>
			readReg = 0;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <I2C2_DMA_Read+0x1bc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
			return;
 80026cc:	e010      	b.n	80026f0 <I2C2_DMA_Read+0x1b4>

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80026ce:	4910      	ldr	r1, [pc, #64]	; (8002710 <I2C2_DMA_Read+0x1d4>)
 80026d0:	480b      	ldr	r0, [pc, #44]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80026d2:	f7ff f9ab 	bl	8001a2c <I2C_CheckEvent>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0eb      	beq.n	80026b4 <I2C2_DMA_Read+0x178>
			I2C2_Init();
			readReg = 0;
			return;
		}
	}
	timeout_var = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	81fb      	strh	r3, [r7, #14]

	/* Start DMA to receive data from I2C */
	DMA_Cmd(DMA1_Channel5, ENABLE);
 80026e0:	2101      	movs	r1, #1
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <I2C2_DMA_Read+0x1c0>)
 80026e4:	f7fe fd9e 	bl	8001224 <DMA_Cmd>
	I2C_DMACmd(I2C2, ENABLE);
 80026e8:	2101      	movs	r1, #1
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <I2C2_DMA_Read+0x1c4>)
 80026ec:	f7ff f93a 	bl	8001964 <I2C_DMACmd>
}
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200000a4 	.word	0x200000a4
 80026fc:	40026058 	.word	0x40026058
 8002700:	40005800 	.word	0x40005800
 8002704:	00030001 	.word	0x00030001
 8002708:	00070082 	.word	0x00070082
 800270c:	00070084 	.word	0x00070084
 8002710:	00030002 	.word	0x00030002

08002714 <I2C2_DMA_Stop>:

void I2C2_DMA_Stop(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	DMA_ClearFlag(DMA1_FLAG_TC5);
 8002718:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800271c:	f7fe fdf2 	bl	8001304 <DMA_ClearFlag>
	I2C_DMACmd(I2C2, DISABLE);
 8002720:	2100      	movs	r1, #0
 8002722:	4807      	ldr	r0, [pc, #28]	; (8002740 <I2C2_DMA_Stop+0x2c>)
 8002724:	f7ff f91e 	bl	8001964 <I2C_DMACmd>
	I2C_GenerateSTOP(I2C2, ENABLE);
 8002728:	2101      	movs	r1, #1
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <I2C2_DMA_Stop+0x2c>)
 800272c:	f7ff f8ac 	bl	8001888 <I2C_GenerateSTOP>
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8002730:	2100      	movs	r1, #0
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <I2C2_DMA_Stop+0x30>)
 8002734:	f7fe fd76 	bl	8001224 <DMA_Cmd>
	I2C2_clearReadRegister();
 8002738:	f000 f806 	bl	8002748 <I2C2_clearReadRegister>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40005800 	.word	0x40005800
 8002744:	40026058 	.word	0x40026058

08002748 <I2C2_clearReadRegister>:
void I2C2_WriteRegister(uint8_t slaveAddr, uint8_t regAddr) {
	uint8_t tmp[1];
	I2C2_BytesWrite(slaveAddr, tmp, 0, regAddr);
}

void I2C2_clearReadRegister(){
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	readReg = 0;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <I2C2_clearReadRegister+0x14>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200000a4 	.word	0x200000a4

08002760 <I2C2_ReadRegister8>:

uint8_t I2C2_ReadRegister8(uint8_t slaveAddr, uint8_t regAddr) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	71fb      	strb	r3, [r7, #7]
 800276c:	4613      	mov	r3, r2
 800276e:	71bb      	strb	r3, [r7, #6]
	I2C2_DMA_Read(slaveAddr, regAddr, 1);
 8002770:	79b9      	ldrb	r1, [r7, #6]
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2201      	movs	r2, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fee0 	bl	800253c <I2C2_DMA_Read>
	uint16_t timeout = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	81fb      	strh	r3, [r7, #14]
	uint8_t wait = readReg;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <I2C2_ReadRegister8+0x68>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	737b      	strb	r3, [r7, #13]
	while (wait != 0){
 8002786:	e015      	b.n	80027b4 <I2C2_ReadRegister8+0x54>
		for(int i=0;i<10;i++);
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e002      	b.n	8002794 <I2C2_ReadRegister8+0x34>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b09      	cmp	r3, #9
 8002798:	ddf9      	ble.n	800278e <I2C2_ReadRegister8+0x2e>
		wait = readReg;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <I2C2_ReadRegister8+0x68>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	737b      	strb	r3, [r7, #13]
		if(timeout++ > DMA_TIMEOUT){
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	81fa      	strh	r2, [r7, #14]
 80027a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027aa:	d903      	bls.n	80027b4 <I2C2_ReadRegister8+0x54>
			I2C2_DMA_Stop();
 80027ac:	f7ff ffb2 	bl	8002714 <I2C2_DMA_Stop>
			return 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e005      	b.n	80027c0 <I2C2_ReadRegister8+0x60>

uint8_t I2C2_ReadRegister8(uint8_t slaveAddr, uint8_t regAddr) {
	I2C2_DMA_Read(slaveAddr, regAddr, 1);
	uint16_t timeout = 0;
	uint8_t wait = readReg;
	while (wait != 0){
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e6      	bne.n	8002788 <I2C2_ReadRegister8+0x28>
		if(timeout++ > DMA_TIMEOUT){
			I2C2_DMA_Stop();
			return 0;
		}
	}
	return I2C_Rx_Buffer[0];
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <I2C2_ReadRegister8+0x6c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b2db      	uxtb	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200000a4 	.word	0x200000a4
 80027cc:	200000a8 	.word	0x200000a8

080027d0 <I2C2_ReadRegister16>:

uint16_t I2C2_ReadRegister16(uint8_t slaveAddr, uint8_t regAddr) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	460a      	mov	r2, r1
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	4613      	mov	r3, r2
 80027de:	71bb      	strb	r3, [r7, #6]
	I2C2_DMA_Read(slaveAddr, regAddr, 2);
 80027e0:	79b9      	ldrb	r1, [r7, #6]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fea8 	bl	800253c <I2C2_DMA_Read>
	uint16_t timeout = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	81fb      	strh	r3, [r7, #14]
	uint8_t wait = readReg;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <I2C2_ReadRegister16+0x68>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	737b      	strb	r3, [r7, #13]
	while (wait != 0){
 80027f6:	e015      	b.n	8002824 <I2C2_ReadRegister16+0x54>
		for(int i=0;i<10;i++);
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e002      	b.n	8002804 <I2C2_ReadRegister16+0x34>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3301      	adds	r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b09      	cmp	r3, #9
 8002808:	ddf9      	ble.n	80027fe <I2C2_ReadRegister16+0x2e>
		wait = readReg;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <I2C2_ReadRegister16+0x68>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	737b      	strb	r3, [r7, #13]
		if(timeout++ > DMA_TIMEOUT){
 8002810:	89fb      	ldrh	r3, [r7, #14]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	81fa      	strh	r2, [r7, #14]
 8002816:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800281a:	d903      	bls.n	8002824 <I2C2_ReadRegister16+0x54>
			I2C2_DMA_Stop();
 800281c:	f7ff ff7a 	bl	8002714 <I2C2_DMA_Stop>
			return 0;
 8002820:	2300      	movs	r3, #0
 8002822:	e005      	b.n	8002830 <I2C2_ReadRegister16+0x60>

uint16_t I2C2_ReadRegister16(uint8_t slaveAddr, uint8_t regAddr) {
	I2C2_DMA_Read(slaveAddr, regAddr, 2);
	uint16_t timeout = 0;
	uint8_t wait = readReg;
	while (wait != 0){
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e6      	bne.n	80027f8 <I2C2_ReadRegister16+0x28>
		if(timeout++ > DMA_TIMEOUT){
			I2C2_DMA_Stop();
			return 0;
		}
	}
	return I2C_Rx_Buffer[0];
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <I2C2_ReadRegister16+0x6c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200000a4 	.word	0x200000a4
 800283c:	200000a8 	.word	0x200000a8

08002840 <I2C1_Init>:
#include <I2CSlaveLib/I2CSlaveLib.h>

void I2C1_Init(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002846:	2101      	movs	r1, #1
 8002848:	2002      	movs	r0, #2
 800284a:	f7ff fa6d 	bl	8001d28 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800284e:	2101      	movs	r1, #1
 8002850:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002854:	f7ff faa4 	bl	8001da0 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8002858:	2204      	movs	r2, #4
 800285a:	2108      	movs	r1, #8
 800285c:	4831      	ldr	r0, [pc, #196]	; (8002924 <I2C1_Init+0xe4>)
 800285e:	f7fe fea5 	bl	80015ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8002862:	2204      	movs	r2, #4
 8002864:	2109      	movs	r1, #9
 8002866:	482f      	ldr	r0, [pc, #188]	; (8002924 <I2C1_Init+0xe4>)
 8002868:	f7fe fea0 	bl	80015ac <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 800286c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002870:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002872:	2302      	movs	r3, #2
 8002874:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002876:	2301      	movs	r3, #1
 8002878:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800287e:	2303      	movs	r3, #3
 8002880:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002882:	f107 0318 	add.w	r3, r7, #24
 8002886:	4619      	mov	r1, r3
 8002888:	4826      	ldr	r0, [pc, #152]	; (8002924 <I2C1_Init+0xe4>)
 800288a:	f7fe fdf9 	bl	8001480 <GPIO_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
 800288e:	231f      	movs	r3, #31
 8002890:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fb65 	bl	8000f70 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;
 80028a6:	2320      	movs	r3, #32
 80028a8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fb59 	bl	8000f70 <NVIC_Init>

	I2C_DeInit(I2C1);
 80028be:	481a      	ldr	r0, [pc, #104]	; (8002928 <I2C1_Init+0xe8>)
 80028c0:	f7fe febc 	bl	800163c <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80028c4:	2300      	movs	r3, #0
 80028c6:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 80028c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028cc:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = slave_address<<1;
 80028ce:	2322      	movs	r3, #34	; 0x22
 80028d0:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80028d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d6:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80028d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028dc:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 100000;
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <I2C1_Init+0xec>)
 80028e0:	60bb      	str	r3, [r7, #8]

	I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE);
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e8:	480f      	ldr	r0, [pc, #60]	; (8002928 <I2C1_Init+0xe8>)
 80028ea:	f7ff f87b 	bl	80019e4 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <I2C1_Init+0xe8>)
 80028f6:	f7ff f875 	bl	80019e4 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_ERR, ENABLE);
 80028fa:	2201      	movs	r2, #1
 80028fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002900:	4809      	ldr	r0, [pc, #36]	; (8002928 <I2C1_Init+0xe8>)
 8002902:	f7ff f86f 	bl	80019e4 <I2C_ITConfig>

	I2C_Init(I2C1, &I2C_InitStructure);
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	4619      	mov	r1, r3
 800290c:	4806      	ldr	r0, [pc, #24]	; (8002928 <I2C1_Init+0xe8>)
 800290e:	f7fe feb9 	bl	8001684 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8002912:	2101      	movs	r1, #1
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <I2C1_Init+0xe8>)
 8002916:	f7fe ff77 	bl	8001808 <I2C_Cmd>

}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40020400 	.word	0x40020400
 8002928:	40005400 	.word	0x40005400
 800292c:	000186a0 	.word	0x000186a0

08002930 <getRoll>:
#include <IMU/IMU.h>

float getRoll(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	return ((float)((int16_t)I2C2_ReadRegister16(imuAddr, 1)))/10000;
 8002934:	2101      	movs	r1, #1
 8002936:	2022      	movs	r0, #34	; 0x22
 8002938:	f7ff ff4a 	bl	80027d0 <I2C2_ReadRegister16>
 800293c:	4603      	mov	r3, r0
 800293e:	b21b      	sxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe f971 	bl	8000c28 <__aeabi_i2f>
 8002946:	4603      	mov	r3, r0
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <getRoll+0x28>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fa74 	bl	8000e38 <__aeabi_fdiv>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	461c4000 	.word	0x461c4000

0800295c <getPitch>:
float getPitch(void){
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	return ((float)((int16_t)I2C2_ReadRegister16(imuAddr, 2)))/10000;
 8002960:	2102      	movs	r1, #2
 8002962:	2022      	movs	r0, #34	; 0x22
 8002964:	f7ff ff34 	bl	80027d0 <I2C2_ReadRegister16>
 8002968:	4603      	mov	r3, r0
 800296a:	b21b      	sxth	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f95b 	bl	8000c28 <__aeabi_i2f>
 8002972:	4603      	mov	r3, r0
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <getPitch+0x28>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa5e 	bl	8000e38 <__aeabi_fdiv>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	461c4000 	.word	0x461c4000

08002988 <getYaw>:
float getYaw(void){
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	return ((float)((uint16_t)I2C2_ReadRegister16(imuAddr, 3)))/10000;
 800298c:	2103      	movs	r1, #3
 800298e:	2022      	movs	r0, #34	; 0x22
 8002990:	f7ff ff1e 	bl	80027d0 <I2C2_ReadRegister16>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f942 	bl	8000c20 <__aeabi_ui2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4903      	ldr	r1, [pc, #12]	; (80029ac <getYaw+0x24>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fa49 	bl	8000e38 <__aeabi_fdiv>
 80029a6:	4603      	mov	r3, r0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	461c4000 	.word	0x461c4000

080029b0 <Leds_Init>:
#include <Leds/Leds.h>

void Leds_Init(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7ff f9b5 	bl	8001d28 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15
 80029be:	f24f 0306 	movw	r3, #61446	; 0xf006
 80029c2:	603b      	str	r3, [r7, #0]
			| GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80029c4:	2301      	movs	r3, #1
 80029c6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80029c8:	2300      	movs	r3, #0
 80029ca:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80029d0:	2303      	movs	r3, #3
 80029d2:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029d4:	463b      	mov	r3, r7
 80029d6:	4619      	mov	r1, r3
 80029d8:	480a      	ldr	r0, [pc, #40]	; (8002a04 <Leds_Init+0x54>)
 80029da:	f7fe fd51 	bl	8001480 <GPIO_Init>
	setLed(1, OFF, OFF);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 f810 	bl	8002a08 <setLed>
	setLed(2, OFF, OFF);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2002      	movs	r0, #2
 80029ee:	f000 f80b 	bl	8002a08 <setLed>
	setLed(3, OFF, OFF);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2003      	movs	r0, #3
 80029f8:	f000 f806 	bl	8002a08 <setLed>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40020400 	.word	0x40020400

08002a08 <setLed>:

void setLed(char index, uint8_t green, uint8_t red) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	460b      	mov	r3, r1
 8002a14:	71bb      	strb	r3, [r7, #6]
 8002a16:	4613      	mov	r3, r2
 8002a18:	717b      	strb	r3, [r7, #5]
	switch (index) {
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d01d      	beq.n	8002a5c <setLed+0x54>
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d032      	beq.n	8002a8a <setLed+0x82>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d000      	beq.n	8002a2a <setLed+0x22>
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
	}
}
 8002a28:	e046      	b.n	8002ab8 <setLed+0xb0>
}

void setLed(char index, uint8_t green, uint8_t red) {
	switch (index) {
	case 0:
		if (green == ON)
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d104      	bne.n	8002a3a <setLed+0x32>
			GPIOB->BSRRL = GPIO_Pin_14;
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <setLed+0xbc>)
 8002a32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a36:	831a      	strh	r2, [r3, #24]
 8002a38:	e003      	b.n	8002a42 <setLed+0x3a>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <setLed+0xbc>)
 8002a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a40:	835a      	strh	r2, [r3, #26]
		if (red == ON)
 8002a42:	797b      	ldrb	r3, [r7, #5]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d104      	bne.n	8002a52 <setLed+0x4a>
			GPIOB->BSRRL = GPIO_Pin_13;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <setLed+0xbc>)
 8002a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4e:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_13;
		break;
 8002a50:	e032      	b.n	8002ab8 <setLed+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
		if (red == ON)
			GPIOB->BSRRL = GPIO_Pin_13;
		else
			GPIOB->BSRRH = GPIO_Pin_13;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <setLed+0xbc>)
 8002a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a58:	835a      	strh	r2, [r3, #26]
		break;
 8002a5a:	e02d      	b.n	8002ab8 <setLed+0xb0>
	case 1:
		if (green == ON)
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d104      	bne.n	8002a6c <setLed+0x64>
			GPIOB->BSRRL = GPIO_Pin_15;
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <setLed+0xbc>)
 8002a64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a68:	831a      	strh	r2, [r3, #24]
 8002a6a:	e003      	b.n	8002a74 <setLed+0x6c>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <setLed+0xbc>)
 8002a6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a72:	835a      	strh	r2, [r3, #26]
		if (red == ON)
 8002a74:	797b      	ldrb	r3, [r7, #5]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d103      	bne.n	8002a82 <setLed+0x7a>
			GPIOB->BSRRL = GPIO_Pin_1;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <setLed+0xbc>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_1;
		break;
 8002a80:	e01a      	b.n	8002ab8 <setLed+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
		if (red == ON)
			GPIOB->BSRRL = GPIO_Pin_1;
		else
			GPIOB->BSRRH = GPIO_Pin_1;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <setLed+0xbc>)
 8002a84:	2202      	movs	r2, #2
 8002a86:	835a      	strh	r2, [r3, #26]
		break;
 8002a88:	e016      	b.n	8002ab8 <setLed+0xb0>
	case 2:
		if (green == ON)
 8002a8a:	79bb      	ldrb	r3, [r7, #6]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d103      	bne.n	8002a98 <setLed+0x90>
			GPIOB->BSRRL = GPIO_Pin_2;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <setLed+0xbc>)
 8002a92:	2204      	movs	r2, #4
 8002a94:	831a      	strh	r2, [r3, #24]
 8002a96:	e002      	b.n	8002a9e <setLed+0x96>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <setLed+0xbc>)
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	835a      	strh	r2, [r3, #26]
		if (red == ON)
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d104      	bne.n	8002aae <setLed+0xa6>
			GPIOB->BSRRL = GPIO_Pin_12;
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <setLed+0xbc>)
 8002aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aaa:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
 8002aac:	e003      	b.n	8002ab6 <setLed+0xae>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
		if (red == ON)
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <setLed+0xbc>)
 8002ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab4:	835a      	strh	r2, [r3, #26]
		break;
 8002ab6:	bf00      	nop
	}
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <_ZN5MotorC1Eh+0x3c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
	this->motorAddr = motorAddr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	81da      	strh	r2, [r3, #14]
}
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	08006170 	.word	0x08006170

08002b08 <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <_ZN5MotorD1Ev+0x24>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]

}
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <_ZN5MotorD1Ev+0x1a>
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f002 f972 	bl	8004e06 <_ZdlPv>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08006170 	.word	0x08006170

08002b30 <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

}
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ffe5 	bl	8002b08 <_ZN5MotorD1Ev>
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f002 f961 	bl	8004e06 <_ZdlPv>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <_ZN5Motor13setSpeedMotorEs>:
	tmp[0] = (toSend >> 8) & 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETDCURRENTREG);
	I2C2_WriteRegister(this->motorAddr, CALCCURRENTREG);
}
//------------------------------------------------------------------
void Motor::setSpeedMotor(int16_t mmPerSec) {
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
	int16_t speedRaw =
			((double)mmPerSec * (numberTicksOfWheel*periodSpeedRegulator) / (M_PI * wheelDiameter));
 8002b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fc5f 	bl	8000424 <__aeabi_i2d>
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <_ZN5Motor13setSpeedMotorEs+0x60>)
 8002b6c:	f7fd fcc0 	bl	80004f0 <__aeabi_dmul>
 8002b70:	4603      	mov	r3, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	4618      	mov	r0, r3
 8002b76:	4621      	mov	r1, r4
 8002b78:	a30b      	add	r3, pc, #44	; (adr r3, 8002ba8 <_ZN5Motor13setSpeedMotorEs+0x58>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fde1 	bl	8000744 <__aeabi_ddiv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	4618      	mov	r0, r3
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f7fd ff4b 	bl	8000a24 <__aeabi_d2iz>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	81fb      	strh	r3, [r7, #14]

	setSpeedRawMotor(speedRaw);
 8002b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f80b 	bl	8002bb4 <_ZN5Motor16setSpeedRawMotorEs>
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	dc9dce4c 	.word	0xdc9dce4c
 8002bac:	4070e2d4 	.word	0x4070e2d4
 8002bb0:	40280000 	.word	0x40280000

08002bb4 <_ZN5Motor16setSpeedRawMotorEs>:
void Motor::setAngleSpeedMotor(int16_t anglePerSec) {
	setSpeedRawMotor(
			(int16_t) (((double)anglePerSec * periodSpeedRegulator) * (numberTicksOfWheel / 360)));
}
//------------------------------------------------------------------
void Motor::setSpeedRawMotor(int16_t data) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	tmp[1] = data & 0xFF;
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	737b      	strb	r3, [r7, #13]
	tmp[0] = (data >> 8) & 0xFF;
 8002bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bca:	121b      	asrs	r3, r3, #8
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	733b      	strb	r3, [r7, #12]
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETSPEEDREG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7918      	ldrb	r0, [r3, #4]
 8002bd4:	f107 010c 	add.w	r1, r7, #12
 8002bd8:	2364      	movs	r3, #100	; 0x64
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f7ff fc2c 	bl	8002438 <I2C2_BytesWrite>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZN5Motor19DMADeltaTicksInvokeEv>:
	tmp[1] = data & 0xFF;
	tmp[0] = (data >> 8) & 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETPWMREG);
}
//------------------------------------------------------------------
void Motor::DMADeltaTicksInvoke(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	addDeltaTicks(I2C2_ReadRegister16(this->motorAddr, GETDELTATICKSREG));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fdea 	bl	80027d0 <I2C2_ReadRegister16>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f804 	bl	8002c10 <_ZN5Motor13addDeltaTicksEs>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
	setSpeedRaw(I2C2_ReadRegister16(this->motorAddr, GETSPEEDREG));
}
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <_ZN5Motor8getTicksEv>:
//------------------------------------------------------------------
long Motor::getTicks(void) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	return this->ticks;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <_ZN5Motor11getDistanceEv>:
//------------------------------------------------------------------
void Motor::setTicks(long ticks){
	this->ticks = ticks;
}
//------------------------------------------------------------------
double Motor::getDistance(void) {
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	return (double) getTicks() * ((wheelDiameter * M_PI) / (numberTicksOfWheel));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffeb 	bl	8002c34 <_ZN5Motor8getTicksEv>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fbdf 	bl	8000424 <__aeabi_i2d>
 8002c66:	a306      	add	r3, pc, #24	; (adr r3, 8002c80 <_ZN5Motor11getDistanceEv+0x30>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fc40 	bl	80004f0 <__aeabi_dmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	4621      	mov	r1, r4
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2f974273 	.word	0x2f974273
 8002c84:	40020305 	.word	0x40020305

08002c88 <_ZN5Motor8isTestOkEv>:
//------------------------------------------------------------------
uint16_t Motor::getCurrent(void) {
	return this->current;
}
//------------------------------------------------------------------
bool Motor::isTestOk(void) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	uint8_t addr = I2C2_ReadRegister8(this->motorAddr, GETWHO_I_AM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	216f      	movs	r1, #111	; 0x6f
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fd62 	bl	8002760 <I2C2_ReadRegister8>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
	return addr == (this->motorAddr>>1);
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	105b      	asrs	r3, r3, #1
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop

08002cbc <InitializePWMServo>:
#include <Servomotor/Servomotor.h>
void InitializePWMServo(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f7ff f86b 	bl	8001da0 <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7ff f82b 	bl	8001d28 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002cd2:	2340      	movs	r3, #64	; 0x40
 8002cd4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	4619      	mov	r1, r3
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <InitializePWMServo+0x7c>)
 8002cee:	f7fe fbc7 	bl	8001480 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	2106      	movs	r1, #6
 8002cf6:	4810      	ldr	r0, [pc, #64]	; (8002d38 <InitializePWMServo+0x7c>)
 8002cf8:	f7fe fc58 	bl	80015ac <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 50 hz
	timerInitStructure.TIM_Prescaler = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d00:	2300      	movs	r3, #0
 8002d02:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 41999;
 8002d04:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002d08:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	480a      	ldr	r0, [pc, #40]	; (8002d3c <InitializePWMServo+0x80>)
 8002d14:	f7ff f8c2 	bl	8001e9c <TIM_TimeBaseInit>

	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4808      	ldr	r0, [pc, #32]	; (8002d3c <InitializePWMServo+0x80>)
 8002d1c:	f7ff f92a 	bl	8001f74 <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM3, ENABLE);
 8002d20:	2101      	movs	r1, #1
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <InitializePWMServo+0x80>)
 8002d24:	f7ff f946 	bl	8001fb4 <TIM_Cmd>

	setServo(90);
 8002d28:	205a      	movs	r0, #90	; 0x5a
 8002d2a:	f000 f809 	bl	8002d40 <setServo>
}
 8002d2e:	bf00      	nop
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40000400 	.word	0x40000400

08002d40 <setServo>:

	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
}

void setServo(int16_t angle) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
	if (angle < 0)
 8002d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da02      	bge.n	8002d58 <setServo+0x18>
		angle = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	80fb      	strh	r3, [r7, #6]
 8002d56:	e005      	b.n	8002d64 <setServo+0x24>
	else if (angle > 180)
 8002d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5c:	2bb4      	cmp	r3, #180	; 0xb4
 8002d5e:	dd01      	ble.n	8002d64 <setServo+0x24>
		angle = 180;
 8002d60:	23b4      	movs	r3, #180	; 0xb4
 8002d62:	80fb      	strh	r3, [r7, #6]
	uint32_t value = ((SERVO_MAX - SERVO_MIN) / 180) * (double)angle + SERVO_MIN;
 8002d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fb5b 	bl	8000424 <__aeabi_i2d>
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <setServo+0x90>)
 8002d74:	f7fd fbbc 	bl	80004f0 <__aeabi_dmul>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4621      	mov	r1, r4
 8002d80:	a311      	add	r3, pc, #68	; (adr r3, 8002dc8 <setServo+0x88>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fa01 	bl	800018c <__adddf3>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4621      	mov	r1, r4
 8002d92:	f7fd fe6f 	bl	8000a74 <__aeabi_d2uiz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	617b      	str	r3, [r7, #20]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002d9a:	2360      	movs	r3, #96	; 0x60
 8002d9c:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_Pulse = value;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002da6:	2300      	movs	r3, #0
 8002da8:	823b      	strh	r3, [r7, #16]

	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4619      	mov	r1, r3
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <setServo+0x94>)
 8002db2:	f7ff f91f 	bl	8001ff4 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002db6:	2108      	movs	r1, #8
 8002db8:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <setServo+0x94>)
 8002dba:	f7ff f95d 	bl	8002078 <TIM_OC1PreloadConfig>
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	40977000 	.word	0x40977000
 8002dd0:	40330000 	.word	0x40330000
 8002dd4:	40000400 	.word	0x40000400

08002dd8 <Ultrasonic_init>:
#include <Ultrasonic/Ultrasonic.h>

volatile int chooseUlt = -1;
volatile uint16_t ultRawValue[NUMBER_OF_ULTS];

void Ultrasonic_init(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002dde:	2101      	movs	r1, #1
 8002de0:	2004      	movs	r0, #4
 8002de2:	f7fe ffa1 	bl	8001d28 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002de6:	2101      	movs	r1, #1
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7fe ffbb 	bl	8001d64 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002df2:	2301      	movs	r3, #1
 8002df4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002df6:	2300      	movs	r3, #0
 8002df8:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e02:	f107 0318 	add.w	r3, r7, #24
 8002e06:	4619      	mov	r1, r3
 8002e08:	482e      	ldr	r0, [pc, #184]	; (8002ec4 <Ultrasonic_init+0xec>)
 8002e0a:	f7fe fb39 	bl	8001480 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002e12:	2300      	movs	r3, #0
 8002e14:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	4619      	mov	r1, r3
 8002e28:	4826      	ldr	r0, [pc, #152]	; (8002ec4 <Ultrasonic_init+0xec>)
 8002e2a:	f7fe fb29 	bl	8001480 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f7fe fff1 	bl	8001e18 <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8002e36:	2302      	movs	r3, #2
 8002e38:	60fb      	str	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	743b      	strb	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002e3e:	2310      	movs	r3, #16
 8002e40:	747b      	strb	r3, [r7, #17]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	74bb      	strb	r3, [r7, #18]
	EXTI_Init(&EXTI_InitStructure);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fa74 	bl	8001338 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8002e50:	2307      	movs	r3, #7
 8002e52:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f883 	bl	8000f70 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2004      	movs	r0, #4
 8002e6e:	f7fe ff97 	bl	8001da0 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //timer clock 10000khz
	timerInitStructure.TIM_Prescaler = 1 ; // 2000khz/2 = 1000khz = kazdu 1 us
 8002e72:	2301      	movs	r3, #1
 8002e74:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002e76:	2300      	movs	r3, #0
 8002e78:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 30000; // po 30 ms si povie ze to uz je maximum
 8002e7a:	f247 5330 	movw	r3, #30000	; 0x7530
 8002e7e:	607b      	str	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002e80:	2300      	movs	r3, #0
 8002e82:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM4, &timerInitStructure);
 8002e84:	463b      	mov	r3, r7
 8002e86:	4619      	mov	r1, r3
 8002e88:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <Ultrasonic_init+0xf0>)
 8002e8a:	f7ff f807 	bl	8001e9c <TIM_TimeBaseInit>
	TIM_Cmd(TIM4, ENABLE);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <Ultrasonic_init+0xf0>)
 8002e92:	f7ff f88f 	bl	8001fb4 <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8002e96:	2201      	movs	r2, #1
 8002e98:	2101      	movs	r1, #1
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <Ultrasonic_init+0xf0>)
 8002e9c:	f7ff f908 	bl	80020b0 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8002ea0:	231e      	movs	r3, #30
 8002ea2:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f85b 	bl	8000f70 <NVIC_Init>

}
 8002eba:	bf00      	nop
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40000800 	.word	0x40000800

08002ecc <ultTriger>:

void ultTriger(int index) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	if (chooseUlt == -1) {
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <ultTriger+0x50>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d11a      	bne.n	8002f14 <ultTriger+0x48>
		switch (index) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d000      	beq.n	8002ee6 <ultTriger+0x1a>
				; //cca 15 us
			GPIOC->BSRRH = GPIO_Pin_0;
			break;
		}
	}
}
 8002ee4:	e016      	b.n	8002f14 <ultTriger+0x48>

void ultTriger(int index) {
	if (chooseUlt == -1) {
		switch (index) {
		case 0:
			TIM_SetCounter(TIM4, 0);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	480d      	ldr	r0, [pc, #52]	; (8002f20 <ultTriger+0x54>)
 8002eea:	f7ff f829 	bl	8001f40 <TIM_SetCounter>
			chooseUlt = index;
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <ultTriger+0x50>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6013      	str	r3, [r2, #0]
			GPIOC->BSRRL = GPIO_Pin_0;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <ultTriger+0x58>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	831a      	strh	r2, [r3, #24]
			for (int i = 0; i < 2; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e002      	b.n	8002f06 <ultTriger+0x3a>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	ddf9      	ble.n	8002f00 <ultTriger+0x34>
				; //cca 15 us
			GPIOC->BSRRH = GPIO_Pin_0;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <ultTriger+0x58>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	835a      	strh	r2, [r3, #26]
			break;
 8002f12:	bf00      	nop
		}
	}
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000001c 	.word	0x2000001c
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40020800 	.word	0x40020800

08002f28 <getUltRaw>:

double getUltCm(int index) {
	return ((double) ultRawValue[index]) / 58;
}

uint16_t getUltRaw(int index){
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	return ultRawValue[index];
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <getUltRaw+0x1c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f38:	b29b      	uxth	r3, r3
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000194 	.word	0x20000194

08002f48 <Ultrasonic_Pin_Interrupt>:

void Ultrasonic_Pin_Interrupt(void) {
 8002f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f4c:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8002f4e:	2002      	movs	r0, #2
 8002f50:	f7fe fa64 	bl	800141c <EXTI_GetITStatus>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d051      	beq.n	8002ffe <Ultrasonic_Pin_Interrupt+0xb6>
		if ((GPIOC->IDR & GPIO_Pin_1) && GPIO_Pin_1) {
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <Ultrasonic_Pin_Interrupt+0xc8>)
 8002f5c:	8a1b      	ldrh	r3, [r3, #16]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <Ultrasonic_Pin_Interrupt+0x2a>
			TIM_SetCounter(TIM4, 0);
 8002f68:	2100      	movs	r1, #0
 8002f6a:	482a      	ldr	r0, [pc, #168]	; (8003014 <Ultrasonic_Pin_Interrupt+0xcc>)
 8002f6c:	f7fe ffe8 	bl	8001f40 <TIM_SetCounter>
 8002f70:	e042      	b.n	8002ff8 <Ultrasonic_Pin_Interrupt+0xb0>
		} else {
			ultRawValue[chooseUlt] = (uint32_t)((double)ultRawValue[chooseUlt] - (LPF_Beta * ((double)ultRawValue[chooseUlt] - (double)TIM_GetCounter(TIM4))));
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <Ultrasonic_Pin_Interrupt+0xd0>)
 8002f74:	681c      	ldr	r4, [r3, #0]
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <Ultrasonic_Pin_Interrupt+0xd0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a28      	ldr	r2, [pc, #160]	; (800301c <Ultrasonic_Pin_Interrupt+0xd4>)
 8002f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fa3e 	bl	8000404 <__aeabi_ui2d>
 8002f88:	4605      	mov	r5, r0
 8002f8a:	460e      	mov	r6, r1
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <Ultrasonic_Pin_Interrupt+0xd0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <Ultrasonic_Pin_Interrupt+0xd4>)
 8002f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa33 	bl	8000404 <__aeabi_ui2d>
 8002f9e:	4680      	mov	r8, r0
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	481c      	ldr	r0, [pc, #112]	; (8003014 <Ultrasonic_Pin_Interrupt+0xcc>)
 8002fa4:	f7fe ffda 	bl	8001f5c <TIM_GetCounter>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fa2a 	bl	8000404 <__aeabi_ui2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd f8e6 	bl	8000188 <__aeabi_dsub>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	a310      	add	r3, pc, #64	; (adr r3, 8003008 <Ultrasonic_Pin_Interrupt+0xc0>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd fa91 	bl	80004f0 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	4631      	mov	r1, r6
 8002fd6:	f7fd f8d7 	bl	8000188 <__aeabi_dsub>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fd fd47 	bl	8000a74 <__aeabi_d2uiz>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <Ultrasonic_Pin_Interrupt+0xd4>)
 8002fec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			//ultRawValue[chooseUlt] = TIM_GetCounter(TIM4);
			chooseUlt = -2;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <Ultrasonic_Pin_Interrupt+0xd0>)
 8002ff2:	f06f 0201 	mvn.w	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line1);
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f7fe fa33 	bl	8001464 <EXTI_ClearITPendingBit>
	}
}
 8002ffe:	bf00      	nop
 8003000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003004:	f3af 8000 	nop.w
 8003008:	66666666 	.word	0x66666666
 800300c:	3fe66666 	.word	0x3fe66666
 8003010:	40020800 	.word	0x40020800
 8003014:	40000800 	.word	0x40000800
 8003018:	2000001c 	.word	0x2000001c
 800301c:	20000194 	.word	0x20000194

08003020 <Ultrasonic_Timer_Update_Interrupt>:

void Ultrasonic_Timer_Update_Interrupt(void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
 8003024:	2101      	movs	r1, #1
 8003026:	4812      	ldr	r0, [pc, #72]	; (8003070 <Ultrasonic_Timer_Update_Interrupt+0x50>)
 8003028:	f7ff f866 	bl	80020f8 <TIM_GetITStatus>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01b      	beq.n	800306a <Ultrasonic_Timer_Update_Interrupt+0x4a>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003032:	2101      	movs	r1, #1
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <Ultrasonic_Timer_Update_Interrupt+0x50>)
 8003036:	f7ff f889 	bl	800214c <TIM_ClearITPendingBit>
		if (chooseUlt >= 0) {
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <Ultrasonic_Timer_Update_Interrupt+0x54>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <Ultrasonic_Timer_Update_Interrupt+0x3a>
			ultRawValue[chooseUlt] = 60000;
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <Ultrasonic_Timer_Update_Interrupt+0x54>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <Ultrasonic_Timer_Update_Interrupt+0x58>)
 8003048:	f64e 2160 	movw	r1, #60000	; 0xea60
 800304c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			chooseUlt = -1;
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <Ultrasonic_Timer_Update_Interrupt+0x54>)
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	601a      	str	r2, [r3, #0]
		}
		else if(chooseUlt < 0)
			chooseUlt = -1;
	}
}
 8003058:	e007      	b.n	800306a <Ultrasonic_Timer_Update_Interrupt+0x4a>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		if (chooseUlt >= 0) {
			ultRawValue[chooseUlt] = 60000;
			chooseUlt = -1;
		}
		else if(chooseUlt < 0)
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <Ultrasonic_Timer_Update_Interrupt+0x54>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	da03      	bge.n	800306a <Ultrasonic_Timer_Update_Interrupt+0x4a>
			chooseUlt = -1;
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <Ultrasonic_Timer_Update_Interrupt+0x54>)
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	601a      	str	r2, [r3, #0]
	}
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40000800 	.word	0x40000800
 8003074:	2000001c 	.word	0x2000001c
 8003078:	20000194 	.word	0x20000194

0800307c <_Z8getMotori>:
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);

Motor *getMotor(int i) {
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	switch (i) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	2b05      	cmp	r3, #5
 800308a:	d821      	bhi.n	80030d0 <_Z8getMotori+0x54>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <_Z8getMotori+0x18>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030ad 	.word	0x080030ad
 8003098:	080030b3 	.word	0x080030b3
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	080030bf 	.word	0x080030bf
 80030a4:	080030c5 	.word	0x080030c5
 80030a8:	080030cb 	.word	0x080030cb
	case 1:
		return motor1;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <_Z8getMotori+0x60>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e00f      	b.n	80030d2 <_Z8getMotori+0x56>
	case 2:
		return motor2;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <_Z8getMotori+0x64>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e00c      	b.n	80030d2 <_Z8getMotori+0x56>
	case 3:
		return motor3;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <_Z8getMotori+0x68>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e009      	b.n	80030d2 <_Z8getMotori+0x56>
	case 4:
		return motor4;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <_Z8getMotori+0x6c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	e006      	b.n	80030d2 <_Z8getMotori+0x56>
	case 5:
		return motor5;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <_Z8getMotori+0x70>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	e003      	b.n	80030d2 <_Z8getMotori+0x56>
	case 6:
		return motor6;
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <_Z8getMotori+0x74>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e000      	b.n	80030d2 <_Z8getMotori+0x56>
	default:
		return NULL;
 80030d0:	2300      	movs	r3, #0
	}
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	200000bc 	.word	0x200000bc
 80030e0:	200000c0 	.word	0x200000c0
 80030e4:	200000c4 	.word	0x200000c4
 80030e8:	200000c8 	.word	0x200000c8
 80030ec:	200000cc 	.word	0x200000cc
 80030f0:	200000d0 	.word	0x200000d0

080030f4 <_Z15InitializeTimerv>:

volatile bool obnov = true;
volatile Direction dir = STOP;
volatile int16_t mmPerSec = 0;

void InitializeTimer(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80030fa:	2101      	movs	r1, #1
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7fe fe4f 	bl	8001da0 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //opakovat kazdych 0.025 s = 40 hz
	timerInitStructure.TIM_Prescaler = 49999;	//1Mhz/50000 = 20 hz
 8003102:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8003106:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003108:	2300      	movs	r3, #0
 800310a:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 5;
 800310c:	2305      	movs	r3, #5
 800310e:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003110:	2300      	movs	r3, #0
 8003112:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800311c:	f7fe febe 	bl	8001e9c <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8003120:	2101      	movs	r1, #1
 8003122:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003126:	f7fe ff45 	bl	8001fb4 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800312a:	2201      	movs	r2, #1
 800312c:	2101      	movs	r1, #1
 800312e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003132:	f7fe ffbd 	bl	80020b0 <TIM_ITConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003136:	231c      	movs	r3, #28
 8003138:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003142:	2301      	movs	r3, #1
 8003144:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8003146:	463b      	mov	r3, r7
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd ff11 	bl	8000f70 <NVIC_Init>
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop

08003158 <_Z6speedLs>:

void speedL(int16_t mmPerSec) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
	getMotor(1)->setSpeedMotor(mmPerSec);
 8003162:	2001      	movs	r0, #1
 8003164:	f7ff ff8a 	bl	800307c <_Z8getMotori>
 8003168:	4602      	mov	r2, r0
 800316a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7ff fced 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
	getMotor(2)->setSpeedMotor(mmPerSec);
 8003176:	2002      	movs	r0, #2
 8003178:	f7ff ff80 	bl	800307c <_Z8getMotori>
 800317c:	4602      	mov	r2, r0
 800317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7ff fce3 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
	getMotor(3)->setSpeedMotor(mmPerSec);
 800318a:	2003      	movs	r0, #3
 800318c:	f7ff ff76 	bl	800307c <_Z8getMotori>
 8003190:	4602      	mov	r2, r0
 8003192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f7ff fcd9 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <_Z6speedRs>:

void speedR(int16_t mmPerSec) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
	getMotor(4)->setSpeedMotor(mmPerSec);
 80031b2:	2004      	movs	r0, #4
 80031b4:	f7ff ff62 	bl	800307c <_Z8getMotori>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7ff fcc5 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
	getMotor(5)->setSpeedMotor(mmPerSec);
 80031c6:	2005      	movs	r0, #5
 80031c8:	f7ff ff58 	bl	800307c <_Z8getMotori>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7ff fcbb 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
	getMotor(6)->setSpeedMotor(mmPerSec);
 80031da:	2006      	movs	r0, #6
 80031dc:	f7ff ff4e 	bl	800307c <_Z8getMotori>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff fcb1 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <_Z11goDirection9Directions>:

void goDirection(Direction dir, int16_t mmPerSec) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	460a      	mov	r2, r1
 8003202:	71fb      	strb	r3, [r7, #7]
 8003204:	4613      	mov	r3, r2
 8003206:	80bb      	strh	r3, [r7, #4]
	switch (dir) {
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d847      	bhi.n	800329e <_Z11goDirection9Directions+0xa6>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <_Z11goDirection9Directions+0x1c>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003229 	.word	0x08003229
 8003218:	0800323f 	.word	0x0800323f
 800321c:	0800325d 	.word	0x0800325d
 8003220:	08003277 	.word	0x08003277
 8003224:	08003291 	.word	0x08003291
	case FORWARD:
		speedL(mmPerSec);
 8003228:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff93 	bl	8003158 <_Z6speedLs>
		speedR(mmPerSec);
 8003232:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ffb6 	bl	80031a8 <_Z6speedRs>
		break;
 800323c:	e02f      	b.n	800329e <_Z11goDirection9Directions+0xa6>
	case BACKWARD:
		speedL(-mmPerSec);
 800323e:	88bb      	ldrh	r3, [r7, #4]
 8003240:	425b      	negs	r3, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	b21b      	sxth	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff86 	bl	8003158 <_Z6speedLs>
		speedR(-mmPerSec);
 800324c:	88bb      	ldrh	r3, [r7, #4]
 800324e:	425b      	negs	r3, r3
 8003250:	b29b      	uxth	r3, r3
 8003252:	b21b      	sxth	r3, r3
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ffa7 	bl	80031a8 <_Z6speedRs>
		break;
 800325a:	e020      	b.n	800329e <_Z11goDirection9Directions+0xa6>
	case ROTATE_CLOCKWISE:
		speedL(mmPerSec);
 800325c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff79 	bl	8003158 <_Z6speedLs>
		speedR(-mmPerSec);
 8003266:	88bb      	ldrh	r3, [r7, #4]
 8003268:	425b      	negs	r3, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	b21b      	sxth	r3, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff9a 	bl	80031a8 <_Z6speedRs>
		break;
 8003274:	e013      	b.n	800329e <_Z11goDirection9Directions+0xa6>
	case ROTATE_ANTICLOCKWISE:
		speedL(-mmPerSec);
 8003276:	88bb      	ldrh	r3, [r7, #4]
 8003278:	425b      	negs	r3, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	b21b      	sxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff6a 	bl	8003158 <_Z6speedLs>
		speedR(mmPerSec);
 8003284:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff8d 	bl	80031a8 <_Z6speedRs>
		break;
 800328e:	e006      	b.n	800329e <_Z11goDirection9Directions+0xa6>
	case STOP:
		speedL(0);
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff ff61 	bl	8003158 <_Z6speedLs>
		speedR(0);
 8003296:	2000      	movs	r0, #0
 8003298:	f7ff ff86 	bl	80031a8 <_Z6speedRs>
		break;
 800329c:	bf00      	nop
	}
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop

080032a8 <_Z26getAverageOfSimilaryValuesddd>:

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b08b      	sub	sp, #44	; 0x2c
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032b2:	e9c7 2300 	strd	r2, r3, [r7]
	double diff1 = fabs(val1 - val2);
 80032b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032be:	f7fc ff63 	bl	8000188 <__aeabi_dsub>
 80032c2:	4603      	mov	r3, r0
 80032c4:	460c      	mov	r4, r1
 80032c6:	461a      	mov	r2, r3
 80032c8:	623a      	str	r2, [r7, #32]
 80032ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
	double diff2 = fabs(val2 - val3);
 80032d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d8:	f7fc ff56 	bl	8000188 <__aeabi_dsub>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	461a      	mov	r2, r3
 80032e2:	61ba      	str	r2, [r7, #24]
 80032e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80032e8:	61fb      	str	r3, [r7, #28]
	double diff3 = fabs(val1 - val3);
 80032ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032f2:	f7fc ff49 	bl	8000188 <__aeabi_dsub>
 80032f6:	4603      	mov	r3, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	613a      	str	r2, [r7, #16]
 80032fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003302:	617b      	str	r3, [r7, #20]
	if (diff1 < diff2 && diff1 < diff3) {
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800330c:	f7fd fb62 	bl	80009d4 <__aeabi_dcmplt>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01b      	beq.n	800334e <_Z26getAverageOfSimilaryValuesddd+0xa6>
 8003316:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800331a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800331e:	f7fd fb59 	bl	80009d4 <__aeabi_dcmplt>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d012      	beq.n	800334e <_Z26getAverageOfSimilaryValuesddd+0xa6>
		return (val1 + val2) / 2;
 8003328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003330:	f7fc ff2c 	bl	800018c <__adddf3>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4618      	mov	r0, r3
 800333a:	4621      	mov	r1, r4
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003344:	f7fd f9fe 	bl	8000744 <__aeabi_ddiv>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	e036      	b.n	80033bc <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else if (diff2 < diff1 && diff2 < diff3) {
 800334e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003356:	f7fd fb3d 	bl	80009d4 <__aeabi_dcmplt>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <_Z26getAverageOfSimilaryValuesddd+0xf0>
 8003360:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003364:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003368:	f7fd fb34 	bl	80009d4 <__aeabi_dcmplt>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d012      	beq.n	8003398 <_Z26getAverageOfSimilaryValuesddd+0xf0>
		return (val2 + val3) / 2;
 8003372:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800337a:	f7fc ff07 	bl	800018c <__adddf3>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	4618      	mov	r0, r3
 8003384:	4621      	mov	r1, r4
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800338e:	f7fd f9d9 	bl	8000744 <__aeabi_ddiv>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	e011      	b.n	80033bc <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else
		return (val1 + val3) / 2;
 8003398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800339c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a0:	f7fc fef4 	bl	800018c <__adddf3>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4618      	mov	r0, r3
 80033aa:	4621      	mov	r1, r4
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b4:	f7fd f9c6 	bl	8000744 <__aeabi_ddiv>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
}
 80033bc:	4618      	mov	r0, r3
 80033be:	4621      	mov	r1, r4
 80033c0:	372c      	adds	r7, #44	; 0x2c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	bf00      	nop

080033c8 <EXTI1_IRQHandler>:

extern "C" void EXTI1_IRQHandler(void) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	Ultrasonic_Pin_Interrupt();
 80033cc:	f7ff fdbc 	bl	8002f48 <Ultrasonic_Pin_Interrupt>
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <TIM4_IRQHandler>:

extern "C" void TIM4_IRQHandler(void) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
	Ultrasonic_Timer_Update_Interrupt();
 80033d8:	f7ff fe22 	bl	8003020 <Ultrasonic_Timer_Update_Interrupt>
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C1_ER_IRQHandler>:
volatile uint8_t I2C1_BufferIndex = 0;
volatile uint8_t I2C1_NumberBytesToSend = 0;
volatile uint8_t I2C1_Transmitter = 0;
volatile uint8_t I2C1_CommunicationByPeriod = 1;

extern "C" void I2C1_ER_IRQHandler(void) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
 80033e4:	490b      	ldr	r1, [pc, #44]	; (8003414 <I2C1_ER_IRQHandler+0x34>)
 80033e6:	480c      	ldr	r0, [pc, #48]	; (8003418 <I2C1_ER_IRQHandler+0x38>)
 80033e8:	f7fe fb82 	bl	8001af0 <I2C_GetITStatus>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <I2C1_ER_IRQHandler+0x30>
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 80033fc:	4905      	ldr	r1, [pc, #20]	; (8003414 <I2C1_ER_IRQHandler+0x34>)
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <I2C1_ER_IRQHandler+0x38>)
 8003400:	f7fe fba2 	bl	8001b48 <I2C_ClearITPendingBit>
		I2C1_BufferIndex = 0;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <I2C1_ER_IRQHandler+0x3c>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
		I2C1_NumberBytesToSend = 0;
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <I2C1_ER_IRQHandler+0x40>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
	}
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	01000400 	.word	0x01000400
 8003418:	40005400 	.word	0x40005400
 800341c:	20000178 	.word	0x20000178
 8003420:	20000179 	.word	0x20000179
 8003424:	00000000 	.word	0x00000000

08003428 <I2C1_EV_IRQHandler>:

long delta;
extern "C" void I2C1_EV_IRQHandler(void) {
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
	I2C1_CommunicationByPeriod = 1;
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <I2C1_EV_IRQHandler+0xd0>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
	uint16_t value;
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 8003436:	8a9b      	ldrh	r3, [r3, #20]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d061      	beq.n	8003510 <I2C1_EV_IRQHandler+0xe8>
		I2C1_BufferIndex = 0;
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <I2C1_EV_IRQHandler+0xd8>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
		I2C1->SR1;
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 8003454:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->SR2;
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 8003458:	8b1b      	ldrh	r3, [r3, #24]
		I2C1_Transmitter = (I2C_SR2_TRA & I2C1->SR2) == I2C_SR2_TRA;
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 800345c:	8b1b      	ldrh	r3, [r3, #24]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <I2C1_EV_IRQHandler+0xdc>)
 8003472:	701a      	strb	r2, [r3, #0]
		if (I2C1_Transmitter == 1) {
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <I2C1_EV_IRQHandler+0xdc>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0d5      	beq.n	8003434 <I2C1_EV_IRQHandler+0xc>
			if (I2C1_BufferIndex < I2C1_BufferSize) {	//EV3-1
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <I2C1_EV_IRQHandler+0xd8>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b09      	cmp	r3, #9
 8003490:	bf94      	ite	ls
 8003492:	2301      	movls	r3, #1
 8003494:	2300      	movhi	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <I2C1_EV_IRQHandler+0x92>
				I2C1->DR = I2C1_Buffer[I2C1_BufferIndex++];
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <I2C1_EV_IRQHandler+0xd8>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	1c59      	adds	r1, r3, #1
 80034a6:	b2c8      	uxtb	r0, r1
 80034a8:	4915      	ldr	r1, [pc, #84]	; (8003500 <I2C1_EV_IRQHandler+0xd8>)
 80034aa:	7008      	strb	r0, [r1, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <I2C1_EV_IRQHandler+0xe0>)
 80034b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8213      	strh	r3, [r2, #16]
 80034b8:	e007      	b.n	80034ca <I2C1_EV_IRQHandler+0xa2>
			} else {
				I2C1->SR1 |= I2C_SR1_AF;
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 80034be:	8a9b      	ldrh	r3, [r3, #20]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8293      	strh	r3, [r2, #20]
			}
			if (I2C1_BufferIndex >= I2C1_NumberBytesToSend) {
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <I2C1_EV_IRQHandler+0xd8>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <I2C1_EV_IRQHandler+0xe4>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	429a      	cmp	r2, r3
 80034d8:	bf2c      	ite	cs
 80034da:	2301      	movcs	r3, #1
 80034dc:	2300      	movcc	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0a7      	beq.n	8003434 <I2C1_EV_IRQHandler+0xc>
				I2C1->SR1 |= I2C_SR1_AF;
 80034e4:	4a05      	ldr	r2, [pc, #20]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <I2C1_EV_IRQHandler+0xd4>)
 80034e8:	8a9b      	ldrh	r3, [r3, #20]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	8293      	strh	r3, [r2, #20]
long delta;
extern "C" void I2C1_EV_IRQHandler(void) {
	I2C1_CommunicationByPeriod = 1;
	uint16_t value;
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 80034f4:	e79e      	b.n	8003434 <I2C1_EV_IRQHandler+0xc>
 80034f6:	bf00      	nop
 80034f8:	20000022 	.word	0x20000022
 80034fc:	40005400 	.word	0x40005400
 8003500:	20000178 	.word	0x20000178
 8003504:	2000017a 	.word	0x2000017a
 8003508:	20000164 	.word	0x20000164
 800350c:	20000179 	.word	0x20000179
			}
		}
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <I2C1_EV_IRQHandler+0x128>)
 8003512:	8a9b      	ldrh	r3, [r3, #20]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 876d 	beq.w	8004404 <I2C1_EV_IRQHandler+0xfdc>
		I2C1_Buffer[I2C1_BufferIndex++] = I2C1->DR;
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <I2C1_EV_IRQHandler+0x12c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	b2d1      	uxtb	r1, r2
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <I2C1_EV_IRQHandler+0x12c>)
 8003536:	7011      	strb	r1, [r2, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <I2C1_EV_IRQHandler+0x128>)
 800353c:	8a1b      	ldrh	r3, [r3, #16]
 800353e:	b299      	uxth	r1, r3
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <I2C1_EV_IRQHandler+0x130>)
 8003542:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		switch (I2C1_Buffer[0]) {
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <I2C1_EV_IRQHandler+0x130>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	e005      	b.n	800355c <I2C1_EV_IRQHandler+0x134>
 8003550:	40005400 	.word	0x40005400
 8003554:	20000178 	.word	0x20000178
 8003558:	20000164 	.word	0x20000164
 800355c:	2bfe      	cmp	r3, #254	; 0xfe
 800355e:	d8d7      	bhi.n	8003510 <I2C1_EV_IRQHandler+0xe8>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <I2C1_EV_IRQHandler+0x140>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	08003965 	.word	0x08003965
 800356c:	08003965 	.word	0x08003965
 8003570:	08003965 	.word	0x08003965
 8003574:	08003965 	.word	0x08003965
 8003578:	08003965 	.word	0x08003965
 800357c:	08003965 	.word	0x08003965
 8003580:	080039a7 	.word	0x080039a7
 8003584:	080039ed 	.word	0x080039ed
 8003588:	08003a33 	.word	0x08003a33
 800358c:	08003a79 	.word	0x08003a79
 8003590:	08003abf 	.word	0x08003abf
 8003594:	08003adb 	.word	0x08003adb
 8003598:	08003b85 	.word	0x08003b85
 800359c:	08003bd5 	.word	0x08003bd5
 80035a0:	08003c1d 	.word	0x08003c1d
 80035a4:	08003c83 	.word	0x08003c83
 80035a8:	08003c8b 	.word	0x08003c8b
 80035ac:	08003c95 	.word	0x08003c95
 80035b0:	08003c9f 	.word	0x08003c9f
 80035b4:	08003511 	.word	0x08003511
 80035b8:	08003511 	.word	0x08003511
 80035bc:	08003511 	.word	0x08003511
 80035c0:	08003511 	.word	0x08003511
 80035c4:	08003511 	.word	0x08003511
 80035c8:	08003511 	.word	0x08003511
 80035cc:	08003511 	.word	0x08003511
 80035d0:	08003511 	.word	0x08003511
 80035d4:	08003511 	.word	0x08003511
 80035d8:	08003511 	.word	0x08003511
 80035dc:	08003511 	.word	0x08003511
 80035e0:	08003511 	.word	0x08003511
 80035e4:	08003511 	.word	0x08003511
 80035e8:	08003511 	.word	0x08003511
 80035ec:	08003511 	.word	0x08003511
 80035f0:	08003511 	.word	0x08003511
 80035f4:	08003511 	.word	0x08003511
 80035f8:	08003511 	.word	0x08003511
 80035fc:	08003511 	.word	0x08003511
 8003600:	08003511 	.word	0x08003511
 8003604:	08003511 	.word	0x08003511
 8003608:	08003511 	.word	0x08003511
 800360c:	08003511 	.word	0x08003511
 8003610:	08003511 	.word	0x08003511
 8003614:	08003511 	.word	0x08003511
 8003618:	08003511 	.word	0x08003511
 800361c:	08003511 	.word	0x08003511
 8003620:	08003511 	.word	0x08003511
 8003624:	08003511 	.word	0x08003511
 8003628:	08003511 	.word	0x08003511
 800362c:	08003511 	.word	0x08003511
 8003630:	08003511 	.word	0x08003511
 8003634:	08003511 	.word	0x08003511
 8003638:	08003511 	.word	0x08003511
 800363c:	08003511 	.word	0x08003511
 8003640:	08003511 	.word	0x08003511
 8003644:	08003511 	.word	0x08003511
 8003648:	08003511 	.word	0x08003511
 800364c:	08003511 	.word	0x08003511
 8003650:	08003511 	.word	0x08003511
 8003654:	08003511 	.word	0x08003511
 8003658:	08003511 	.word	0x08003511
 800365c:	08003511 	.word	0x08003511
 8003660:	08003511 	.word	0x08003511
 8003664:	08003511 	.word	0x08003511
 8003668:	08003511 	.word	0x08003511
 800366c:	08003511 	.word	0x08003511
 8003670:	08003511 	.word	0x08003511
 8003674:	08003511 	.word	0x08003511
 8003678:	08003511 	.word	0x08003511
 800367c:	08003511 	.word	0x08003511
 8003680:	08003511 	.word	0x08003511
 8003684:	08003511 	.word	0x08003511
 8003688:	08003511 	.word	0x08003511
 800368c:	08003511 	.word	0x08003511
 8003690:	08003511 	.word	0x08003511
 8003694:	08003511 	.word	0x08003511
 8003698:	08003511 	.word	0x08003511
 800369c:	08003511 	.word	0x08003511
 80036a0:	08003511 	.word	0x08003511
 80036a4:	08003511 	.word	0x08003511
 80036a8:	08003511 	.word	0x08003511
 80036ac:	08003511 	.word	0x08003511
 80036b0:	08003511 	.word	0x08003511
 80036b4:	08003511 	.word	0x08003511
 80036b8:	08003511 	.word	0x08003511
 80036bc:	08003511 	.word	0x08003511
 80036c0:	08003511 	.word	0x08003511
 80036c4:	08003511 	.word	0x08003511
 80036c8:	08003511 	.word	0x08003511
 80036cc:	08003511 	.word	0x08003511
 80036d0:	08003511 	.word	0x08003511
 80036d4:	08003511 	.word	0x08003511
 80036d8:	08003511 	.word	0x08003511
 80036dc:	08003511 	.word	0x08003511
 80036e0:	08003511 	.word	0x08003511
 80036e4:	08003511 	.word	0x08003511
 80036e8:	08003511 	.word	0x08003511
 80036ec:	08003511 	.word	0x08003511
 80036f0:	08003511 	.word	0x08003511
 80036f4:	08003ca7 	.word	0x08003ca7
 80036f8:	08003d39 	.word	0x08003d39
 80036fc:	08003e11 	.word	0x08003e11
 8003700:	08003ea3 	.word	0x08003ea3
 8003704:	08003f15 	.word	0x08003f15
 8003708:	08003f87 	.word	0x08003f87
 800370c:	0800401d 	.word	0x0800401d
 8003710:	080040e9 	.word	0x080040e9
 8003714:	08004143 	.word	0x08004143
 8003718:	080041eb 	.word	0x080041eb
 800371c:	080042c1 	.word	0x080042c1
 8003720:	08003511 	.word	0x08003511
 8003724:	08003511 	.word	0x08003511
 8003728:	08003511 	.word	0x08003511
 800372c:	08003511 	.word	0x08003511
 8003730:	08003511 	.word	0x08003511
 8003734:	08003511 	.word	0x08003511
 8003738:	08003511 	.word	0x08003511
 800373c:	08003511 	.word	0x08003511
 8003740:	08003511 	.word	0x08003511
 8003744:	08003511 	.word	0x08003511
 8003748:	08003511 	.word	0x08003511
 800374c:	08003511 	.word	0x08003511
 8003750:	08003511 	.word	0x08003511
 8003754:	08003511 	.word	0x08003511
 8003758:	08003511 	.word	0x08003511
 800375c:	08003511 	.word	0x08003511
 8003760:	08003511 	.word	0x08003511
 8003764:	08003511 	.word	0x08003511
 8003768:	08003511 	.word	0x08003511
 800376c:	08003511 	.word	0x08003511
 8003770:	08003511 	.word	0x08003511
 8003774:	08003511 	.word	0x08003511
 8003778:	08003511 	.word	0x08003511
 800377c:	08003511 	.word	0x08003511
 8003780:	08003511 	.word	0x08003511
 8003784:	08003511 	.word	0x08003511
 8003788:	08003511 	.word	0x08003511
 800378c:	08003511 	.word	0x08003511
 8003790:	08003511 	.word	0x08003511
 8003794:	08003511 	.word	0x08003511
 8003798:	08003511 	.word	0x08003511
 800379c:	08003511 	.word	0x08003511
 80037a0:	08003511 	.word	0x08003511
 80037a4:	08003511 	.word	0x08003511
 80037a8:	08003511 	.word	0x08003511
 80037ac:	08003511 	.word	0x08003511
 80037b0:	08003511 	.word	0x08003511
 80037b4:	08003511 	.word	0x08003511
 80037b8:	08003511 	.word	0x08003511
 80037bc:	08003511 	.word	0x08003511
 80037c0:	08003511 	.word	0x08003511
 80037c4:	08003511 	.word	0x08003511
 80037c8:	08003511 	.word	0x08003511
 80037cc:	08003511 	.word	0x08003511
 80037d0:	08003511 	.word	0x08003511
 80037d4:	08003511 	.word	0x08003511
 80037d8:	08003511 	.word	0x08003511
 80037dc:	08003511 	.word	0x08003511
 80037e0:	08003511 	.word	0x08003511
 80037e4:	08003511 	.word	0x08003511
 80037e8:	08003511 	.word	0x08003511
 80037ec:	08003511 	.word	0x08003511
 80037f0:	08003511 	.word	0x08003511
 80037f4:	08003511 	.word	0x08003511
 80037f8:	08003511 	.word	0x08003511
 80037fc:	08003511 	.word	0x08003511
 8003800:	08003511 	.word	0x08003511
 8003804:	08003511 	.word	0x08003511
 8003808:	08003511 	.word	0x08003511
 800380c:	08003511 	.word	0x08003511
 8003810:	08003511 	.word	0x08003511
 8003814:	08003511 	.word	0x08003511
 8003818:	08003511 	.word	0x08003511
 800381c:	08003511 	.word	0x08003511
 8003820:	08003511 	.word	0x08003511
 8003824:	08003511 	.word	0x08003511
 8003828:	08003511 	.word	0x08003511
 800382c:	08003511 	.word	0x08003511
 8003830:	08003511 	.word	0x08003511
 8003834:	08003511 	.word	0x08003511
 8003838:	08003511 	.word	0x08003511
 800383c:	08003511 	.word	0x08003511
 8003840:	08003511 	.word	0x08003511
 8003844:	08003511 	.word	0x08003511
 8003848:	08003511 	.word	0x08003511
 800384c:	08003511 	.word	0x08003511
 8003850:	08003511 	.word	0x08003511
 8003854:	08003511 	.word	0x08003511
 8003858:	08003511 	.word	0x08003511
 800385c:	08003511 	.word	0x08003511
 8003860:	08003511 	.word	0x08003511
 8003864:	08003511 	.word	0x08003511
 8003868:	08003511 	.word	0x08003511
 800386c:	08003511 	.word	0x08003511
 8003870:	08003511 	.word	0x08003511
 8003874:	08003511 	.word	0x08003511
 8003878:	08003511 	.word	0x08003511
 800387c:	08003511 	.word	0x08003511
 8003880:	08003511 	.word	0x08003511
 8003884:	08003511 	.word	0x08003511
 8003888:	08003511 	.word	0x08003511
 800388c:	08003511 	.word	0x08003511
 8003890:	08003511 	.word	0x08003511
 8003894:	08003511 	.word	0x08003511
 8003898:	08003511 	.word	0x08003511
 800389c:	08003511 	.word	0x08003511
 80038a0:	08003511 	.word	0x08003511
 80038a4:	08003511 	.word	0x08003511
 80038a8:	08003511 	.word	0x08003511
 80038ac:	08003511 	.word	0x08003511
 80038b0:	08003511 	.word	0x08003511
 80038b4:	08003511 	.word	0x08003511
 80038b8:	08003511 	.word	0x08003511
 80038bc:	08003511 	.word	0x08003511
 80038c0:	08003511 	.word	0x08003511
 80038c4:	08003511 	.word	0x08003511
 80038c8:	08003511 	.word	0x08003511
 80038cc:	08003511 	.word	0x08003511
 80038d0:	08003511 	.word	0x08003511
 80038d4:	08003511 	.word	0x08003511
 80038d8:	08003511 	.word	0x08003511
 80038dc:	08003511 	.word	0x08003511
 80038e0:	08003511 	.word	0x08003511
 80038e4:	08003511 	.word	0x08003511
 80038e8:	08003511 	.word	0x08003511
 80038ec:	08003511 	.word	0x08003511
 80038f0:	08003511 	.word	0x08003511
 80038f4:	08003511 	.word	0x08003511
 80038f8:	08003511 	.word	0x08003511
 80038fc:	08003511 	.word	0x08003511
 8003900:	08003511 	.word	0x08003511
 8003904:	08003511 	.word	0x08003511
 8003908:	08003511 	.word	0x08003511
 800390c:	08003511 	.word	0x08003511
 8003910:	08003511 	.word	0x08003511
 8003914:	08003511 	.word	0x08003511
 8003918:	08003511 	.word	0x08003511
 800391c:	08003511 	.word	0x08003511
 8003920:	08003511 	.word	0x08003511
 8003924:	08003511 	.word	0x08003511
 8003928:	08003511 	.word	0x08003511
 800392c:	08003511 	.word	0x08003511
 8003930:	08003511 	.word	0x08003511
 8003934:	08003511 	.word	0x08003511
 8003938:	08003511 	.word	0x08003511
 800393c:	08003511 	.word	0x08003511
 8003940:	08003511 	.word	0x08003511
 8003944:	08003511 	.word	0x08003511
 8003948:	08003511 	.word	0x08003511
 800394c:	08003511 	.word	0x08003511
 8003950:	08003511 	.word	0x08003511
 8003954:	08003511 	.word	0x08003511
 8003958:	08003511 	.word	0x08003511
 800395c:	08004369 	.word	0x08004369
 8003960:	0800439f 	.word	0x0800439f
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
			if (I2C1_BufferIndex == 3)
 8003964:	4b95      	ldr	r3, [pc, #596]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b03      	cmp	r3, #3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 852a 	beq.w	80043ce <I2C1_EV_IRQHandler+0xfa6>
				getMotor(I2C1_Buffer[0])->setSpeedMotor(
 800397a:	4b91      	ldr	r3, [pc, #580]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fb7b 	bl	800307c <_Z8getMotori>
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
 8003986:	4b8e      	ldr	r3, [pc, #568]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003988:	885b      	ldrh	r3, [r3, #2]
 800398a:	b29b      	uxth	r3, r3
 800398c:	021b      	lsls	r3, r3, #8
		case 3:
		case 4:
		case 5:
		case 6:
			if (I2C1_BufferIndex == 3)
				getMotor(I2C1_Buffer[0])->setSpeedMotor(
 800398e:	b21a      	sxth	r2, r3
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
 8003990:	4b8b      	ldr	r3, [pc, #556]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003992:	889b      	ldrh	r3, [r3, #4]
 8003994:	b29b      	uxth	r3, r3
		case 3:
		case 4:
		case 5:
		case 6:
			if (I2C1_BufferIndex == 3)
				getMotor(I2C1_Buffer[0])->setSpeedMotor(
 8003996:	b21b      	sxth	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b21b      	sxth	r3, r3
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
 800399c:	4619      	mov	r1, r3
 800399e:	f7ff f8d7 	bl	8002b50 <_ZN5Motor13setSpeedMotorEs>
			break;
 80039a2:	f000 bd14 	b.w	80043ce <I2C1_EV_IRQHandler+0xfa6>
		case 7:
			if (I2C1_BufferIndex == 3) {
 80039a6:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 850c 	beq.w	80043d4 <I2C1_EV_IRQHandler+0xfac>
				dir = FORWARD;
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <I2C1_EV_IRQHandler+0x79c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
 80039c2:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 80039c4:	885b      	ldrh	r3, [r3, #2]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	b21a      	sxth	r2, r3
 80039cc:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 80039ce:	889b      	ldrh	r3, [r3, #4]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21b      	sxth	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b21a      	sxth	r2, r3
 80039d8:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <I2C1_EV_IRQHandler+0x7a0>)
 80039da:	801a      	strh	r2, [r3, #0]
				obnov = true;
 80039dc:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <I2C1_EV_IRQHandler+0x7a4>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
				chodNaPoziciu = false;
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <I2C1_EV_IRQHandler+0x7a8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80039e8:	f000 bcf4 	b.w	80043d4 <I2C1_EV_IRQHandler+0xfac>
		case 8:
			if (I2C1_BufferIndex == 3) {
 80039ec:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 84ec 	beq.w	80043da <I2C1_EV_IRQHandler+0xfb2>
				dir = BACKWARD;
 8003a02:	4b70      	ldr	r3, [pc, #448]	; (8003bc4 <I2C1_EV_IRQHandler+0x79c>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
 8003a08:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003a0a:	885b      	ldrh	r3, [r3, #2]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b21a      	sxth	r2, r3
 8003a12:	4b6b      	ldr	r3, [pc, #428]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003a14:	889b      	ldrh	r3, [r3, #4]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	b21a      	sxth	r2, r3
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <I2C1_EV_IRQHandler+0x7a0>)
 8003a20:	801a      	strh	r2, [r3, #0]
				obnov = true;
 8003a22:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <I2C1_EV_IRQHandler+0x7a4>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
				chodNaPoziciu = false;
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <I2C1_EV_IRQHandler+0x7a8>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003a2e:	f000 bcd4 	b.w	80043da <I2C1_EV_IRQHandler+0xfb2>
		case 9:
			if (I2C1_BufferIndex == 3) {
 8003a32:	4b62      	ldr	r3, [pc, #392]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 84cc 	beq.w	80043e0 <I2C1_EV_IRQHandler+0xfb8>
				dir = ROTATE_CLOCKWISE;
 8003a48:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <I2C1_EV_IRQHandler+0x79c>)
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
 8003a4e:	4b5c      	ldr	r3, [pc, #368]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003a50:	885b      	ldrh	r3, [r3, #2]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	b21a      	sxth	r2, r3
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003a5a:	889b      	ldrh	r3, [r3, #4]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	b21a      	sxth	r2, r3
 8003a64:	4b58      	ldr	r3, [pc, #352]	; (8003bc8 <I2C1_EV_IRQHandler+0x7a0>)
 8003a66:	801a      	strh	r2, [r3, #0]
				obnov = true;
 8003a68:	4b58      	ldr	r3, [pc, #352]	; (8003bcc <I2C1_EV_IRQHandler+0x7a4>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
				chodNaPoziciu = false;
 8003a6e:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <I2C1_EV_IRQHandler+0x7a8>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003a74:	f000 bcb4 	b.w	80043e0 <I2C1_EV_IRQHandler+0xfb8>
		case 10:
			if (I2C1_BufferIndex == 3) {
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 84ac 	beq.w	80043e6 <I2C1_EV_IRQHandler+0xfbe>
				dir = ROTATE_ANTICLOCKWISE;
 8003a8e:	4b4d      	ldr	r3, [pc, #308]	; (8003bc4 <I2C1_EV_IRQHandler+0x79c>)
 8003a90:	2203      	movs	r2, #3
 8003a92:	701a      	strb	r2, [r3, #0]
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
 8003a94:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003a96:	885b      	ldrh	r3, [r3, #2]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	b21a      	sxth	r2, r3
 8003a9e:	4b48      	ldr	r3, [pc, #288]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003aa0:	889b      	ldrh	r3, [r3, #4]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b21a      	sxth	r2, r3
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <I2C1_EV_IRQHandler+0x7a0>)
 8003aac:	801a      	strh	r2, [r3, #0]
				obnov = true;
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <I2C1_EV_IRQHandler+0x7a4>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
				chodNaPoziciu = false;
 8003ab4:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <I2C1_EV_IRQHandler+0x7a8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003aba:	f000 bc94 	b.w	80043e6 <I2C1_EV_IRQHandler+0xfbe>
		case 11:
			dir = STOP;
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <I2C1_EV_IRQHandler+0x79c>)
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	701a      	strb	r2, [r3, #0]
			mmPerSec = 0;
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <I2C1_EV_IRQHandler+0x7a0>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
			obnov = true;
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <I2C1_EV_IRQHandler+0x7a4>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
			chodNaPoziciu = false;
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <I2C1_EV_IRQHandler+0x7a8>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
			break;
 8003ad6:	f000 bc93 	b.w	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 12:
			if (I2C1_BufferIndex == 2) {
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 847e 	beq.w	80043ec <I2C1_EV_IRQHandler+0xfc4>
				setLed(0, (I2C1_Buffer[1] & (1 << 1)) == (1 << 1) ? ON : OFF,
 8003af0:	4b33      	ldr	r3, [pc, #204]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003af2:	885b      	ldrh	r3, [r3, #2]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C1_EV_IRQHandler+0x6da>
 8003afe:	2101      	movs	r1, #1
 8003b00:	e000      	b.n	8003b04 <I2C1_EV_IRQHandler+0x6dc>
 8003b02:	2100      	movs	r1, #0
						(I2C1_Buffer[1] & (1 << 2)) == (1 << 2) ? ON : OFF);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b06:	885b      	ldrh	r3, [r3, #2]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f003 0304 	and.w	r3, r3, #4
			obnov = true;
			chodNaPoziciu = false;
			break;
		case 12:
			if (I2C1_BufferIndex == 2) {
				setLed(0, (I2C1_Buffer[1] & (1 << 1)) == (1 << 1) ? ON : OFF,
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C1_EV_IRQHandler+0x6ee>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <I2C1_EV_IRQHandler+0x6f0>
 8003b16:	2300      	movs	r3, #0
						(I2C1_Buffer[1] & (1 << 2)) == (1 << 2) ? ON : OFF);
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7fe ff74 	bl	8002a08 <setLed>
				setLed(1, (I2C1_Buffer[1] & (1 << 3)) == (1 << 3) ? ON : OFF,
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b22:	885b      	ldrh	r3, [r3, #2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C1_EV_IRQHandler+0x70a>
 8003b2e:	2101      	movs	r1, #1
 8003b30:	e000      	b.n	8003b34 <I2C1_EV_IRQHandler+0x70c>
 8003b32:	2100      	movs	r1, #0
						(I2C1_Buffer[1] & (1 << 4)) == (1 << 4) ? ON : OFF);
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b36:	885b      	ldrh	r3, [r3, #2]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f003 0310 	and.w	r3, r3, #16
			break;
		case 12:
			if (I2C1_BufferIndex == 2) {
				setLed(0, (I2C1_Buffer[1] & (1 << 1)) == (1 << 1) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 2)) == (1 << 2) ? ON : OFF);
				setLed(1, (I2C1_Buffer[1] & (1 << 3)) == (1 << 3) ? ON : OFF,
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C1_EV_IRQHandler+0x71e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <I2C1_EV_IRQHandler+0x720>
 8003b46:	2300      	movs	r3, #0
						(I2C1_Buffer[1] & (1 << 4)) == (1 << 4) ? ON : OFF);
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f7fe ff5c 	bl	8002a08 <setLed>
				setLed(2, (I2C1_Buffer[1] & (1 << 5)) == (1 << 5) ? ON : OFF,
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b52:	885b      	ldrh	r3, [r3, #2]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C1_EV_IRQHandler+0x73a>
 8003b5e:	2101      	movs	r1, #1
 8003b60:	e000      	b.n	8003b64 <I2C1_EV_IRQHandler+0x73c>
 8003b62:	2100      	movs	r1, #0
						(I2C1_Buffer[1] & (1 << 6)) == (1 << 6) ? ON : OFF);
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b66:	885b      	ldrh	r3, [r3, #2]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
			if (I2C1_BufferIndex == 2) {
				setLed(0, (I2C1_Buffer[1] & (1 << 1)) == (1 << 1) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 2)) == (1 << 2) ? ON : OFF);
				setLed(1, (I2C1_Buffer[1] & (1 << 3)) == (1 << 3) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 4)) == (1 << 4) ? ON : OFF);
				setLed(2, (I2C1_Buffer[1] & (1 << 5)) == (1 << 5) ? ON : OFF,
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C1_EV_IRQHandler+0x74e>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <I2C1_EV_IRQHandler+0x750>
 8003b76:	2300      	movs	r3, #0
						(I2C1_Buffer[1] & (1 << 6)) == (1 << 6) ? ON : OFF);
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2002      	movs	r0, #2
 8003b7c:	f7fe ff44 	bl	8002a08 <setLed>
			}
			break;
 8003b80:	f000 bc34 	b.w	80043ec <I2C1_EV_IRQHandler+0xfc4>
		case 13:
			if (I2C1_BufferIndex == 3) {
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <I2C1_EV_IRQHandler+0x794>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 842c 	beq.w	80043f2 <I2C1_EV_IRQHandler+0xfca>
				setServo(I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003b9c:	885b      	ldrh	r3, [r3, #2]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <I2C1_EV_IRQHandler+0x798>)
 8003ba6:	889b      	ldrh	r3, [r3, #4]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b21b      	sxth	r3, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b21b      	sxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f8c5 	bl	8002d40 <setServo>
			}
			break;
 8003bb6:	f000 bc1c 	b.w	80043f2 <I2C1_EV_IRQHandler+0xfca>
 8003bba:	bf00      	nop
 8003bbc:	20000178 	.word	0x20000178
 8003bc0:	20000164 	.word	0x20000164
 8003bc4:	20000021 	.word	0x20000021
 8003bc8:	20000160 	.word	0x20000160
 8003bcc:	20000020 	.word	0x20000020
 8003bd0:	200000fc 	.word	0x200000fc

		case 14:
			if (I2C1_BufferIndex == 3) {
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8407 	beq.w	80043f8 <I2C1_EV_IRQHandler+0xfd0>
				chodNaPoziciu = false;
 8003bea:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <I2C1_EV_IRQHandler+0x9b4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
				yawPozadovane = (double) (I2C1_Buffer[1] << 8 | I2C1_Buffer[2])
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003bf2:	885b      	ldrh	r3, [r3, #2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4a79      	ldr	r2, [pc, #484]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003bfa:	8892      	ldrh	r2, [r2, #4]
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	4313      	orrs	r3, r2
						/ 10000;
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fc0f 	bl	8000424 <__aeabi_i2d>
 8003c06:	a372      	add	r3, pc, #456	; (adr r3, 8003dd0 <I2C1_EV_IRQHandler+0x9a8>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fd9a 	bl	8000744 <__aeabi_ddiv>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	4a73      	ldr	r2, [pc, #460]	; (8003de4 <I2C1_EV_IRQHandler+0x9bc>)
 8003c16:	e882 0018 	stmia.w	r2, {r3, r4}
			}
			break;
 8003c1a:	e3ed      	b.n	80043f8 <I2C1_EV_IRQHandler+0xfd0>

		case 15:
			if (I2C1_BufferIndex == 5) {
 8003c1c:	4b6e      	ldr	r3, [pc, #440]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 83e6 	beq.w	80043fe <I2C1_EV_IRQHandler+0xfd6>
				chodNaPoziciu = false;
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <I2C1_EV_IRQHandler+0x9b4>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
				distancePozadovane |= I2C1_Buffer[1] << 24;
 8003c38:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003c3a:	885b      	ldrh	r3, [r3, #2]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	4a68      	ldr	r2, [pc, #416]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c48:	6013      	str	r3, [r2, #0]
				distancePozadovane |= I2C1_Buffer[2] << 16;
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003c4c:	889b      	ldrh	r3, [r3, #4]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c5a:	6013      	str	r3, [r2, #0]
				distancePozadovane |= I2C1_Buffer[3] << 8;
 8003c5c:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003c5e:	88db      	ldrh	r3, [r3, #6]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c6c:	6013      	str	r3, [r2, #0]
				distancePozadovane |= I2C1_Buffer[4];
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003c70:	891b      	ldrh	r3, [r3, #8]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	; (8003de8 <I2C1_EV_IRQHandler+0x9c0>)
 8003c7e:	6013      	str	r3, [r2, #0]
			}
			break;
 8003c80:	e3bd      	b.n	80043fe <I2C1_EV_IRQHandler+0xfd6>
		case 16:
			chodNaPoziciu = true;
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <I2C1_EV_IRQHandler+0x9b4>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
			break;
 8003c88:	e3ba      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 17:
			xLastSend = xLastMaybeSend;
 8003c8a:	4b58      	ldr	r3, [pc, #352]	; (8003dec <I2C1_EV_IRQHandler+0x9c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <I2C1_EV_IRQHandler+0x9c8>)
 8003c90:	6013      	str	r3, [r2, #0]
			break;
 8003c92:	e3b5      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 18:
			yLastSend = yLastMaybeSend;
 8003c94:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <I2C1_EV_IRQHandler+0x9cc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <I2C1_EV_IRQHandler+0x9d0>)
 8003c9a:	6013      	str	r3, [r2, #0]
			break;
 8003c9c:	e3b0      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 19:
			zLastSend = zLastMaybeSend;
 8003c9e:	4b57      	ldr	r3, [pc, #348]	; (8003dfc <I2C1_EV_IRQHandler+0x9d4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <I2C1_EV_IRQHandler+0x9d8>)
 8003ca4:	6013      	str	r3, [r2, #0]
		case 100:
			I2C1_BufferIndex = 0;
 8003ca6:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 24;
 8003cac:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	b2d1      	uxtb	r1, r2
 8003cb6:	4a48      	ldr	r2, [pc, #288]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003cb8:	7011      	strb	r1, [r2, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <I2C1_EV_IRQHandler+0x9dc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	161b      	asrs	r3, r3, #24
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003cc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 16;
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	b2d1      	uxtb	r1, r2
 8003cd4:	4a40      	ldr	r2, [pc, #256]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003cd6:	7011      	strb	r1, [r2, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <I2C1_EV_IRQHandler+0x9dc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	141b      	asrs	r3, r3, #16
 8003ce0:	b299      	uxth	r1, r3
 8003ce2:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003ce4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = x >> 8;
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	b2d1      	uxtb	r1, r2
 8003cf2:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003cf4:	7011      	strb	r1, [r2, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <I2C1_EV_IRQHandler+0x9dc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	121b      	asrs	r3, r3, #8
 8003cfe:	b299      	uxth	r1, r3
 8003d00:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003d02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = x & 0xFF;
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	b2d1      	uxtb	r1, r2
 8003d10:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d12:	7011      	strb	r1, [r2, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <I2C1_EV_IRQHandler+0x9dc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	b299      	uxth	r1, r3
 8003d20:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003d22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003d26:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <I2C1_EV_IRQHandler+0x9e0>)
 8003d2e:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
			break;
 8003d36:	e363      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 101:
			I2C1_BufferIndex = 0;
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 24;
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	b2d1      	uxtb	r1, r2
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d4a:	7011      	strb	r1, [r2, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <I2C1_EV_IRQHandler+0x9e4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	161b      	asrs	r3, r3, #24
 8003d54:	b299      	uxth	r1, r3
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003d58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 16;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	b2d1      	uxtb	r1, r2
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d68:	7011      	strb	r1, [r2, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <I2C1_EV_IRQHandler+0x9e4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	141b      	asrs	r3, r3, #16
 8003d72:	b299      	uxth	r1, r3
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003d76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = y >> 8;
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	b2d1      	uxtb	r1, r2
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d86:	7011      	strb	r1, [r2, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <I2C1_EV_IRQHandler+0x9e4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	121b      	asrs	r3, r3, #8
 8003d90:	b299      	uxth	r1, r3
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = y & 0xFF;
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	b2d1      	uxtb	r1, r2
 8003da2:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003da4:	7011      	strb	r1, [r2, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <I2C1_EV_IRQHandler+0x9e4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	b299      	uxth	r1, r3
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <I2C1_EV_IRQHandler+0x9b8>)
 8003db4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <I2C1_EV_IRQHandler+0x9e0>)
 8003dc0:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <I2C1_EV_IRQHandler+0x9b0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
			break;
 8003dc8:	e31a      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
 8003dca:	bf00      	nop
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	40c38800 	.word	0x40c38800
 8003dd8:	20000178 	.word	0x20000178
 8003ddc:	200000fc 	.word	0x200000fc
 8003de0:	20000164 	.word	0x20000164
 8003de4:	20000100 	.word	0x20000100
 8003de8:	20000108 	.word	0x20000108
 8003dec:	200000f0 	.word	0x200000f0
 8003df0:	200000e4 	.word	0x200000e4
 8003df4:	200000f4 	.word	0x200000f4
 8003df8:	200000e8 	.word	0x200000e8
 8003dfc:	200000f8 	.word	0x200000f8
 8003e00:	200000ec 	.word	0x200000ec
 8003e04:	200000d8 	.word	0x200000d8
 8003e08:	20000179 	.word	0x20000179
 8003e0c:	200000dc 	.word	0x200000dc
		case 102:
			I2C1_BufferIndex = 0;
 8003e10:	4b7b      	ldr	r3, [pc, #492]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 24;
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	b2d1      	uxtb	r1, r2
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e22:	7011      	strb	r1, [r2, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <I2C1_EV_IRQHandler+0xbdc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	161b      	asrs	r3, r3, #24
 8003e2c:	b299      	uxth	r1, r3
 8003e2e:	4b76      	ldr	r3, [pc, #472]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003e30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 16;
 8003e34:	4b72      	ldr	r3, [pc, #456]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	b2d1      	uxtb	r1, r2
 8003e3e:	4a70      	ldr	r2, [pc, #448]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e40:	7011      	strb	r1, [r2, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b6f      	ldr	r3, [pc, #444]	; (8004004 <I2C1_EV_IRQHandler+0xbdc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	141b      	asrs	r3, r3, #16
 8003e4a:	b299      	uxth	r1, r3
 8003e4c:	4b6e      	ldr	r3, [pc, #440]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003e4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = z >> 8;
 8003e52:	4b6b      	ldr	r3, [pc, #428]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	b2d1      	uxtb	r1, r2
 8003e5c:	4a68      	ldr	r2, [pc, #416]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e5e:	7011      	strb	r1, [r2, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b68      	ldr	r3, [pc, #416]	; (8004004 <I2C1_EV_IRQHandler+0xbdc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	121b      	asrs	r3, r3, #8
 8003e68:	b299      	uxth	r1, r3
 8003e6a:	4b67      	ldr	r3, [pc, #412]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003e6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = z & 0xFF;
 8003e70:	4b63      	ldr	r3, [pc, #396]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	b2d1      	uxtb	r1, r2
 8003e7a:	4a61      	ldr	r2, [pc, #388]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e7c:	7011      	strb	r1, [r2, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b60      	ldr	r3, [pc, #384]	; (8004004 <I2C1_EV_IRQHandler+0xbdc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	b299      	uxth	r1, r3
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003e8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003e90:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <I2C1_EV_IRQHandler+0xbe4>)
 8003e98:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003e9a:	4b59      	ldr	r3, [pc, #356]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
			break;
 8003ea0:	e2ae      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 103:
			I2C1_BufferIndex = 0;
 8003ea2:	4b57      	ldr	r3, [pc, #348]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
			value = (int16_t) (roll * 10000);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <I2C1_EV_IRQHandler+0xbe8>)
 8003eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eae:	a352      	add	r3, pc, #328	; (adr r3, 8003ff8 <I2C1_EV_IRQHandler+0xbd0>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fb1c 	bl	80004f0 <__aeabi_dmul>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	f7fc fdb0 	bl	8000a24 <__aeabi_d2iz>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	80fb      	strh	r3, [r7, #6]
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
 8003eca:	4b4d      	ldr	r3, [pc, #308]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	b2d1      	uxtb	r1, r2
 8003ed4:	4a4a      	ldr	r2, [pc, #296]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ed6:	7011      	strb	r1, [r2, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	121b      	asrs	r3, r3, #8
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	4b49      	ldr	r3, [pc, #292]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003ee2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
 8003ee6:	4b46      	ldr	r3, [pc, #280]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	b2d1      	uxtb	r1, r2
 8003ef0:	4a43      	ldr	r2, [pc, #268]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ef2:	7011      	strb	r1, [r2, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	b299      	uxth	r1, r3
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003efe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b40      	ldr	r3, [pc, #256]	; (800400c <I2C1_EV_IRQHandler+0xbe4>)
 8003f0a:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003f0c:	4b3c      	ldr	r3, [pc, #240]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
			break;
 8003f12:	e275      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 104:
			I2C1_BufferIndex = 0;
 8003f14:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
			value = (int16_t) (pitch * 10000);
 8003f1a:	4b3e      	ldr	r3, [pc, #248]	; (8004014 <I2C1_EV_IRQHandler+0xbec>)
 8003f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f20:	a335      	add	r3, pc, #212	; (adr r3, 8003ff8 <I2C1_EV_IRQHandler+0xbd0>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc fae3 	bl	80004f0 <__aeabi_dmul>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4621      	mov	r1, r4
 8003f32:	f7fc fd77 	bl	8000a24 <__aeabi_d2iz>
 8003f36:	4603      	mov	r3, r0
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	80fb      	strh	r3, [r7, #6]
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	b2d1      	uxtb	r1, r2
 8003f46:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f48:	7011      	strb	r1, [r2, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	121b      	asrs	r3, r3, #8
 8003f50:	b299      	uxth	r1, r3
 8003f52:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003f54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	b2d1      	uxtb	r1, r2
 8003f62:	4a27      	ldr	r2, [pc, #156]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f64:	7011      	strb	r1, [r2, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	b299      	uxth	r1, r3
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003f70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <I2C1_EV_IRQHandler+0xbe4>)
 8003f7c:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
			break;
 8003f84:	e23c      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 105:
			I2C1_BufferIndex = 0;
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
			value = (uint16_t) (yaw * 10000);
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <I2C1_EV_IRQHandler+0xbf0>)
 8003f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f92:	a319      	add	r3, pc, #100	; (adr r3, 8003ff8 <I2C1_EV_IRQHandler+0xbd0>)
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f7fc faaa 	bl	80004f0 <__aeabi_dmul>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	f7fc fd66 	bl	8000a74 <__aeabi_d2uiz>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	80fb      	strh	r3, [r7, #6]
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	b2d1      	uxtb	r1, r2
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003fb8:	7011      	strb	r1, [r2, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	121b      	asrs	r3, r3, #8
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003fc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	b2d1      	uxtb	r1, r2
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003fd4:	7011      	strb	r1, [r2, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	b299      	uxth	r1, r3
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <I2C1_EV_IRQHandler+0xbe0>)
 8003fe0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <I2C1_EV_IRQHandler+0xbe4>)
 8003fec:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <I2C1_EV_IRQHandler+0xbd8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
			break;
 8003ff4:	e204      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
 8003ff6:	bf00      	nop
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	40c38800 	.word	0x40c38800
 8004000:	20000178 	.word	0x20000178
 8004004:	200000e0 	.word	0x200000e0
 8004008:	20000164 	.word	0x20000164
 800400c:	20000179 	.word	0x20000179
 8004010:	20000118 	.word	0x20000118
 8004014:	20000120 	.word	0x20000120
 8004018:	20000110 	.word	0x20000110
		case 106:
			I2C1_BufferIndex = 0;
 800401c:	4b9d      	ldr	r3, [pc, #628]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex] = 0;
 8004022:	4b9c      	ldr	r3, [pc, #624]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	4b9b      	ldr	r3, [pc, #620]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 800402c:	2100      	movs	r1, #0
 800402e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (buttons[0])
 8004032:	4b9a      	ldr	r3, [pc, #616]	; (800429c <I2C1_EV_IRQHandler+0xe74>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <I2C1_EV_IRQHandler+0xc3c>
				I2C1_Buffer[I2C1_BufferIndex] |= 1;
 8004046:	4b93      	ldr	r3, [pc, #588]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4619      	mov	r1, r3
 8004050:	4b91      	ldr	r3, [pc, #580]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004052:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	b299      	uxth	r1, r3
 800405e:	4b8e      	ldr	r3, [pc, #568]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004060:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (buttons[1])
 8004064:	4b8d      	ldr	r3, [pc, #564]	; (800429c <I2C1_EV_IRQHandler+0xe74>)
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <I2C1_EV_IRQHandler+0xc6e>
				I2C1_Buffer[I2C1_BufferIndex] |= 2;
 8004078:	4b86      	ldr	r3, [pc, #536]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	4619      	mov	r1, r3
 8004082:	4b85      	ldr	r3, [pc, #532]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004084:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	b299      	uxth	r1, r3
 8004090:	4b81      	ldr	r3, [pc, #516]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004092:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (buttons[2])
 8004096:	4b81      	ldr	r3, [pc, #516]	; (800429c <I2C1_EV_IRQHandler+0xe74>)
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <I2C1_EV_IRQHandler+0xca0>
				I2C1_Buffer[I2C1_BufferIndex] |= 4;
 80040aa:	4b7a      	ldr	r3, [pc, #488]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	4b78      	ldr	r3, [pc, #480]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 80040b6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	b299      	uxth	r1, r3
 80040c2:	4b75      	ldr	r3, [pc, #468]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 80040c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_BufferIndex++;
 80040c8:	4b72      	ldr	r3, [pc, #456]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4b70      	ldr	r3, [pc, #448]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040d4:	701a      	strb	r2, [r3, #0]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 80040d6:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b70      	ldr	r3, [pc, #448]	; (80042a0 <I2C1_EV_IRQHandler+0xe78>)
 80040de:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 80040e0:	4b6c      	ldr	r3, [pc, #432]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
			break;
 80040e6:	e18b      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 107:
			I2C1_BufferIndex = 0;
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
			value = getUltRaw(0);
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7fe ff1a 	bl	8002f28 <getUltRaw>
 80040f4:	4603      	mov	r3, r0
 80040f6:	80fb      	strh	r3, [r7, #6]
			I2C1_Buffer[I2C1_BufferIndex++] = value >> 8;
 80040f8:	4b66      	ldr	r3, [pc, #408]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	b2d1      	uxtb	r1, r2
 8004102:	4a64      	ldr	r2, [pc, #400]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004104:	7011      	strb	r1, [r2, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	121b      	asrs	r3, r3, #8
 800410c:	b299      	uxth	r1, r3
 800410e:	4b62      	ldr	r3, [pc, #392]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004110:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = value & 0xFF;
 8004114:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	b2d1      	uxtb	r1, r2
 800411e:	4a5d      	ldr	r2, [pc, #372]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004120:	7011      	strb	r1, [r2, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	b299      	uxth	r1, r3
 800412a:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 800412c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			;
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8004130:	4b58      	ldr	r3, [pc, #352]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <I2C1_EV_IRQHandler+0xe78>)
 8004138:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
			break;
 8004140:	e15e      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 108:
			xLastMaybeSend = x;
 8004142:	4b58      	ldr	r3, [pc, #352]	; (80042a4 <I2C1_EV_IRQHandler+0xe7c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <I2C1_EV_IRQHandler+0xe80>)
 8004148:	6013      	str	r3, [r2, #0]
			delta = xLastMaybeSend-xLastSend;
 800414a:	4b57      	ldr	r3, [pc, #348]	; (80042a8 <I2C1_EV_IRQHandler+0xe80>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <I2C1_EV_IRQHandler+0xe84>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004156:	6013      	str	r3, [r2, #0]
			I2C1_BufferIndex = 0;
 8004158:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 24;
 800415e:	4b4d      	ldr	r3, [pc, #308]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	b2d1      	uxtb	r1, r2
 8004168:	4a4a      	ldr	r2, [pc, #296]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800416a:	7011      	strb	r1, [r2, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	161b      	asrs	r3, r3, #24
 8004174:	b299      	uxth	r1, r3
 8004176:	4b48      	ldr	r3, [pc, #288]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004178:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 16;
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	b2d1      	uxtb	r1, r2
 8004186:	4a43      	ldr	r2, [pc, #268]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004188:	7011      	strb	r1, [r2, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	141b      	asrs	r3, r3, #16
 8004192:	b299      	uxth	r1, r3
 8004194:	4b40      	ldr	r3, [pc, #256]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004196:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 8;
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	b2d1      	uxtb	r1, r2
 80041a4:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80041a6:	7011      	strb	r1, [r2, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	121b      	asrs	r3, r3, #8
 80041b0:	b299      	uxth	r1, r3
 80041b2:	4b39      	ldr	r3, [pc, #228]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 80041b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta & 0xFF;
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	b2d1      	uxtb	r1, r2
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80041c4:	7011      	strb	r1, [r2, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	b299      	uxth	r1, r3
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 80041d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <I2C1_EV_IRQHandler+0xe78>)
 80041e0:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
			break;
 80041e8:	e10a      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 109:
			yLastMaybeSend = y;
 80041ea:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <I2C1_EV_IRQHandler+0xe8c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <I2C1_EV_IRQHandler+0xe90>)
 80041f0:	6013      	str	r3, [r2, #0]
			delta  = yLastMaybeSend-yLastSend;
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <I2C1_EV_IRQHandler+0xe90>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <I2C1_EV_IRQHandler+0xe94>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 80041fe:	6013      	str	r3, [r2, #0]
			I2C1_BufferIndex = 0;
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 24;
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	b2d1      	uxtb	r1, r2
 8004210:	4a20      	ldr	r2, [pc, #128]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004212:	7011      	strb	r1, [r2, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	161b      	asrs	r3, r3, #24
 800421c:	b299      	uxth	r1, r3
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 8004220:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 16;
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	b2d1      	uxtb	r1, r2
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004230:	7011      	strb	r1, [r2, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	141b      	asrs	r3, r3, #16
 800423a:	b299      	uxth	r1, r3
 800423c:	4b16      	ldr	r3, [pc, #88]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 800423e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 8;
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	b2d1      	uxtb	r1, r2
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800424e:	7011      	strb	r1, [r2, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	121b      	asrs	r3, r3, #8
 8004258:	b299      	uxth	r1, r3
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 800425c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta & 0xFF;
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	b2d1      	uxtb	r1, r2
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800426c:	7011      	strb	r1, [r2, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <I2C1_EV_IRQHandler+0xe88>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b299      	uxth	r1, r3
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <I2C1_EV_IRQHandler+0xe70>)
 800427c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <I2C1_EV_IRQHandler+0xe78>)
 8004288:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 800428a:	4b02      	ldr	r3, [pc, #8]	; (8004294 <I2C1_EV_IRQHandler+0xe6c>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
			break;
 8004290:	e0b6      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
 8004292:	bf00      	nop
 8004294:	20000178 	.word	0x20000178
 8004298:	20000164 	.word	0x20000164
 800429c:	200000d4 	.word	0x200000d4
 80042a0:	20000179 	.word	0x20000179
 80042a4:	200000d8 	.word	0x200000d8
 80042a8:	200000f0 	.word	0x200000f0
 80042ac:	200000e4 	.word	0x200000e4
 80042b0:	2000017c 	.word	0x2000017c
 80042b4:	200000dc 	.word	0x200000dc
 80042b8:	200000f4 	.word	0x200000f4
 80042bc:	200000e8 	.word	0x200000e8
		case 110:
			zLastMaybeSend = z;
 80042c0:	4b86      	ldr	r3, [pc, #536]	; (80044dc <I2C1_EV_IRQHandler+0x10b4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a86      	ldr	r2, [pc, #536]	; (80044e0 <I2C1_EV_IRQHandler+0x10b8>)
 80042c6:	6013      	str	r3, [r2, #0]
			delta = zLastMaybeSend-zLastSend;
 80042c8:	4b85      	ldr	r3, [pc, #532]	; (80044e0 <I2C1_EV_IRQHandler+0x10b8>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <I2C1_EV_IRQHandler+0x10bc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	4a85      	ldr	r2, [pc, #532]	; (80044e8 <I2C1_EV_IRQHandler+0x10c0>)
 80042d4:	6013      	str	r3, [r2, #0]
			I2C1_BufferIndex = 0;
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 24;
 80042dc:	4b83      	ldr	r3, [pc, #524]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	b2d1      	uxtb	r1, r2
 80042e6:	4a81      	ldr	r2, [pc, #516]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80042e8:	7011      	strb	r1, [r2, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <I2C1_EV_IRQHandler+0x10c0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	161b      	asrs	r3, r3, #24
 80042f2:	b299      	uxth	r1, r3
 80042f4:	4b7e      	ldr	r3, [pc, #504]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 80042f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 16;
 80042fa:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	b2d1      	uxtb	r1, r2
 8004304:	4a79      	ldr	r2, [pc, #484]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004306:	7011      	strb	r1, [r2, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b77      	ldr	r3, [pc, #476]	; (80044e8 <I2C1_EV_IRQHandler+0x10c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	141b      	asrs	r3, r3, #16
 8004310:	b299      	uxth	r1, r3
 8004312:	4b77      	ldr	r3, [pc, #476]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 8004314:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta >> 8;
 8004318:	4b74      	ldr	r3, [pc, #464]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	b2d1      	uxtb	r1, r2
 8004322:	4a72      	ldr	r2, [pc, #456]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004324:	7011      	strb	r1, [r2, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <I2C1_EV_IRQHandler+0x10c0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	121b      	asrs	r3, r3, #8
 800432e:	b299      	uxth	r1, r3
 8004330:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 8004332:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_Buffer[I2C1_BufferIndex++] = delta & 0xFF;
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	b2d1      	uxtb	r1, r2
 8004340:	4a6a      	ldr	r2, [pc, #424]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004342:	7011      	strb	r1, [r2, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <I2C1_EV_IRQHandler+0x10c0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	b299      	uxth	r1, r3
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 8004352:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 8004356:	4b65      	ldr	r3, [pc, #404]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <I2C1_EV_IRQHandler+0x10cc>)
 800435e:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8004360:	4b62      	ldr	r3, [pc, #392]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
			break;
 8004366:	e04b      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 254:
			I2C1_BufferIndex = 0;
 8004368:	4b60      	ldr	r3, [pc, #384]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = motorTestValue & 0xFF;
 800436e:	4b5f      	ldr	r3, [pc, #380]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	b2d1      	uxtb	r1, r2
 8004378:	4a5c      	ldr	r2, [pc, #368]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800437a:	7011      	strb	r1, [r2, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b5e      	ldr	r3, [pc, #376]	; (80044f8 <I2C1_EV_IRQHandler+0x10d0>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	b299      	uxth	r1, r3
 8004386:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 8004388:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 800438c:	4b57      	ldr	r3, [pc, #348]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <I2C1_EV_IRQHandler+0x10cc>)
 8004394:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 8004396:	4b55      	ldr	r3, [pc, #340]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
			break;
 800439c:	e030      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 255:
			I2C1_BufferIndex = 0;
 800439e:	4b53      	ldr	r3, [pc, #332]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
			I2C1_Buffer[I2C1_BufferIndex++] = slave_address & 0xFF;
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	b2d1      	uxtb	r1, r2
 80043ae:	4a4f      	ldr	r2, [pc, #316]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80043b0:	7011      	strb	r1, [r2, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b4e      	ldr	r3, [pc, #312]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 80043b6:	2111      	movs	r1, #17
 80043b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			I2C1_NumberBytesToSend = I2C1_BufferIndex;
 80043bc:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <I2C1_EV_IRQHandler+0x10cc>)
 80043c4:	701a      	strb	r2, [r3, #0]
			I2C1_BufferIndex = 0;
 80043c6:	4b49      	ldr	r3, [pc, #292]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
			break;
 80043cc:	e018      	b.n	8004400 <I2C1_EV_IRQHandler+0xfd8>
		case 5:
		case 6:
			if (I2C1_BufferIndex == 3)
				getMotor(I2C1_Buffer[0])->setSpeedMotor(
						I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			break;
 80043ce:	bf00      	nop
 80043d0:	f7ff b89e 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				dir = FORWARD;
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
				obnov = true;
				chodNaPoziciu = false;
			}
			break;
 80043d4:	bf00      	nop
 80043d6:	f7ff b89b 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				dir = BACKWARD;
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
				obnov = true;
				chodNaPoziciu = false;
			}
			break;
 80043da:	bf00      	nop
 80043dc:	f7ff b898 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				dir = ROTATE_CLOCKWISE;
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
				obnov = true;
				chodNaPoziciu = false;
			}
			break;
 80043e0:	bf00      	nop
 80043e2:	f7ff b895 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				dir = ROTATE_ANTICLOCKWISE;
				mmPerSec = I2C1_Buffer[1] << 8 | I2C1_Buffer[2];
				obnov = true;
				chodNaPoziciu = false;
			}
			break;
 80043e6:	bf00      	nop
 80043e8:	f7ff b892 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				setLed(1, (I2C1_Buffer[1] & (1 << 3)) == (1 << 3) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 4)) == (1 << 4) ? ON : OFF);
				setLed(2, (I2C1_Buffer[1] & (1 << 5)) == (1 << 5) ? ON : OFF,
						(I2C1_Buffer[1] & (1 << 6)) == (1 << 6) ? ON : OFF);
			}
			break;
 80043ec:	bf00      	nop
 80043ee:	f7ff b88f 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
		case 13:
			if (I2C1_BufferIndex == 3) {
				setServo(I2C1_Buffer[1] << 8 | I2C1_Buffer[2]);
			}
			break;
 80043f2:	bf00      	nop
 80043f4:	f7ff b88c 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
			if (I2C1_BufferIndex == 3) {
				chodNaPoziciu = false;
				yawPozadovane = (double) (I2C1_Buffer[1] << 8 | I2C1_Buffer[2])
						/ 10000;
			}
			break;
 80043f8:	bf00      	nop
 80043fa:	f7ff b889 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
				distancePozadovane |= I2C1_Buffer[1] << 24;
				distancePozadovane |= I2C1_Buffer[2] << 16;
				distancePozadovane |= I2C1_Buffer[3] << 8;
				distancePozadovane |= I2C1_Buffer[4];
			}
			break;
 80043fe:	bf00      	nop
			}
		}
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 8004400:	f7ff b886 	b.w	8003510 <I2C1_EV_IRQHandler+0xe8>
			break;
		}
	}

	//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 8004404:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 8004406:	8a9b      	ldrh	r3, [r3, #20]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d036      	beq.n	800448a <I2C1_EV_IRQHandler+0x1062>
		if (I2C1_BufferIndex < I2C1_BufferSize) {
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b09      	cmp	r3, #9
 8004424:	bf94      	ite	ls
 8004426:	2301      	movls	r3, #1
 8004428:	2300      	movhi	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00e      	beq.n	800444e <I2C1_EV_IRQHandler+0x1026>
			I2C1->DR = I2C1_Buffer[I2C1_BufferIndex++];
 8004430:	4a32      	ldr	r2, [pc, #200]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 8004432:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	b2c8      	uxtb	r0, r1
 800443c:	492b      	ldr	r1, [pc, #172]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 800443e:	7008      	strb	r0, [r1, #0]
 8004440:	4619      	mov	r1, r3
 8004442:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <I2C1_EV_IRQHandler+0x10c8>)
 8004444:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004448:	b29b      	uxth	r3, r3
 800444a:	8213      	strh	r3, [r2, #16]
 800444c:	e007      	b.n	800445e <I2C1_EV_IRQHandler+0x1036>
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 8004450:	4b2a      	ldr	r3, [pc, #168]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 8004452:	8a9b      	ldrh	r3, [r3, #20]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445a:	b29b      	uxth	r3, r3
 800445c:	8293      	strh	r3, [r2, #20]
		}
		if (I2C1_BufferIndex >= I2C1_NumberBytesToSend) {
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <I2C1_EV_IRQHandler+0x10cc>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	429a      	cmp	r2, r3
 800446c:	bf2c      	ite	cs
 800446e:	2301      	movcs	r3, #1
 8004470:	2300      	movcc	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0c5      	beq.n	8004404 <I2C1_EV_IRQHandler+0xfdc>
			I2C1->SR1 |= I2C_SR1_AF;
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 800447c:	8a9b      	ldrh	r3, [r3, #20]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004484:	b29b      	uxth	r3, r3
 8004486:	8293      	strh	r3, [r2, #20]
			break;
		}
	}

	//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 8004488:	e7bc      	b.n	8004404 <I2C1_EV_IRQHandler+0xfdc>
	//ev3-2
	/*	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_AF) {
	 I2C1->SR1 |= I2C_SR1_AF;
	 }*/

	if (I2C1_Transmitter == 0) {
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <I2C1_EV_IRQHandler+0x10d8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d019      	beq.n	80044d2 <I2C1_EV_IRQHandler+0x10aa>
		//ev4
		while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 800449e:	4b17      	ldr	r3, [pc, #92]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 80044a0:	8a9b      	ldrh	r3, [r3, #20]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C1_EV_IRQHandler+0x10aa>
			I2C1_BufferIndex = 0;
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <I2C1_EV_IRQHandler+0x10c4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
			I2C1->SR1;
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 80044be:	8a9b      	ldrh	r3, [r3, #20]
			I2C1->CR1 |= 0x1;
 80044c0:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <I2C1_EV_IRQHandler+0x10d4>)
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	8013      	strh	r3, [r2, #0]
	 I2C1->SR1 |= I2C_SR1_AF;
	 }*/

	if (I2C1_Transmitter == 0) {
		//ev4
		while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 80044d0:	e7e5      	b.n	800449e <I2C1_EV_IRQHandler+0x1076>
			I2C1_BufferIndex = 0;
			I2C1->SR1;
			I2C1->CR1 |= 0x1;
		}
	}
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	bf00      	nop
 80044dc:	200000e0 	.word	0x200000e0
 80044e0:	200000f8 	.word	0x200000f8
 80044e4:	200000ec 	.word	0x200000ec
 80044e8:	2000017c 	.word	0x2000017c
 80044ec:	20000178 	.word	0x20000178
 80044f0:	20000164 	.word	0x20000164
 80044f4:	20000179 	.word	0x20000179
 80044f8:	200000d7 	.word	0x200000d7
 80044fc:	40005400 	.word	0x40005400
 8004500:	2000017a 	.word	0x2000017a

08004504 <DMA1_Channel5_IRQHandler>:

extern "C" void DMA1_Channel5_IRQHandler(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 8004508:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800450c:	f7fc fed2 	bl	80012b4 <DMA_GetFlagStatus>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d011      	beq.n	8004544 <DMA1_Channel5_IRQHandler+0x40>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 8004520:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004524:	f7fc feee 	bl	8001304 <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 8004528:	2100      	movs	r1, #0
 800452a:	4807      	ldr	r0, [pc, #28]	; (8004548 <DMA1_Channel5_IRQHandler+0x44>)
 800452c:	f7fd fa1a 	bl	8001964 <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 8004530:	2101      	movs	r1, #1
 8004532:	4805      	ldr	r0, [pc, #20]	; (8004548 <DMA1_Channel5_IRQHandler+0x44>)
 8004534:	f7fd f9a8 	bl	8001888 <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 8004538:	2100      	movs	r1, #0
 800453a:	4804      	ldr	r0, [pc, #16]	; (800454c <DMA1_Channel5_IRQHandler+0x48>)
 800453c:	f7fc fe72 	bl	8001224 <DMA_Cmd>
		I2C2_clearReadRegister();
 8004540:	f7fe f902 	bl	8002748 <I2C2_clearReadRegister>
	}
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40005800 	.word	0x40005800
 800454c:	40026058 	.word	0x40026058

08004550 <TIM2_IRQHandler>:

volatile uint8_t timerDone = 0;
long x_last = 0;
long y_last = 0;
extern "C" void TIM2_IRQHandler(void) {
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8004554:	2101      	movs	r1, #1
 8004556:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800455a:	f7fd fdcd 	bl	80020f8 <TIM_GetITStatus>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <TIM2_IRQHandler+0x36>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 800456e:	2101      	movs	r1, #1
 8004570:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004574:	f7fd fdea 	bl	800214c <TIM_ClearITPendingBit>
		timerDone++;
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <TIM2_IRQHandler+0x3c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b02      	ldr	r3, [pc, #8]	; (800458c <TIM2_IRQHandler+0x3c>)
 8004584:	701a      	strb	r2, [r3, #0]
		 I2C1_Init();
		 } else {
		 I2C1_CommunicationByPeriod = 0;
		 }*/
	}
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000180 	.word	0x20000180

08004590 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler(void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	Buttons_Interrupt();
 8004594:	f7fd fe68 	bl	8002268 <Buttons_Interrupt>
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	0000      	movs	r0, r0
	...

080045a0 <main>:

int main(void) {
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	b0a1      	sub	sp, #132	; 0x84
 80045a6:	af02      	add	r7, sp, #8
	for (unsigned int i = 0; i < 100000; i++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	677b      	str	r3, [r7, #116]	; 0x74
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	4aac      	ldr	r2, [pc, #688]	; (8004860 <main+0x2c0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d803      	bhi.n	80045bc <main+0x1c>
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	3301      	adds	r3, #1
 80045b8:	677b      	str	r3, [r7, #116]	; 0x74
 80045ba:	e7f7      	b.n	80045ac <main+0xc>
		;
	InitializePWMServo();
 80045bc:	f7fe fb7e 	bl	8002cbc <InitializePWMServo>
	Leds_Init();
 80045c0:	f7fe f9f6 	bl	80029b0 <Leds_Init>
	Buttons_Init();
 80045c4:	f7fd fdd2 	bl	800216c <Buttons_Init>
	Ultrasonic_init();
 80045c8:	f7fe fc06 	bl	8002dd8 <Ultrasonic_init>

	I2C1_Init();
 80045cc:	f7fe f938 	bl	8002840 <I2C1_Init>
	I2C2_Init();
 80045d0:	f7fd fee0 	bl	8002394 <I2C2_Init>

	motorTestValue = 0;
 80045d4:	4ba3      	ldr	r3, [pc, #652]	; (8004864 <main+0x2c4>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_MOTORS; i++) {
 80045da:	2300      	movs	r3, #0
 80045dc:	673b      	str	r3, [r7, #112]	; 0x70
 80045de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e0:	2b05      	cmp	r3, #5
 80045e2:	dc1d      	bgt.n	8004620 <main+0x80>
		if (getMotor(i + 1)->isTestOk()) {
 80045e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e6:	3301      	adds	r3, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fd47 	bl	800307c <_Z8getMotori>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fb49 	bl	8002c88 <_ZN5Motor8isTestOkEv>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <main+0x78>
			motorTestValue |= (1 << i);
 80045fc:	2201      	movs	r2, #1
 80045fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	b25a      	sxtb	r2, r3
 8004606:	4b97      	ldr	r3, [pc, #604]	; (8004864 <main+0x2c4>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	b25b      	sxtb	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b25b      	sxtb	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b93      	ldr	r3, [pc, #588]	; (8004864 <main+0x2c4>)
 8004616:	701a      	strb	r2, [r3, #0]

	I2C1_Init();
	I2C2_Init();

	motorTestValue = 0;
	for (int i = 0; i < NUMBER_OF_MOTORS; i++) {
 8004618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461a:	3301      	adds	r3, #1
 800461c:	673b      	str	r3, [r7, #112]	; 0x70
 800461e:	e7de      	b.n	80045de <main+0x3e>
			//getMotor(i + 1)->setCurrentRegulator(pCurrent,iCurrent,dCurrent);
		}
	}


	InitializeTimer();
 8004620:	f7fe fd68 	bl	80030f4 <_Z15InitializeTimerv>
	Direction dir_last;
	int16_t mmPerSec_last;

	while (1) {

		roll = getRoll();
 8004624:	f7fe f984 	bl	8002930 <getRoll>
 8004628:	4603      	mov	r3, r0
 800462a:	4618      	mov	r0, r3
 800462c:	f7fb ff0c 	bl	8000448 <__aeabi_f2d>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	498c      	ldr	r1, [pc, #560]	; (8004868 <main+0x2c8>)
 8004636:	e9c1 2300 	strd	r2, r3, [r1]
		pitch = getPitch();
 800463a:	f7fe f98f 	bl	800295c <getPitch>
 800463e:	4603      	mov	r3, r0
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb ff01 	bl	8000448 <__aeabi_f2d>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4988      	ldr	r1, [pc, #544]	; (800486c <main+0x2cc>)
 800464c:	e9c1 2300 	strd	r2, r3, [r1]
		yaw = (yaw + getYaw()) / 2;
 8004650:	f7fe f99a 	bl	8002988 <getYaw>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb fef6 	bl	8000448 <__aeabi_f2d>
 800465c:	4b84      	ldr	r3, [pc, #528]	; (8004870 <main+0x2d0>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f7fb fd93 	bl	800018c <__adddf3>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004676:	f7fc f865 	bl	8000744 <__aeabi_ddiv>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	497c      	ldr	r1, [pc, #496]	; (8004870 <main+0x2d0>)
 8004680:	e9c1 2300 	strd	r2, r3, [r1]
		ultTriger(0);
 8004684:	2000      	movs	r0, #0
 8004686:	f7fe fc21 	bl	8002ecc <ultTriger>

		if (timerDone > 0) {
 800468a:	4b7a      	ldr	r3, [pc, #488]	; (8004874 <main+0x2d4>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 81c4 	beq.w	8004a28 <main+0x488>

			for (int i = 1; i <= NUMBER_OF_MOTORS / 2; i++) {
 80046a0:	2301      	movs	r3, #1
 80046a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	dc13      	bgt.n	80046d2 <main+0x132>
				getMotor(i)->DMADeltaTicksInvoke();
 80046aa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80046ac:	f7fe fce6 	bl	800307c <_Z8getMotori>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fa98 	bl	8002be8 <_ZN5Motor19DMADeltaTicksInvokeEv>
				getMotor(i + 3)->DMADeltaTicksInvoke();
 80046b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ba:	3303      	adds	r3, #3
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fcdd 	bl	800307c <_Z8getMotori>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fa8f 	bl	8002be8 <_ZN5Motor19DMADeltaTicksInvokeEv>
		yaw = (yaw + getYaw()) / 2;
		ultTriger(0);

		if (timerDone > 0) {

			for (int i = 1; i <= NUMBER_OF_MOTORS / 2; i++) {
 80046ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046cc:	3301      	adds	r3, #1
 80046ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d0:	e7e8      	b.n	80046a4 <main+0x104>
				getMotor(i)->DMADeltaTicksInvoke();
				getMotor(i + 3)->DMADeltaTicksInvoke();
			}
			double speeds[6];
			for (int i = 1; i <= NUMBER_OF_MOTORS; i++) {
 80046d2:	2301      	movs	r3, #1
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
 80046d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d8:	2b06      	cmp	r3, #6
 80046da:	dc2e      	bgt.n	800473a <main+0x19a>
				speeds[i - 1] = (getMotor(i)->getDistance()
 80046dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046de:	1e5e      	subs	r6, r3, #1
 80046e0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80046e2:	f7fe fccb 	bl	800307c <_Z8getMotori>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fab1 	bl	8002c50 <_ZN5Motor11getDistanceEv>
						- lastDistance[i - 1]);
 80046ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f0:	3b01      	subs	r3, #1
 80046f2:	4a61      	ldr	r2, [pc, #388]	; (8004878 <main+0x2d8>)
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb fd44 	bl	8000188 <__aeabi_dsub>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	00f1      	lsls	r1, r6, #3
 8004706:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800470a:	4401      	add	r1, r0
 800470c:	3978      	subs	r1, #120	; 0x78
 800470e:	e9c1 2300 	strd	r2, r3, [r1]
				lastDistance[i - 1] = getMotor(i)->getDistance();
 8004712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004714:	1e5e      	subs	r6, r3, #1
 8004716:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004718:	f7fe fcb0 	bl	800307c <_Z8getMotori>
 800471c:	4603      	mov	r3, r0
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fa96 	bl	8002c50 <_ZN5Motor11getDistanceEv>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4853      	ldr	r0, [pc, #332]	; (8004878 <main+0x2d8>)
 800472a:	00f1      	lsls	r1, r6, #3
 800472c:	4401      	add	r1, r0
 800472e:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 1; i <= NUMBER_OF_MOTORS / 2; i++) {
				getMotor(i)->DMADeltaTicksInvoke();
				getMotor(i + 3)->DMADeltaTicksInvoke();
			}
			double speeds[6];
			for (int i = 1; i <= NUMBER_OF_MOTORS; i++) {
 8004732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004734:	3301      	adds	r3, #1
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
 8004738:	e7cd      	b.n	80046d6 <main+0x136>
				speeds[i - 1] = (getMotor(i)->getDistance()
						- lastDistance[i - 1]);
				lastDistance[i - 1] = getMotor(i)->getDistance();
			}

			double vL = getAverageOfSimilaryValues(speeds[0], speeds[1],
 800473a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800473e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004742:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
					speeds[2]);
 8004746:	e9cd 2300 	strd	r2, r3, [sp]
 800474a:	4652      	mov	r2, sl
 800474c:	465b      	mov	r3, fp
 800474e:	f7fe fdab 	bl	80032a8 <_Z26getAverageOfSimilaryValuesddd>
 8004752:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
			double vR = getAverageOfSimilaryValues(speeds[3], speeds[4],
 8004756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800475a:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800475e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
					speeds[5]);
 8004762:	e9cd 2300 	strd	r2, r3, [sp]
 8004766:	4652      	mov	r2, sl
 8004768:	465b      	mov	r3, fp
 800476a:	f7fe fd9d 	bl	80032a8 <_Z26getAverageOfSimilaryValuesddd>
 800476e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			double vT = (vL + vR) / 2;
 8004772:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004776:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800477a:	f7fb fd07 	bl	800018c <__adddf3>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800478e:	f7fb ffd9 	bl	8000744 <__aeabi_ddiv>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

			double omegaT = (vR - vL) / lengthBetweenLeftAndRightWheel;
 800479a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800479e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047a2:	f7fb fcf1 	bl	8000188 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	4b32      	ldr	r3, [pc, #200]	; (800487c <main+0x2dc>)
 80047b4:	f7fb ffc6 	bl	8000744 <__aeabi_ddiv>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			yawEncoders = yawEncoders + omegaT;
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <main+0x2e0>)
 80047c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ca:	f7fb fcdf 	bl	800018c <__adddf3>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	492b      	ldr	r1, [pc, #172]	; (8004880 <main+0x2e0>)
 80047d4:	e9c1 2300 	strd	r2, r3, [r1]
			yaw = yaw * ALFA + yawEncoders * (1 - ALFA);
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <main+0x2d0>)
 80047da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	4b28      	ldr	r3, [pc, #160]	; (8004884 <main+0x2e4>)
 80047e4:	f7fb fe84 	bl	80004f0 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4692      	mov	sl, r2
 80047ee:	469b      	mov	fp, r3
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <main+0x2e0>)
 80047f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <main+0x2e4>)
 80047fc:	f7fb fe78 	bl	80004f0 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4650      	mov	r0, sl
 8004806:	4659      	mov	r1, fp
 8004808:	f7fb fcc0 	bl	800018c <__adddf3>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4917      	ldr	r1, [pc, #92]	; (8004870 <main+0x2d0>)
 8004812:	e9c1 2300 	strd	r2, r3, [r1]
			if (yaw > 2 * M_PI)
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <main+0x2d0>)
 8004818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800481c:	2301      	movs	r3, #1
 800481e:	461e      	mov	r6, r3
 8004820:	a30d      	add	r3, pc, #52	; (adr r3, 8004858 <main+0x2b8>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fc f8f3 	bl	8000a10 <__aeabi_dcmpgt>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <main+0x294>
 8004830:	2300      	movs	r3, #0
 8004832:	461e      	mov	r6, r3
 8004834:	b2f3      	uxtb	r3, r6
 8004836:	2b00      	cmp	r3, #0
 8004838:	d026      	beq.n	8004888 <main+0x2e8>
				yaw -= 2 * M_PI;
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <main+0x2d0>)
 800483c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004840:	a305      	add	r3, pc, #20	; (adr r3, 8004858 <main+0x2b8>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fb fc9f 	bl	8000188 <__aeabi_dsub>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <main+0x2d0>)
 8004850:	e9c1 2300 	strd	r2, r3, [r1]
 8004854:	e038      	b.n	80048c8 <main+0x328>
 8004856:	bf00      	nop
 8004858:	54442d18 	.word	0x54442d18
 800485c:	401921fb 	.word	0x401921fb
 8004860:	0001869f 	.word	0x0001869f
 8004864:	200000d7 	.word	0x200000d7
 8004868:	20000118 	.word	0x20000118
 800486c:	20000120 	.word	0x20000120
 8004870:	20000110 	.word	0x20000110
 8004874:	20000180 	.word	0x20000180
 8004878:	20000128 	.word	0x20000128
 800487c:	406f4000 	.word	0x406f4000
 8004880:	20000158 	.word	0x20000158
 8004884:	3fe00000 	.word	0x3fe00000
			else if (yaw < 0)
 8004888:	4b99      	ldr	r3, [pc, #612]	; (8004af0 <main+0x550>)
 800488a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800488e:	2301      	movs	r3, #1
 8004890:	461e      	mov	r6, r3
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	f7fc f89b 	bl	80009d4 <__aeabi_dcmplt>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <main+0x308>
 80048a4:	2300      	movs	r3, #0
 80048a6:	461e      	mov	r6, r3
 80048a8:	b2f3      	uxtb	r3, r6
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <main+0x328>
				yaw += 2 * M_PI;
 80048ae:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <main+0x550>)
 80048b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048b4:	a38a      	add	r3, pc, #552	; (adr r3, 8004ae0 <main+0x540>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fc67 	bl	800018c <__adddf3>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	498b      	ldr	r1, [pc, #556]	; (8004af0 <main+0x550>)
 80048c4:	e9c1 2300 	strd	r2, r3, [r1]

			x += (long) (vT * cos(yaw));
 80048c8:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <main+0x550>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	f000 faa3 	bl	8004e1c <cos>
 80048d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048da:	f7fb fe09 	bl	80004f0 <__aeabi_dmul>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f7fc f89d 	bl	8000a24 <__aeabi_d2iz>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b81      	ldr	r3, [pc, #516]	; (8004af4 <main+0x554>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	4a80      	ldr	r2, [pc, #512]	; (8004af4 <main+0x554>)
 80048f4:	6013      	str	r3, [r2, #0]
			y += (long) (vT * sin(yaw));
 80048f6:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <main+0x550>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	f000 fac2 	bl	8004e88 <sin>
 8004904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004908:	f7fb fdf2 	bl	80004f0 <__aeabi_dmul>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	f7fc f886 	bl	8000a24 <__aeabi_d2iz>
 8004918:	4602      	mov	r2, r0
 800491a:	4b77      	ldr	r3, [pc, #476]	; (8004af8 <main+0x558>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4413      	add	r3, r2
 8004920:	4a75      	ldr	r2, [pc, #468]	; (8004af8 <main+0x558>)
 8004922:	6013      	str	r3, [r2, #0]
			yawEncoders = yaw;
 8004924:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <main+0x550>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	4974      	ldr	r1, [pc, #464]	; (8004afc <main+0x55c>)
 800492c:	e9c1 2300 	strd	r2, r3, [r1]

			if (chodNaPoziciu) {
 8004930:	4b73      	ldr	r3, [pc, #460]	; (8004b00 <main+0x560>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d073      	beq.n	8004a22 <main+0x482>
				double eAngle = yaw - yawPozadovane;
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <main+0x550>)
 800493c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004940:	4b70      	ldr	r3, [pc, #448]	; (8004b04 <main+0x564>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fc1f 	bl	8000188 <__aeabi_dsub>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				if (fabs(eAngle) > MIN_OK_DELTA_ANGLE) {
 8004952:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800495a:	a363      	add	r3, pc, #396	; (adr r3, 8004ae8 <main+0x548>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	4620      	mov	r0, r4
 8004962:	4629      	mov	r1, r5
 8004964:	f7fc f854 	bl	8000a10 <__aeabi_dcmpgt>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d021      	beq.n	80049b2 <main+0x412>
					//regulator uhla
					int16_t u = eAngle * 100;
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	4b65      	ldr	r3, [pc, #404]	; (8004b08 <main+0x568>)
 8004974:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004978:	f7fb fdba 	bl	80004f0 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	f7fc f84e 	bl	8000a24 <__aeabi_d2iz>
 8004988:	4603      	mov	r3, r0
 800498a:	86fb      	strh	r3, [r7, #54]	; 0x36
					if (eAngle > 0) {
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004998:	f7fc f83a 	bl	8000a10 <__aeabi_dcmpgt>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <main+0x40a>
						bool test = false;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80049a8:	e03b      	b.n	8004a22 <main+0x482>
						//goDirection(ROTATE_ANTICLOCKWISE, u);
					} else {
						bool test = false;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80049b0:	e037      	b.n	8004a22 <main+0x482>
						//goDirection(ROTATE_CLOCKWISE, u * (-1));
					}
				} else {
					if (fabs(distancePozadovane) > MIN_OK_DELTA_DISTANCE) {
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <main+0x56c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fd34 	bl	8000424 <__aeabi_i2d>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4690      	mov	r8, r2
 80049c2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80049c6:	2301      	movs	r3, #1
 80049c8:	461e      	mov	r6, r3
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <main+0x570>)
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	f7fc f81c 	bl	8000a10 <__aeabi_dcmpgt>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <main+0x442>
 80049de:	2300      	movs	r3, #0
 80049e0:	461e      	mov	r6, r3
 80049e2:	b2f3      	uxtb	r3, r6
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01c      	beq.n	8004a22 <main+0x482>
						//regulator vzdialenosti
						int16_t u = distancePozadovane * 0.5;
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <main+0x56c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fb fd19 	bl	8000424 <__aeabi_i2d>
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <main+0x574>)
 80049f8:	f7fb fd7a 	bl	80004f0 <__aeabi_dmul>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fc f80e 	bl	8000a24 <__aeabi_d2iz>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	867b      	strh	r3, [r7, #50]	; 0x32
						if (u > 0){
 8004a0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dd03      	ble.n	8004a1c <main+0x47c>
							bool test = false;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004a1a:	e002      	b.n	8004a22 <main+0x482>
							//goDirection(FORWARD, u);
						}
						else{
							bool test = false;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						//goDirection(STOP, 0);
					}
				}
			}

			timerDone = 0;
 8004a22:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <main+0x578>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
		}
		if (!chodNaPoziciu) {
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <main+0x560>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f083 0301 	eor.w	r3, r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d044      	beq.n	8004ac2 <main+0x522>
			if (dir != dir_last || obnov == true) {
 8004a38:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <main+0x57c>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d104      	bne.n	8004a50 <main+0x4b0>
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <main+0x580>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <main+0x4b4>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <main+0x4b6>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d015      	beq.n	8004a86 <main+0x4e6>
				goDirection(dir, mmPerSec);
 8004a5a:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <main+0x57c>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <main+0x584>)
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b21b      	sxth	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f7fe fbc5 	bl	80031f8 <_Z11goDirection9Directions>
				dir_last = dir;
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <main+0x57c>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				mmPerSec_last = mmPerSec;
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <main+0x584>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
				obnov = false;
 8004a7e:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <main+0x580>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e01d      	b.n	8004ac2 <main+0x522>
			} else if (mmPerSec != mmPerSec_last) {
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <main+0x584>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b21b      	sxth	r3, r3
 8004a8c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <main+0x522>
				goDirection(dir, mmPerSec);
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <main+0x57c>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <main+0x584>)
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe fba3 	bl	80031f8 <_Z11goDirection9Directions>
				dir_last = dir;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <main+0x57c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				mmPerSec_last = mmPerSec;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <main+0x584>)
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
		}
		for (int i = 0; i < 10000; i++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac8:	f242 720f 	movw	r2, #9999	; 0x270f
 8004acc:	4293      	cmp	r3, r2
 8004ace:	f73f ada9 	bgt.w	8004624 <main+0x84>
 8004ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad8:	e7f5      	b.n	8004ac6 <main+0x526>
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w
 8004ae0:	54442d18 	.word	0x54442d18
 8004ae4:	401921fb 	.word	0x401921fb
 8004ae8:	0fedcbaa 	.word	0x0fedcbaa
 8004aec:	3fb65432 	.word	0x3fb65432
 8004af0:	20000110 	.word	0x20000110
 8004af4:	200000d8 	.word	0x200000d8
 8004af8:	200000dc 	.word	0x200000dc
 8004afc:	20000158 	.word	0x20000158
 8004b00:	200000fc 	.word	0x200000fc
 8004b04:	20000100 	.word	0x20000100
 8004b08:	40590000 	.word	0x40590000
 8004b0c:	20000108 	.word	0x20000108
 8004b10:	40340000 	.word	0x40340000
 8004b14:	3fe00000 	.word	0x3fe00000
 8004b18:	20000180 	.word	0x20000180
 8004b1c:	20000021 	.word	0x20000021
 8004b20:	20000020 	.word	0x20000020
 8004b24:	20000160 	.word	0x20000160

08004b28 <_Z41__static_initialization_and_destruction_0ii>:
			;

	}
}
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d146      	bne.n	8004bc6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d141      	bne.n	8004bc6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
#define pCurrent 0.12
#define iCurrent 0.006
#define dCurrent 0

#define NUMBER_OF_MOTORS 6
Motor *motor1 = new Motor(MOTOR1);
 8004b42:	2014      	movs	r0, #20
 8004b44:	f000 f94e 	bl	8004de4 <_Znwj>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7fd ffba 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004b56:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 8004b58:	2014      	movs	r0, #20
 8004b5a:	f000 f943 	bl	8004de4 <_Znwj>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461c      	mov	r4, r3
 8004b62:	2104      	movs	r1, #4
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7fd ffaf 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004b6c:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 8004b6e:	2014      	movs	r0, #20
 8004b70:	f000 f938 	bl	8004de4 <_Znwj>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461c      	mov	r4, r3
 8004b78:	2106      	movs	r1, #6
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7fd ffa4 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004b82:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 8004b84:	2014      	movs	r0, #20
 8004b86:	f000 f92d 	bl	8004de4 <_Znwj>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461c      	mov	r4, r3
 8004b8e:	2108      	movs	r1, #8
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7fd ff99 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004b98:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 8004b9a:	2014      	movs	r0, #20
 8004b9c:	f000 f922 	bl	8004de4 <_Znwj>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	210a      	movs	r1, #10
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7fd ff8e 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004bae:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 8004bb0:	2014      	movs	r0, #20
 8004bb2:	f000 f917 	bl	8004de4 <_Znwj>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	461c      	mov	r4, r3
 8004bba:	210c      	movs	r1, #12
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7fd ff83 	bl	8002ac8 <_ZN5MotorC1Eh>
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004bc4:	601c      	str	r4, [r3, #0]
		}
		for (int i = 0; i < 10000; i++)
			;

	}
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200000bc 	.word	0x200000bc
 8004bd4:	200000c0 	.word	0x200000c0
 8004bd8:	200000c4 	.word	0x200000c4
 8004bdc:	200000c8 	.word	0x200000c8
 8004be0:	200000cc 	.word	0x200000cc
 8004be4:	200000d0 	.word	0x200000d0

08004be8 <_GLOBAL__sub_I_motor1>:
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7ff ff99 	bl	8004b28 <_Z41__static_initialization_and_destruction_0ii>
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004bfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004bfe:	e003      	b.n	8004c08 <LoopCopyDataInit>

08004c00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8004c02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c06:	3104      	adds	r1, #4

08004c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004c08:	480b      	ldr	r0, [pc, #44]	; (8004c38 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8004c0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004c0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004c10:	d3f6      	bcc.n	8004c00 <CopyDataInit>
  ldr r2, =_sbss
 8004c12:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8004c14:	e002      	b.n	8004c1c <LoopFillZerobss>

08004c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004c18:	f842 3b04 	str.w	r3, [r2], #4

08004c1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8004c1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c20:	d3f9      	bcc.n	8004c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c22:	f000 f841 	bl	8004ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c26:	f001 f93b 	bl	8005ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c2a:	f7ff fcb9 	bl	80045a0 <main>
  bx lr
 8004c2e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c30:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8004c34:	08006360 	.word	0x08006360
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8004c38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c3c:	20000088 	.word	0x20000088
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8004c40:	20000088 	.word	0x20000088
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8004c44:	2000019c 	.word	0x2000019c

08004c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c48:	e7fe      	b.n	8004c48 <ADC1_IRQHandler>
	...

08004c4c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8004c5c:	e7fe      	b.n	8004c5c <HardFault_Handler+0x4>
 8004c5e:	bf00      	nop

08004c60 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8004c64:	e7fe      	b.n	8004c64 <MemManage_Handler+0x4>
 8004c66:	bf00      	nop

08004c68 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8004c6c:	e7fe      	b.n	8004c6c <BusFault_Handler+0x4>
 8004c6e:	bf00      	nop

08004c70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8004c74:	e7fe      	b.n	8004c74 <UsageFault_Handler+0x4>
 8004c76:	bf00      	nop

08004c78 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0

}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8004cac:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <SystemInit+0x5c>)
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <SystemInit+0x5c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8004cb8:	4912      	ldr	r1, [pc, #72]	; (8004d04 <SystemInit+0x5c>)
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <SystemInit+0x5c>)
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <SystemInit+0x60>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <SystemInit+0x5c>)
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <SystemInit+0x5c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004cce:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8004cd2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <SystemInit+0x5c>)
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <SystemInit+0x5c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8004ce0:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <SystemInit+0x5c>)
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <SystemInit+0x5c>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8004cea:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <SystemInit+0x5c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8004cf2:	f000 f80d 	bl	8004d10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <SystemInit+0x64>)
 8004cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cfc:	609a      	str	r2, [r3, #8]
#endif
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023800 	.word	0x40023800
 8004d08:	88ffc00c 	.word	0x88ffc00c
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
  __IO uint32_t  MSIStatus = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  if ((RCC->CR & RCC_CR_MSIRDY) != RESET)
 8004d1a:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <SetSysClock+0xc8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <SetSysClock+0x1c>
  {
    MSIStatus = (uint32_t)0x01;
 8004d26:	2301      	movs	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	e001      	b.n	8004d30 <SetSysClock+0x20>
  }
  else
  {
    MSIStatus = (uint32_t)0x00;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	607b      	str	r3, [r7, #4]
  }
   if (MSIStatus == (uint32_t)0x01)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d14b      	bne.n	8004dce <SetSysClock+0xbe>
   {
    /* Flash 0 wait state */
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8004d36:	4a29      	ldr	r2, [pc, #164]	; (8004ddc <SetSysClock+0xcc>)
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <SetSysClock+0xcc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	6013      	str	r3, [r2, #0]
    
    /* Disable Prefetch Buffer */
    FLASH->ACR &= ~FLASH_ACR_PRFTEN;
 8004d42:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <SetSysClock+0xcc>)
 8004d44:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <SetSysClock+0xcc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	6013      	str	r3, [r2, #0]

    /* Disable 64-bit access */
    FLASH->ACR &= ~FLASH_ACR_ACC64;
 8004d4e:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <SetSysClock+0xcc>)
 8004d50:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <SetSysClock+0xcc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004d5a:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <SetSysClock+0xc8>)
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <SetSysClock+0xc8>)
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 2 (1.5 V) */
    PWR->CR = PWR_CR_VOS_1;
 8004d66:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <SetSysClock+0xd0>)
 8004d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d6c:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8004d6e:	bf00      	nop
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <SetSysClock+0xd0>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f9      	bne.n	8004d70 <SetSysClock+0x60>
    {
    }
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <SetSysClock+0xc8>)
 8004d7e:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <SetSysClock+0xc8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <SetSysClock+0xc8>)
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <SetSysClock+0xc8>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8004d8c:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <SetSysClock+0xc8>)
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <SetSysClock+0xc8>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	6093      	str	r3, [r2, #8]
  
    RCC->ICSCR &= (uint32_t)((uint32_t)~(RCC_ICSCR_MSIRANGE));
 8004d94:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <SetSysClock+0xc8>)
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <SetSysClock+0xc8>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d9e:	6053      	str	r3, [r2, #4]
    RCC->ICSCR |= (uint32_t)RCC_ICSCR_MSIRANGE_5;
 8004da0:	4a0d      	ldr	r2, [pc, #52]	; (8004dd8 <SetSysClock+0xc8>)
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <SetSysClock+0xc8>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8004daa:	6053      	str	r3, [r2, #4]

    /* Select MSI as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004dac:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <SetSysClock+0xc8>)
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <SetSysClock+0xc8>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <SetSysClock+0xc8>)
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <SetSysClock+0xc8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	6093      	str	r3, [r2, #8]

    /* Wait till MSI is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_MSI)
 8004dc0:	bf00      	nop
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <SetSysClock+0xc8>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f9      	bne.n	8004dc2 <SetSysClock+0xb2>
  else
  {
    /* If MSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40023c00 	.word	0x40023c00
 8004de0:	40007000 	.word	0x40007000

08004de4 <_Znwj>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	2800      	cmp	r0, #0
 8004de8:	bf14      	ite	ne
 8004dea:	4604      	movne	r4, r0
 8004dec:	2401      	moveq	r4, #1
 8004dee:	4620      	mov	r0, r4
 8004df0:	f001 f87c 	bl	8005eec <malloc>
 8004df4:	b930      	cbnz	r0, 8004e04 <_Znwj+0x20>
 8004df6:	f000 f809 	bl	8004e0c <_ZSt15get_new_handlerv>
 8004dfa:	b908      	cbnz	r0, 8004e00 <_Znwj+0x1c>
 8004dfc:	f001 f849 	bl	8005e92 <abort>
 8004e00:	4780      	blx	r0
 8004e02:	e7f4      	b.n	8004dee <_Znwj+0xa>
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <_ZdlPv>:
 8004e06:	f001 b879 	b.w	8005efc <free>
	...

08004e0c <_ZSt15get_new_handlerv>:
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <_ZSt15get_new_handlerv+0xc>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	f3bf 8f5f 	dmb	sy
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000184 	.word	0x20000184

08004e1c <cos>:
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <cos+0x64>)
 8004e20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e24:	4293      	cmp	r3, r2
 8004e26:	b087      	sub	sp, #28
 8004e28:	dc02      	bgt.n	8004e30 <cos+0x14>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e015      	b.n	8004e5c <cos+0x40>
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <cos+0x68>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	dd04      	ble.n	8004e40 <cos+0x24>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	f7fb f9a5 	bl	8000188 <__aeabi_dsub>
 8004e3e:	e01d      	b.n	8004e7c <cos+0x60>
 8004e40:	aa02      	add	r2, sp, #8
 8004e42:	f000 f85d 	bl	8004f00 <__ieee754_rem_pio2>
 8004e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e4a:	f000 0403 	and.w	r4, r0, #3
 8004e4e:	2c01      	cmp	r4, #1
 8004e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e54:	d005      	beq.n	8004e62 <cos+0x46>
 8004e56:	2c02      	cmp	r4, #2
 8004e58:	d007      	beq.n	8004e6a <cos+0x4e>
 8004e5a:	b95c      	cbnz	r4, 8004e74 <cos+0x58>
 8004e5c:	f000 fa40 	bl	80052e0 <__kernel_cos>
 8004e60:	e00c      	b.n	8004e7c <cos+0x60>
 8004e62:	9400      	str	r4, [sp, #0]
 8004e64:	f000 fe68 	bl	8005b38 <__kernel_sin>
 8004e68:	e001      	b.n	8004e6e <cos+0x52>
 8004e6a:	f000 fa39 	bl	80052e0 <__kernel_cos>
 8004e6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004e72:	e003      	b.n	8004e7c <cos+0x60>
 8004e74:	2401      	movs	r4, #1
 8004e76:	9400      	str	r4, [sp, #0]
 8004e78:	f000 fe5e 	bl	8005b38 <__kernel_sin>
 8004e7c:	b007      	add	sp, #28
 8004e7e:	bd30      	pop	{r4, r5, pc}
 8004e80:	3fe921fb 	.word	0x3fe921fb
 8004e84:	7fefffff 	.word	0x7fefffff

08004e88 <sin>:
 8004e88:	b530      	push	{r4, r5, lr}
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <sin+0x6c>)
 8004e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e90:	4293      	cmp	r3, r2
 8004e92:	b087      	sub	sp, #28
 8004e94:	dc04      	bgt.n	8004ea0 <sin+0x18>
 8004e96:	2300      	movs	r3, #0
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e017      	b.n	8004ed0 <sin+0x48>
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <sin+0x70>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	dd04      	ble.n	8004eb0 <sin+0x28>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	f7fb f96d 	bl	8000188 <__aeabi_dsub>
 8004eae:	e01e      	b.n	8004eee <sin+0x66>
 8004eb0:	aa02      	add	r2, sp, #8
 8004eb2:	f000 f825 	bl	8004f00 <__ieee754_rem_pio2>
 8004eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eba:	f000 0403 	and.w	r4, r0, #3
 8004ebe:	2c01      	cmp	r4, #1
 8004ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec4:	d007      	beq.n	8004ed6 <sin+0x4e>
 8004ec6:	2c02      	cmp	r4, #2
 8004ec8:	d008      	beq.n	8004edc <sin+0x54>
 8004eca:	b964      	cbnz	r4, 8004ee6 <sin+0x5e>
 8004ecc:	2401      	movs	r4, #1
 8004ece:	9400      	str	r4, [sp, #0]
 8004ed0:	f000 fe32 	bl	8005b38 <__kernel_sin>
 8004ed4:	e00b      	b.n	8004eee <sin+0x66>
 8004ed6:	f000 fa03 	bl	80052e0 <__kernel_cos>
 8004eda:	e008      	b.n	8004eee <sin+0x66>
 8004edc:	2401      	movs	r4, #1
 8004ede:	9400      	str	r4, [sp, #0]
 8004ee0:	f000 fe2a 	bl	8005b38 <__kernel_sin>
 8004ee4:	e001      	b.n	8004eea <sin+0x62>
 8004ee6:	f000 f9fb 	bl	80052e0 <__kernel_cos>
 8004eea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004eee:	b007      	add	sp, #28
 8004ef0:	bd30      	pop	{r4, r5, pc}
 8004ef2:	bf00      	nop
 8004ef4:	3fe921fb 	.word	0x3fe921fb
 8004ef8:	7fefffff 	.word	0x7fefffff
 8004efc:	00000000 	.word	0x00000000

08004f00 <__ieee754_rem_pio2>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	4614      	mov	r4, r2
 8004f06:	4ac2      	ldr	r2, [pc, #776]	; (8005210 <__ieee754_rem_pio2+0x310>)
 8004f08:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004f0c:	4592      	cmp	sl, r2
 8004f0e:	b08d      	sub	sp, #52	; 0x34
 8004f10:	468e      	mov	lr, r1
 8004f12:	460d      	mov	r5, r1
 8004f14:	dc06      	bgt.n	8004f24 <__ieee754_rem_pio2+0x24>
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8004f1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004f22:	e157      	b.n	80051d4 <__ieee754_rem_pio2+0x2d4>
 8004f24:	4abb      	ldr	r2, [pc, #748]	; (8005214 <__ieee754_rem_pio2+0x314>)
 8004f26:	4592      	cmp	sl, r2
 8004f28:	dc6e      	bgt.n	8005008 <__ieee754_rem_pio2+0x108>
 8004f2a:	a3ab      	add	r3, pc, #684	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x2d8>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	2900      	cmp	r1, #0
 8004f32:	4db9      	ldr	r5, [pc, #740]	; (8005218 <__ieee754_rem_pio2+0x318>)
 8004f34:	dd33      	ble.n	8004f9e <__ieee754_rem_pio2+0x9e>
 8004f36:	f7fb f927 	bl	8000188 <__aeabi_dsub>
 8004f3a:	45aa      	cmp	sl, r5
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	d010      	beq.n	8004f64 <__ieee754_rem_pio2+0x64>
 8004f42:	a3a7      	add	r3, pc, #668	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x2e0>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb f91e 	bl	8000188 <__aeabi_dsub>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4630      	mov	r0, r6
 8004f52:	e9c4 2300 	strd	r2, r3, [r4]
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb f916 	bl	8000188 <__aeabi_dsub>
 8004f5c:	a3a0      	add	r3, pc, #640	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x2e0>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	e016      	b.n	8004f92 <__ieee754_rem_pio2+0x92>
 8004f64:	a3a0      	add	r3, pc, #640	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x2e8>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f90d 	bl	8000188 <__aeabi_dsub>
 8004f6e:	a3a0      	add	r3, pc, #640	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x2f0>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	f7fb f906 	bl	8000188 <__aeabi_dsub>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4630      	mov	r0, r6
 8004f82:	e9c4 2300 	strd	r2, r3, [r4]
 8004f86:	4639      	mov	r1, r7
 8004f88:	f7fb f8fe 	bl	8000188 <__aeabi_dsub>
 8004f8c:	a398      	add	r3, pc, #608	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x2f0>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb f8f9 	bl	8000188 <__aeabi_dsub>
 8004f96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e196      	b.n	80052cc <__ieee754_rem_pio2+0x3cc>
 8004f9e:	f7fb f8f5 	bl	800018c <__adddf3>
 8004fa2:	45aa      	cmp	sl, r5
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	d010      	beq.n	8004fcc <__ieee754_rem_pio2+0xcc>
 8004faa:	a38d      	add	r3, pc, #564	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x2e0>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f8ec 	bl	800018c <__adddf3>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	e9c4 2300 	strd	r2, r3, [r4]
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	f7fb f8e2 	bl	8000188 <__aeabi_dsub>
 8004fc4:	a386      	add	r3, pc, #536	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x2e0>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	e016      	b.n	8004ffa <__ieee754_rem_pio2+0xfa>
 8004fcc:	a386      	add	r3, pc, #536	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x2e8>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb f8db 	bl	800018c <__adddf3>
 8004fd6:	a386      	add	r3, pc, #536	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x2f0>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	f7fb f8d4 	bl	800018c <__adddf3>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	e9c4 2300 	strd	r2, r3, [r4]
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb f8ca 	bl	8000188 <__aeabi_dsub>
 8004ff4:	a37e      	add	r3, pc, #504	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x2f0>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb f8c7 	bl	800018c <__adddf3>
 8004ffe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005002:	f04f 30ff 	mov.w	r0, #4294967295
 8005006:	e161      	b.n	80052cc <__ieee754_rem_pio2+0x3cc>
 8005008:	4a84      	ldr	r2, [pc, #528]	; (800521c <__ieee754_rem_pio2+0x31c>)
 800500a:	4592      	cmp	sl, r2
 800500c:	f300 80d7 	bgt.w	80051be <__ieee754_rem_pio2+0x2be>
 8005010:	f000 fe44 	bl	8005c9c <fabs>
 8005014:	a378      	add	r3, pc, #480	; (adr r3, 80051f8 <__ieee754_rem_pio2+0x2f8>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	4606      	mov	r6, r0
 800501c:	460f      	mov	r7, r1
 800501e:	f7fb fa67 	bl	80004f0 <__aeabi_dmul>
 8005022:	2200      	movs	r2, #0
 8005024:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <__ieee754_rem_pio2+0x320>)
 8005026:	f7fb f8b1 	bl	800018c <__adddf3>
 800502a:	f7fb fcfb 	bl	8000a24 <__aeabi_d2iz>
 800502e:	4683      	mov	fp, r0
 8005030:	f7fb f9f8 	bl	8000424 <__aeabi_i2d>
 8005034:	a368      	add	r3, pc, #416	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x2d8>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800503e:	f7fb fa57 	bl	80004f0 <__aeabi_dmul>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	f7fb f89d 	bl	8000188 <__aeabi_dsub>
 800504e:	a364      	add	r3, pc, #400	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x2e0>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800505c:	f7fb fa48 	bl	80004f0 <__aeabi_dmul>
 8005060:	f1bb 0f1f 	cmp.w	fp, #31
 8005064:	4680      	mov	r8, r0
 8005066:	4689      	mov	r9, r1
 8005068:	dc06      	bgt.n	8005078 <__ieee754_rem_pio2+0x178>
 800506a:	4b6e      	ldr	r3, [pc, #440]	; (8005224 <__ieee754_rem_pio2+0x324>)
 800506c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	459a      	cmp	sl, r3
 8005076:	d176      	bne.n	8005166 <__ieee754_rem_pio2+0x266>
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb f882 	bl	8000188 <__aeabi_dsub>
 8005084:	460b      	mov	r3, r1
 8005086:	4602      	mov	r2, r0
 8005088:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800508c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005090:	ebc1 010a 	rsb	r1, r1, sl
 8005094:	2910      	cmp	r1, #16
 8005096:	e9c4 2300 	strd	r2, r3, [r4]
 800509a:	dd6f      	ble.n	800517c <__ieee754_rem_pio2+0x27c>
 800509c:	a352      	add	r3, pc, #328	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x2e8>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a6:	f7fb fa23 	bl	80004f0 <__aeabi_dmul>
 80050aa:	4680      	mov	r8, r0
 80050ac:	4689      	mov	r9, r1
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4630      	mov	r0, r6
 80050b4:	4639      	mov	r1, r7
 80050b6:	f7fb f867 	bl	8000188 <__aeabi_dsub>
 80050ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4630      	mov	r0, r6
 80050c4:	4639      	mov	r1, r7
 80050c6:	f7fb f85f 	bl	8000188 <__aeabi_dsub>
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	f7fb f85b 	bl	8000188 <__aeabi_dsub>
 80050d2:	a347      	add	r3, pc, #284	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x2f0>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e0:	f7fb fa06 	bl	80004f0 <__aeabi_dmul>
 80050e4:	4632      	mov	r2, r6
 80050e6:	463b      	mov	r3, r7
 80050e8:	f7fb f84e 	bl	8000188 <__aeabi_dsub>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4680      	mov	r8, r0
 80050f2:	4689      	mov	r9, r1
 80050f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f8:	f7fb f846 	bl	8000188 <__aeabi_dsub>
 80050fc:	460b      	mov	r3, r1
 80050fe:	4602      	mov	r2, r0
 8005100:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005104:	ebc1 0a0a 	rsb	sl, r1, sl
 8005108:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800510c:	e9c4 2300 	strd	r2, r3, [r4]
 8005110:	dd32      	ble.n	8005178 <__ieee754_rem_pio2+0x278>
 8005112:	a33b      	add	r3, pc, #236	; (adr r3, 8005200 <__ieee754_rem_pio2+0x300>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511c:	f7fb f9e8 	bl	80004f0 <__aeabi_dmul>
 8005120:	4680      	mov	r8, r0
 8005122:	4689      	mov	r9, r1
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800512c:	f7fb f82c 	bl	8000188 <__aeabi_dsub>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800513c:	f7fb f824 	bl	8000188 <__aeabi_dsub>
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	f7fb f820 	bl	8000188 <__aeabi_dsub>
 8005148:	a32f      	add	r3, pc, #188	; (adr r3, 8005208 <__ieee754_rem_pio2+0x308>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	4680      	mov	r8, r0
 8005150:	4689      	mov	r9, r1
 8005152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005156:	f7fb f9cb 	bl	80004f0 <__aeabi_dmul>
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	f7fb f813 	bl	8000188 <__aeabi_dsub>
 8005162:	4680      	mov	r8, r0
 8005164:	4689      	mov	r9, r1
 8005166:	4642      	mov	r2, r8
 8005168:	464b      	mov	r3, r9
 800516a:	4630      	mov	r0, r6
 800516c:	4639      	mov	r1, r7
 800516e:	f7fb f80b 	bl	8000188 <__aeabi_dsub>
 8005172:	e9c4 0100 	strd	r0, r1, [r4]
 8005176:	e001      	b.n	800517c <__ieee754_rem_pio2+0x27c>
 8005178:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8005182:	9302      	str	r3, [sp, #8]
 8005184:	9a02      	ldr	r2, [sp, #8]
 8005186:	4653      	mov	r3, sl
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fa fffc 	bl	8000188 <__aeabi_dsub>
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	f7fa fff8 	bl	8000188 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	2d00      	cmp	r5, #0
 800519e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80051a2:	f280 8092 	bge.w	80052ca <__ieee754_rem_pio2+0x3ca>
 80051a6:	9b02      	ldr	r3, [sp, #8]
 80051a8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80051b2:	60a0      	str	r0, [r4, #8]
 80051b4:	6063      	str	r3, [r4, #4]
 80051b6:	60e1      	str	r1, [r4, #12]
 80051b8:	f1cb 0000 	rsb	r0, fp, #0
 80051bc:	e086      	b.n	80052cc <__ieee754_rem_pio2+0x3cc>
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <__ieee754_rem_pio2+0x328>)
 80051c0:	4592      	cmp	sl, r2
 80051c2:	dd33      	ble.n	800522c <__ieee754_rem_pio2+0x32c>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	f7fa ffde 	bl	8000188 <__aeabi_dsub>
 80051cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051d0:	e9c4 0100 	strd	r0, r1, [r4]
 80051d4:	2000      	movs	r0, #0
 80051d6:	e079      	b.n	80052cc <__ieee754_rem_pio2+0x3cc>
 80051d8:	54400000 	.word	0x54400000
 80051dc:	3ff921fb 	.word	0x3ff921fb
 80051e0:	1a626331 	.word	0x1a626331
 80051e4:	3dd0b461 	.word	0x3dd0b461
 80051e8:	1a600000 	.word	0x1a600000
 80051ec:	3dd0b461 	.word	0x3dd0b461
 80051f0:	2e037073 	.word	0x2e037073
 80051f4:	3ba3198a 	.word	0x3ba3198a
 80051f8:	6dc9c883 	.word	0x6dc9c883
 80051fc:	3fe45f30 	.word	0x3fe45f30
 8005200:	2e000000 	.word	0x2e000000
 8005204:	3ba3198a 	.word	0x3ba3198a
 8005208:	252049c1 	.word	0x252049c1
 800520c:	397b839a 	.word	0x397b839a
 8005210:	3fe921fb 	.word	0x3fe921fb
 8005214:	4002d97b 	.word	0x4002d97b
 8005218:	3ff921fb 	.word	0x3ff921fb
 800521c:	413921fb 	.word	0x413921fb
 8005220:	3fe00000 	.word	0x3fe00000
 8005224:	08006178 	.word	0x08006178
 8005228:	7fefffff 	.word	0x7fefffff
 800522c:	ea4f 582a 	mov.w	r8, sl, asr #20
 8005230:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 8005234:	ebaa 5108 	sub.w	r1, sl, r8, lsl #20
 8005238:	460f      	mov	r7, r1
 800523a:	4606      	mov	r6, r0
 800523c:	f7fb fbf2 	bl	8000a24 <__aeabi_d2iz>
 8005240:	f7fb f8f0 	bl	8000424 <__aeabi_i2d>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005250:	f7fa ff9a 	bl	8000188 <__aeabi_dsub>
 8005254:	2200      	movs	r2, #0
 8005256:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <__ieee754_rem_pio2+0x3d4>)
 8005258:	f7fb f94a 	bl	80004f0 <__aeabi_dmul>
 800525c:	460f      	mov	r7, r1
 800525e:	4606      	mov	r6, r0
 8005260:	f7fb fbe0 	bl	8000a24 <__aeabi_d2iz>
 8005264:	f7fb f8de 	bl	8000424 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005274:	f7fa ff88 	bl	8000188 <__aeabi_dsub>
 8005278:	2200      	movs	r2, #0
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <__ieee754_rem_pio2+0x3d4>)
 800527c:	f7fb f938 	bl	80004f0 <__aeabi_dmul>
 8005280:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005284:	af0c      	add	r7, sp, #48	; 0x30
 8005286:	2603      	movs	r6, #3
 8005288:	2200      	movs	r2, #0
 800528a:	2300      	movs	r3, #0
 800528c:	e977 0102 	ldrd	r0, r1, [r7, #-8]!
 8005290:	f106 39ff 	add.w	r9, r6, #4294967295
 8005294:	f7fb fb94 	bl	80009c0 <__aeabi_dcmpeq>
 8005298:	b108      	cbz	r0, 800529e <__ieee754_rem_pio2+0x39e>
 800529a:	464e      	mov	r6, r9
 800529c:	e7f4      	b.n	8005288 <__ieee754_rem_pio2+0x388>
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <__ieee754_rem_pio2+0x3d8>)
 80052a0:	4642      	mov	r2, r8
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	2302      	movs	r3, #2
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4621      	mov	r1, r4
 80052aa:	4633      	mov	r3, r6
 80052ac:	a806      	add	r0, sp, #24
 80052ae:	f000 f8f5 	bl	800549c <__kernel_rem_pio2>
 80052b2:	2d00      	cmp	r5, #0
 80052b4:	da0a      	bge.n	80052cc <__ieee754_rem_pio2+0x3cc>
 80052b6:	6863      	ldr	r3, [r4, #4]
 80052b8:	4240      	negs	r0, r0
 80052ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052be:	6063      	str	r3, [r4, #4]
 80052c0:	68e3      	ldr	r3, [r4, #12]
 80052c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052c6:	60e3      	str	r3, [r4, #12]
 80052c8:	e000      	b.n	80052cc <__ieee754_rem_pio2+0x3cc>
 80052ca:	4658      	mov	r0, fp
 80052cc:	b00d      	add	sp, #52	; 0x34
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	bf00      	nop
 80052d4:	41700000 	.word	0x41700000
 80052d8:	080061f8 	.word	0x080061f8
 80052dc:	00000000 	.word	0x00000000

080052e0 <__kernel_cos>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80052e8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80052ec:	b085      	sub	sp, #20
 80052ee:	4605      	mov	r5, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	4692      	mov	sl, r2
 80052f4:	469b      	mov	fp, r3
 80052f6:	da04      	bge.n	8005302 <__kernel_cos+0x22>
 80052f8:	f7fb fb94 	bl	8000a24 <__aeabi_d2iz>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f000 80a6 	beq.w	800544e <__kernel_cos+0x16e>
 8005302:	462a      	mov	r2, r5
 8005304:	4623      	mov	r3, r4
 8005306:	4628      	mov	r0, r5
 8005308:	4621      	mov	r1, r4
 800530a:	f7fb f8f1 	bl	80004f0 <__aeabi_dmul>
 800530e:	a352      	add	r3, pc, #328	; (adr r3, 8005458 <__kernel_cos+0x178>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	4680      	mov	r8, r0
 8005316:	4689      	mov	r9, r1
 8005318:	f7fb f8ea 	bl	80004f0 <__aeabi_dmul>
 800531c:	a350      	add	r3, pc, #320	; (adr r3, 8005460 <__kernel_cos+0x180>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f7fa ff33 	bl	800018c <__adddf3>
 8005326:	4642      	mov	r2, r8
 8005328:	464b      	mov	r3, r9
 800532a:	f7fb f8e1 	bl	80004f0 <__aeabi_dmul>
 800532e:	a34e      	add	r3, pc, #312	; (adr r3, 8005468 <__kernel_cos+0x188>)
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f7fa ff28 	bl	8000188 <__aeabi_dsub>
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	f7fb f8d8 	bl	80004f0 <__aeabi_dmul>
 8005340:	a34b      	add	r3, pc, #300	; (adr r3, 8005470 <__kernel_cos+0x190>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fa ff21 	bl	800018c <__adddf3>
 800534a:	4642      	mov	r2, r8
 800534c:	464b      	mov	r3, r9
 800534e:	f7fb f8cf 	bl	80004f0 <__aeabi_dmul>
 8005352:	a349      	add	r3, pc, #292	; (adr r3, 8005478 <__kernel_cos+0x198>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fa ff16 	bl	8000188 <__aeabi_dsub>
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	f7fb f8c6 	bl	80004f0 <__aeabi_dmul>
 8005364:	a346      	add	r3, pc, #280	; (adr r3, 8005480 <__kernel_cos+0x1a0>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fa ff0f 	bl	800018c <__adddf3>
 800536e:	464b      	mov	r3, r9
 8005370:	4642      	mov	r2, r8
 8005372:	f7fb f8bd 	bl	80004f0 <__aeabi_dmul>
 8005376:	4b44      	ldr	r3, [pc, #272]	; (8005488 <__kernel_cos+0x1a8>)
 8005378:	e9cd 0100 	strd	r0, r1, [sp]
 800537c:	429f      	cmp	r7, r3
 800537e:	dc26      	bgt.n	80053ce <__kernel_cos+0xee>
 8005380:	2200      	movs	r2, #0
 8005382:	4b42      	ldr	r3, [pc, #264]	; (800548c <__kernel_cos+0x1ac>)
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fb f8b2 	bl	80004f0 <__aeabi_dmul>
 800538c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005390:	4606      	mov	r6, r0
 8005392:	460f      	mov	r7, r1
 8005394:	4640      	mov	r0, r8
 8005396:	4649      	mov	r1, r9
 8005398:	f7fb f8aa 	bl	80004f0 <__aeabi_dmul>
 800539c:	4652      	mov	r2, sl
 800539e:	4680      	mov	r8, r0
 80053a0:	4689      	mov	r9, r1
 80053a2:	465b      	mov	r3, fp
 80053a4:	4628      	mov	r0, r5
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7fb f8a2 	bl	80004f0 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4640      	mov	r0, r8
 80053b2:	4649      	mov	r1, r9
 80053b4:	f7fa fee8 	bl	8000188 <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4630      	mov	r0, r6
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fa fee2 	bl	8000188 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	2000      	movs	r0, #0
 80053ca:	4931      	ldr	r1, [pc, #196]	; (8005490 <__kernel_cos+0x1b0>)
 80053cc:	e03c      	b.n	8005448 <__kernel_cos+0x168>
 80053ce:	4b31      	ldr	r3, [pc, #196]	; (8005494 <__kernel_cos+0x1b4>)
 80053d0:	2000      	movs	r0, #0
 80053d2:	429f      	cmp	r7, r3
 80053d4:	bfdf      	itttt	le
 80053d6:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80053da:	2200      	movle	r2, #0
 80053dc:	4616      	movle	r6, r2
 80053de:	461f      	movle	r7, r3
 80053e0:	bfc4      	itt	gt
 80053e2:	4f2d      	ldrgt	r7, [pc, #180]	; (8005498 <__kernel_cos+0x1b8>)
 80053e4:	2600      	movgt	r6, #0
 80053e6:	4632      	mov	r2, r6
 80053e8:	463b      	mov	r3, r7
 80053ea:	4929      	ldr	r1, [pc, #164]	; (8005490 <__kernel_cos+0x1b0>)
 80053ec:	f7fa fecc 	bl	8000188 <__aeabi_dsub>
 80053f0:	2200      	movs	r2, #0
 80053f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <__kernel_cos+0x1ac>)
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb f878 	bl	80004f0 <__aeabi_dmul>
 8005400:	4632      	mov	r2, r6
 8005402:	463b      	mov	r3, r7
 8005404:	f7fa fec0 	bl	8000188 <__aeabi_dsub>
 8005408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	f7fb f86c 	bl	80004f0 <__aeabi_dmul>
 8005418:	4652      	mov	r2, sl
 800541a:	4680      	mov	r8, r0
 800541c:	4689      	mov	r9, r1
 800541e:	465b      	mov	r3, fp
 8005420:	4628      	mov	r0, r5
 8005422:	4621      	mov	r1, r4
 8005424:	f7fb f864 	bl	80004f0 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fa feaa 	bl	8000188 <__aeabi_dsub>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fa fea4 	bl	8000188 <__aeabi_dsub>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005448:	f7fa fe9e 	bl	8000188 <__aeabi_dsub>
 800544c:	e001      	b.n	8005452 <__kernel_cos+0x172>
 800544e:	4910      	ldr	r1, [pc, #64]	; (8005490 <__kernel_cos+0x1b0>)
 8005450:	2000      	movs	r0, #0
 8005452:	b005      	add	sp, #20
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	be8838d4 	.word	0xbe8838d4
 800545c:	bda8fae9 	.word	0xbda8fae9
 8005460:	bdb4b1c4 	.word	0xbdb4b1c4
 8005464:	3e21ee9e 	.word	0x3e21ee9e
 8005468:	809c52ad 	.word	0x809c52ad
 800546c:	3e927e4f 	.word	0x3e927e4f
 8005470:	19cb1590 	.word	0x19cb1590
 8005474:	3efa01a0 	.word	0x3efa01a0
 8005478:	16c15177 	.word	0x16c15177
 800547c:	3f56c16c 	.word	0x3f56c16c
 8005480:	5555554c 	.word	0x5555554c
 8005484:	3fa55555 	.word	0x3fa55555
 8005488:	3fd33332 	.word	0x3fd33332
 800548c:	3fe00000 	.word	0x3fe00000
 8005490:	3ff00000 	.word	0x3ff00000
 8005494:	3fe90000 	.word	0x3fe90000
 8005498:	3fd20000 	.word	0x3fd20000

0800549c <__kernel_rem_pio2>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80054a4:	9307      	str	r3, [sp, #28]
 80054a6:	9106      	str	r1, [sp, #24]
 80054a8:	4bb1      	ldr	r3, [pc, #708]	; (8005770 <__kernel_rem_pio2+0x2d4>)
 80054aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80054ac:	2418      	movs	r4, #24
 80054ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80054b2:	9009      	str	r0, [sp, #36]	; 0x24
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	9b07      	ldr	r3, [sp, #28]
 80054b8:	ae1e      	add	r6, sp, #120	; 0x78
 80054ba:	3b01      	subs	r3, #1
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	1ed3      	subs	r3, r2, #3
 80054c0:	fb93 f4f4 	sdiv	r4, r3, r4
 80054c4:	f06f 0317 	mvn.w	r3, #23
 80054c8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80054cc:	fb04 3303 	mla	r3, r4, r3, r3
 80054d0:	eb03 0a02 	add.w	sl, r3, r2
 80054d4:	9b00      	ldr	r3, [sp, #0]
 80054d6:	9a04      	ldr	r2, [sp, #16]
 80054d8:	2500      	movs	r5, #0
 80054da:	eb03 0802 	add.w	r8, r3, r2
 80054de:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80054e0:	1aa7      	subs	r7, r4, r2
 80054e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80054e6:	4545      	cmp	r5, r8
 80054e8:	dc0c      	bgt.n	8005504 <__kernel_rem_pio2+0x68>
 80054ea:	42ef      	cmn	r7, r5
 80054ec:	d404      	bmi.n	80054f8 <__kernel_rem_pio2+0x5c>
 80054ee:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054f2:	f7fa ff97 	bl	8000424 <__aeabi_i2d>
 80054f6:	e001      	b.n	80054fc <__kernel_rem_pio2+0x60>
 80054f8:	2000      	movs	r0, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8005500:	3501      	adds	r5, #1
 8005502:	e7f0      	b.n	80054e6 <__kernel_rem_pio2+0x4a>
 8005504:	ab6e      	add	r3, sp, #440	; 0x1b8
 8005506:	9302      	str	r3, [sp, #8]
 8005508:	2600      	movs	r6, #0
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	429e      	cmp	r6, r3
 800550e:	dc25      	bgt.n	800555c <__kernel_rem_pio2+0xc0>
 8005510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f1a3 0b08 	sub.w	fp, r3, #8
 800551a:	9b07      	ldr	r3, [sp, #28]
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	199d      	adds	r5, r3, r6
 8005522:	ab20      	add	r3, sp, #128	; 0x80
 8005524:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005528:	2700      	movs	r7, #0
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	429f      	cmp	r7, r3
 800552e:	dc0f      	bgt.n	8005550 <__kernel_rem_pio2+0xb4>
 8005530:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005534:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
 8005538:	f7fa ffda 	bl	80004f0 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fa fe22 	bl	800018c <__adddf3>
 8005548:	3701      	adds	r7, #1
 800554a:	4680      	mov	r8, r0
 800554c:	4689      	mov	r9, r1
 800554e:	e7ec      	b.n	800552a <__kernel_rem_pio2+0x8e>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	3601      	adds	r6, #1
 8005554:	e9e3 8902 	strd	r8, r9, [r3, #8]!
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	e7d6      	b.n	800550a <__kernel_rem_pio2+0x6e>
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	aa0c      	add	r2, sp, #48	; 0x30
 8005560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005564:	930a      	str	r3, [sp, #40]	; 0x28
 8005566:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005568:	f8dd b000 	ldr.w	fp, [sp]
 800556c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005570:	930b      	str	r3, [sp, #44]	; 0x2c
 8005572:	ab98      	add	r3, sp, #608	; 0x260
 8005574:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005578:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800557c:	f10b 5300 	add.w	r3, fp, #536870912	; 0x20000000
 8005580:	3b01      	subs	r3, #1
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	aa98      	add	r2, sp, #608	; 0x260
 8005586:	eb02 0903 	add.w	r9, r2, r3
 800558a:	9308      	str	r3, [sp, #32]
 800558c:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8005590:	f04f 0800 	mov.w	r8, #0
 8005594:	ebc8 030b 	rsb	r3, r8, fp
 8005598:	2b00      	cmp	r3, #0
 800559a:	dd25      	ble.n	80055e8 <__kernel_rem_pio2+0x14c>
 800559c:	2200      	movs	r2, #0
 800559e:	4b75      	ldr	r3, [pc, #468]	; (8005774 <__kernel_rem_pio2+0x2d8>)
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fa ffa4 	bl	80004f0 <__aeabi_dmul>
 80055a8:	f7fb fa3c 	bl	8000a24 <__aeabi_d2iz>
 80055ac:	f7fa ff3a 	bl	8000424 <__aeabi_i2d>
 80055b0:	2200      	movs	r2, #0
 80055b2:	4b71      	ldr	r3, [pc, #452]	; (8005778 <__kernel_rem_pio2+0x2dc>)
 80055b4:	4606      	mov	r6, r0
 80055b6:	460f      	mov	r7, r1
 80055b8:	f7fa ff9a 	bl	80004f0 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fa fde0 	bl	8000188 <__aeabi_dsub>
 80055c8:	f7fb fa2c 	bl	8000a24 <__aeabi_d2iz>
 80055cc:	ab0c      	add	r3, sp, #48	; 0x30
 80055ce:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80055d2:	4639      	mov	r1, r7
 80055d4:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80055d8:	4630      	mov	r0, r6
 80055da:	f7fa fdd7 	bl	800018c <__adddf3>
 80055de:	f108 0801 	add.w	r8, r8, #1
 80055e2:	4604      	mov	r4, r0
 80055e4:	460d      	mov	r5, r1
 80055e6:	e7d5      	b.n	8005594 <__kernel_rem_pio2+0xf8>
 80055e8:	4652      	mov	r2, sl
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	f000 fbdb 	bl	8005da8 <scalbn>
 80055f2:	2200      	movs	r2, #0
 80055f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	f7fa ff78 	bl	80004f0 <__aeabi_dmul>
 8005600:	f000 fb52 	bl	8005ca8 <floor>
 8005604:	2200      	movs	r2, #0
 8005606:	4b5d      	ldr	r3, [pc, #372]	; (800577c <__kernel_rem_pio2+0x2e0>)
 8005608:	f7fa ff72 	bl	80004f0 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fdb8 	bl	8000188 <__aeabi_dsub>
 8005618:	460d      	mov	r5, r1
 800561a:	4604      	mov	r4, r0
 800561c:	f7fb fa02 	bl	8000a24 <__aeabi_d2iz>
 8005620:	9002      	str	r0, [sp, #8]
 8005622:	f7fa feff 	bl	8000424 <__aeabi_i2d>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4620      	mov	r0, r4
 800562c:	4629      	mov	r1, r5
 800562e:	f7fa fdab 	bl	8000188 <__aeabi_dsub>
 8005632:	f1ba 0f00 	cmp.w	sl, #0
 8005636:	4606      	mov	r6, r0
 8005638:	460f      	mov	r7, r1
 800563a:	dd15      	ble.n	8005668 <__kernel_rem_pio2+0x1cc>
 800563c:	f10b 31ff 	add.w	r1, fp, #4294967295
 8005640:	ab0c      	add	r3, sp, #48	; 0x30
 8005642:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005646:	f1ca 0018 	rsb	r0, sl, #24
 800564a:	9c02      	ldr	r4, [sp, #8]
 800564c:	fa42 f300 	asr.w	r3, r2, r0
 8005650:	441c      	add	r4, r3
 8005652:	4083      	lsls	r3, r0
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f1ca 0017 	rsb	r0, sl, #23
 800565a:	aa0c      	add	r2, sp, #48	; 0x30
 800565c:	9402      	str	r4, [sp, #8]
 800565e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005662:	fa43 f900 	asr.w	r9, r3, r0
 8005666:	e00f      	b.n	8005688 <__kernel_rem_pio2+0x1ec>
 8005668:	d107      	bne.n	800567a <__kernel_rem_pio2+0x1de>
 800566a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800566e:	aa0c      	add	r2, sp, #48	; 0x30
 8005670:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005674:	ea4f 59e0 	mov.w	r9, r0, asr #23
 8005678:	e006      	b.n	8005688 <__kernel_rem_pio2+0x1ec>
 800567a:	2200      	movs	r2, #0
 800567c:	4b40      	ldr	r3, [pc, #256]	; (8005780 <__kernel_rem_pio2+0x2e4>)
 800567e:	f7fb f9bd 	bl	80009fc <__aeabi_dcmpge>
 8005682:	b928      	cbnz	r0, 8005690 <__kernel_rem_pio2+0x1f4>
 8005684:	4681      	mov	r9, r0
 8005686:	e052      	b.n	800572e <__kernel_rem_pio2+0x292>
 8005688:	f1b9 0f00 	cmp.w	r9, #0
 800568c:	dc02      	bgt.n	8005694 <__kernel_rem_pio2+0x1f8>
 800568e:	e04e      	b.n	800572e <__kernel_rem_pio2+0x292>
 8005690:	f04f 0902 	mov.w	r9, #2
 8005694:	2200      	movs	r2, #0
 8005696:	4614      	mov	r4, r2
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	3301      	adds	r3, #1
 800569c:	9302      	str	r3, [sp, #8]
 800569e:	4593      	cmp	fp, r2
 80056a0:	dd11      	ble.n	80056c6 <__kernel_rem_pio2+0x22a>
 80056a2:	ab0c      	add	r3, sp, #48	; 0x30
 80056a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a8:	b91c      	cbnz	r4, 80056b2 <__kernel_rem_pio2+0x216>
 80056aa:	b153      	cbz	r3, 80056c2 <__kernel_rem_pio2+0x226>
 80056ac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80056b0:	e003      	b.n	80056ba <__kernel_rem_pio2+0x21e>
 80056b2:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80056b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80056ba:	a90c      	add	r1, sp, #48	; 0x30
 80056bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80056c0:	2401      	movs	r4, #1
 80056c2:	3201      	adds	r2, #1
 80056c4:	e7eb      	b.n	800569e <__kernel_rem_pio2+0x202>
 80056c6:	f1ba 0f00 	cmp.w	sl, #0
 80056ca:	dd17      	ble.n	80056fc <__kernel_rem_pio2+0x260>
 80056cc:	f1ba 0f01 	cmp.w	sl, #1
 80056d0:	d00a      	beq.n	80056e8 <__kernel_rem_pio2+0x24c>
 80056d2:	f1ba 0f02 	cmp.w	sl, #2
 80056d6:	d111      	bne.n	80056fc <__kernel_rem_pio2+0x260>
 80056d8:	f10b 32ff 	add.w	r2, fp, #4294967295
 80056dc:	ab0c      	add	r3, sp, #48	; 0x30
 80056de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80056e6:	e006      	b.n	80056f6 <__kernel_rem_pio2+0x25a>
 80056e8:	f10b 32ff 	add.w	r2, fp, #4294967295
 80056ec:	ab0c      	add	r3, sp, #48	; 0x30
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80056f6:	a90c      	add	r1, sp, #48	; 0x30
 80056f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80056fc:	f1b9 0f02 	cmp.w	r9, #2
 8005700:	d115      	bne.n	800572e <__kernel_rem_pio2+0x292>
 8005702:	4632      	mov	r2, r6
 8005704:	463b      	mov	r3, r7
 8005706:	2000      	movs	r0, #0
 8005708:	491e      	ldr	r1, [pc, #120]	; (8005784 <__kernel_rem_pio2+0x2e8>)
 800570a:	f7fa fd3d 	bl	8000188 <__aeabi_dsub>
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	b164      	cbz	r4, 800572e <__kernel_rem_pio2+0x292>
 8005714:	4652      	mov	r2, sl
 8005716:	2000      	movs	r0, #0
 8005718:	491a      	ldr	r1, [pc, #104]	; (8005784 <__kernel_rem_pio2+0x2e8>)
 800571a:	f000 fb45 	bl	8005da8 <scalbn>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4630      	mov	r0, r6
 8005724:	4639      	mov	r1, r7
 8005726:	f7fa fd2f 	bl	8000188 <__aeabi_dsub>
 800572a:	4606      	mov	r6, r0
 800572c:	460f      	mov	r7, r1
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fb f943 	bl	80009c0 <__aeabi_dcmpeq>
 800573a:	2800      	cmp	r0, #0
 800573c:	d072      	beq.n	8005824 <__kernel_rem_pio2+0x388>
 800573e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8005742:	460b      	mov	r3, r1
 8005744:	2200      	movs	r2, #0
 8005746:	9800      	ldr	r0, [sp, #0]
 8005748:	4283      	cmp	r3, r0
 800574a:	db05      	blt.n	8005758 <__kernel_rem_pio2+0x2bc>
 800574c:	a80c      	add	r0, sp, #48	; 0x30
 800574e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005752:	3b01      	subs	r3, #1
 8005754:	4302      	orrs	r2, r0
 8005756:	e7f6      	b.n	8005746 <__kernel_rem_pio2+0x2aa>
 8005758:	2a00      	cmp	r2, #0
 800575a:	d157      	bne.n	800580c <__kernel_rem_pio2+0x370>
 800575c:	2501      	movs	r5, #1
 800575e:	f06f 0203 	mvn.w	r2, #3
 8005762:	fb02 f305 	mul.w	r3, r2, r5
 8005766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005768:	58cb      	ldr	r3, [r1, r3]
 800576a:	b96b      	cbnz	r3, 8005788 <__kernel_rem_pio2+0x2ec>
 800576c:	3501      	adds	r5, #1
 800576e:	e7f8      	b.n	8005762 <__kernel_rem_pio2+0x2c6>
 8005770:	08006300 	.word	0x08006300
 8005774:	3e700000 	.word	0x3e700000
 8005778:	41700000 	.word	0x41700000
 800577c:	40200000 	.word	0x40200000
 8005780:	3fe00000 	.word	0x3fe00000
 8005784:	3ff00000 	.word	0x3ff00000
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	aa98      	add	r2, sp, #608	; 0x260
 800578c:	4413      	add	r3, r2
 800578e:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005792:	9b07      	ldr	r3, [sp, #28]
 8005794:	f10b 0701 	add.w	r7, fp, #1
 8005798:	eb03 040b 	add.w	r4, r3, fp
 800579c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80057a0:	f5a4 74f4 	sub.w	r4, r4, #488	; 0x1e8
 80057a4:	445d      	add	r5, fp
 80057a6:	42af      	cmp	r7, r5
 80057a8:	dc2e      	bgt.n	8005808 <__kernel_rem_pio2+0x36c>
 80057aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ac:	f104 0b08 	add.w	fp, r4, #8
 80057b0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80057b4:	f7fa fe36 	bl	8000424 <__aeabi_i2d>
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	2200      	movs	r2, #0
 80057bc:	f1a3 0908 	sub.w	r9, r3, #8
 80057c0:	2300      	movs	r3, #0
 80057c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	3410      	adds	r4, #16
 80057d0:	9b04      	ldr	r3, [sp, #16]
 80057d2:	4598      	cmp	r8, r3
 80057d4:	dc10      	bgt.n	80057f8 <__kernel_rem_pio2+0x35c>
 80057d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80057da:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80057de:	f7fa fe87 	bl	80004f0 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ea:	f7fa fccf 	bl	800018c <__adddf3>
 80057ee:	f108 0801 	add.w	r8, r8, #1
 80057f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f6:	e7eb      	b.n	80057d0 <__kernel_rem_pio2+0x334>
 80057f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80057fc:	3701      	adds	r7, #1
 80057fe:	f846 3f08 	str.w	r3, [r6, #8]!
 8005802:	6074      	str	r4, [r6, #4]
 8005804:	465c      	mov	r4, fp
 8005806:	e7ce      	b.n	80057a6 <__kernel_rem_pio2+0x30a>
 8005808:	46ab      	mov	fp, r5
 800580a:	e6b2      	b.n	8005572 <__kernel_rem_pio2+0xd6>
 800580c:	468b      	mov	fp, r1
 800580e:	f1aa 0a18 	sub.w	sl, sl, #24
 8005812:	ab0c      	add	r3, sp, #48	; 0x30
 8005814:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005818:	bbcb      	cbnz	r3, 800588e <__kernel_rem_pio2+0x3f2>
 800581a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800581e:	f1aa 0a18 	sub.w	sl, sl, #24
 8005822:	e7f6      	b.n	8005812 <__kernel_rem_pio2+0x376>
 8005824:	f1ca 0200 	rsb	r2, sl, #0
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f000 fabc 	bl	8005da8 <scalbn>
 8005830:	2200      	movs	r2, #0
 8005832:	4bb0      	ldr	r3, [pc, #704]	; (8005af4 <__kernel_rem_pio2+0x658>)
 8005834:	4604      	mov	r4, r0
 8005836:	460d      	mov	r5, r1
 8005838:	f7fb f8e0 	bl	80009fc <__aeabi_dcmpge>
 800583c:	b300      	cbz	r0, 8005880 <__kernel_rem_pio2+0x3e4>
 800583e:	2200      	movs	r2, #0
 8005840:	4bad      	ldr	r3, [pc, #692]	; (8005af8 <__kernel_rem_pio2+0x65c>)
 8005842:	4620      	mov	r0, r4
 8005844:	4629      	mov	r1, r5
 8005846:	f7fa fe53 	bl	80004f0 <__aeabi_dmul>
 800584a:	f7fb f8eb 	bl	8000a24 <__aeabi_d2iz>
 800584e:	4606      	mov	r6, r0
 8005850:	f7fa fde8 	bl	8000424 <__aeabi_i2d>
 8005854:	2200      	movs	r2, #0
 8005856:	4ba7      	ldr	r3, [pc, #668]	; (8005af4 <__kernel_rem_pio2+0x658>)
 8005858:	f7fa fe4a 	bl	80004f0 <__aeabi_dmul>
 800585c:	460b      	mov	r3, r1
 800585e:	4602      	mov	r2, r0
 8005860:	4629      	mov	r1, r5
 8005862:	4620      	mov	r0, r4
 8005864:	f7fa fc90 	bl	8000188 <__aeabi_dsub>
 8005868:	f7fb f8dc 	bl	8000a24 <__aeabi_d2iz>
 800586c:	ab0c      	add	r3, sp, #48	; 0x30
 800586e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005872:	f10b 0b01 	add.w	fp, fp, #1
 8005876:	f10a 0a18 	add.w	sl, sl, #24
 800587a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800587e:	e006      	b.n	800588e <__kernel_rem_pio2+0x3f2>
 8005880:	4620      	mov	r0, r4
 8005882:	4629      	mov	r1, r5
 8005884:	f7fb f8ce 	bl	8000a24 <__aeabi_d2iz>
 8005888:	ab0c      	add	r3, sp, #48	; 0x30
 800588a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800588e:	4652      	mov	r2, sl
 8005890:	2000      	movs	r0, #0
 8005892:	499a      	ldr	r1, [pc, #616]	; (8005afc <__kernel_rem_pio2+0x660>)
 8005894:	f000 fa88 	bl	8005da8 <scalbn>
 8005898:	465d      	mov	r5, fp
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80058a2:	ab98      	add	r3, sp, #608	; 0x260
 80058a4:	eb03 0804 	add.w	r8, r3, r4
 80058a8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80058ac:	2d00      	cmp	r5, #0
 80058ae:	db14      	blt.n	80058da <__kernel_rem_pio2+0x43e>
 80058b0:	ab0c      	add	r3, sp, #48	; 0x30
 80058b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b6:	f7fa fdb5 	bl	8000424 <__aeabi_i2d>
 80058ba:	4632      	mov	r2, r6
 80058bc:	463b      	mov	r3, r7
 80058be:	f7fa fe17 	bl	80004f0 <__aeabi_dmul>
 80058c2:	2200      	movs	r2, #0
 80058c4:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80058c8:	4b8b      	ldr	r3, [pc, #556]	; (8005af8 <__kernel_rem_pio2+0x65c>)
 80058ca:	4630      	mov	r0, r6
 80058cc:	4639      	mov	r1, r7
 80058ce:	f7fa fe0f 	bl	80004f0 <__aeabi_dmul>
 80058d2:	3d01      	subs	r5, #1
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	e7e8      	b.n	80058ac <__kernel_rem_pio2+0x410>
 80058da:	f10b 5800 	add.w	r8, fp, #536870912	; 0x20000000
 80058de:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80058e2:	2500      	movs	r5, #0
 80058e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80058e8:	ebc5 030b 	rsb	r3, r5, fp
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	db2b      	blt.n	8005948 <__kernel_rem_pio2+0x4ac>
 80058f0:	4b83      	ldr	r3, [pc, #524]	; (8005b00 <__kernel_rem_pio2+0x664>)
 80058f2:	ebc5 0708 	rsb	r7, r5, r8
 80058f6:	9308      	str	r3, [sp, #32]
 80058f8:	ab70      	add	r3, sp, #448	; 0x1c0
 80058fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	2200      	movs	r2, #0
 8005902:	2300      	movs	r3, #0
 8005904:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005908:	2600      	movs	r6, #0
 800590a:	9b00      	ldr	r3, [sp, #0]
 800590c:	429e      	cmp	r6, r3
 800590e:	dc15      	bgt.n	800593c <__kernel_rem_pio2+0x4a0>
 8005910:	42ae      	cmp	r6, r5
 8005912:	dc13      	bgt.n	800593c <__kernel_rem_pio2+0x4a0>
 8005914:	9907      	ldr	r1, [sp, #28]
 8005916:	9f08      	ldr	r7, [sp, #32]
 8005918:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800591c:	9107      	str	r1, [sp, #28]
 800591e:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 8005922:	9708      	str	r7, [sp, #32]
 8005924:	f7fa fde4 	bl	80004f0 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005930:	f7fa fc2c 	bl	800018c <__adddf3>
 8005934:	3601      	adds	r6, #1
 8005936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800593a:	e7e6      	b.n	800590a <__kernel_rem_pio2+0x46e>
 800593c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005940:	3501      	adds	r5, #1
 8005942:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 8005946:	e7cf      	b.n	80058e8 <__kernel_rem_pio2+0x44c>
 8005948:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800594a:	2b03      	cmp	r3, #3
 800594c:	f200 80eb 	bhi.w	8005b26 <__kernel_rem_pio2+0x68a>
 8005950:	e8df f003 	tbb	[pc, r3]
 8005954:	0208080f 	.word	0x0208080f
 8005958:	ab48      	add	r3, sp, #288	; 0x120
 800595a:	441c      	add	r4, r3
 800595c:	4625      	mov	r5, r4
 800595e:	46a2      	mov	sl, r4
 8005960:	46d8      	mov	r8, fp
 8005962:	e059      	b.n	8005a18 <__kernel_rem_pio2+0x57c>
 8005964:	3408      	adds	r4, #8
 8005966:	ab48      	add	r3, sp, #288	; 0x120
 8005968:	2700      	movs	r7, #0
 800596a:	441c      	add	r4, r3
 800596c:	465d      	mov	r5, fp
 800596e:	463e      	mov	r6, r7
 8005970:	e01e      	b.n	80059b0 <__kernel_rem_pio2+0x514>
 8005972:	2600      	movs	r6, #0
 8005974:	4635      	mov	r5, r6
 8005976:	ab98      	add	r3, sp, #608	; 0x260
 8005978:	441c      	add	r4, r3
 800597a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800597e:	f1bb 0f00 	cmp.w	fp, #0
 8005982:	db0a      	blt.n	800599a <__kernel_rem_pio2+0x4fe>
 8005984:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005988:	4630      	mov	r0, r6
 800598a:	4629      	mov	r1, r5
 800598c:	f7fa fbfe 	bl	800018c <__adddf3>
 8005990:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005994:	4606      	mov	r6, r0
 8005996:	460d      	mov	r5, r1
 8005998:	e7f1      	b.n	800597e <__kernel_rem_pio2+0x4e2>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	d001      	beq.n	80059a4 <__kernel_rem_pio2+0x508>
 80059a0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059a4:	4632      	mov	r2, r6
 80059a6:	462b      	mov	r3, r5
 80059a8:	9906      	ldr	r1, [sp, #24]
 80059aa:	e9c1 2300 	strd	r2, r3, [r1]
 80059ae:	e0ba      	b.n	8005b26 <__kernel_rem_pio2+0x68a>
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	db09      	blt.n	80059c8 <__kernel_rem_pio2+0x52c>
 80059b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059b8:	4638      	mov	r0, r7
 80059ba:	4631      	mov	r1, r6
 80059bc:	f7fa fbe6 	bl	800018c <__adddf3>
 80059c0:	3d01      	subs	r5, #1
 80059c2:	4607      	mov	r7, r0
 80059c4:	460e      	mov	r6, r1
 80059c6:	e7f3      	b.n	80059b0 <__kernel_rem_pio2+0x514>
 80059c8:	f1b9 0f00 	cmp.w	r9, #0
 80059cc:	d002      	beq.n	80059d4 <__kernel_rem_pio2+0x538>
 80059ce:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 80059d2:	e000      	b.n	80059d6 <__kernel_rem_pio2+0x53a>
 80059d4:	4631      	mov	r1, r6
 80059d6:	460b      	mov	r3, r1
 80059d8:	463a      	mov	r2, r7
 80059da:	9906      	ldr	r1, [sp, #24]
 80059dc:	ad4a      	add	r5, sp, #296	; 0x128
 80059de:	e9c1 2300 	strd	r2, r3, [r1]
 80059e2:	a948      	add	r1, sp, #288	; 0x120
 80059e4:	463a      	mov	r2, r7
 80059e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ea:	4633      	mov	r3, r6
 80059ec:	f7fa fbcc 	bl	8000188 <__aeabi_dsub>
 80059f0:	2401      	movs	r4, #1
 80059f2:	45a3      	cmp	fp, r4
 80059f4:	db05      	blt.n	8005a02 <__kernel_rem_pio2+0x566>
 80059f6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80059fa:	f7fa fbc7 	bl	800018c <__adddf3>
 80059fe:	3401      	adds	r4, #1
 8005a00:	e7f7      	b.n	80059f2 <__kernel_rem_pio2+0x556>
 8005a02:	f1b9 0f00 	cmp.w	r9, #0
 8005a06:	d001      	beq.n	8005a0c <__kernel_rem_pio2+0x570>
 8005a08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4602      	mov	r2, r0
 8005a10:	9906      	ldr	r1, [sp, #24]
 8005a12:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005a16:	e086      	b.n	8005b26 <__kernel_rem_pio2+0x68a>
 8005a18:	f1b8 0f00 	cmp.w	r8, #0
 8005a1c:	f1aa 0a08 	sub.w	sl, sl, #8
 8005a20:	dd1e      	ble.n	8005a60 <__kernel_rem_pio2+0x5c4>
 8005a22:	e9da 2300 	ldrd	r2, r3, [sl]
 8005a26:	e9cd 2300 	strd	r2, r3, [sp]
 8005a2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a2e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8005a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a36:	f7fa fba9 	bl	800018c <__adddf3>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a46:	f7fa fb9f 	bl	8000188 <__aeabi_dsub>
 8005a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4e:	f7fa fb9d 	bl	800018c <__adddf3>
 8005a52:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a56:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a5a:	e9ca 6700 	strd	r6, r7, [sl]
 8005a5e:	e7db      	b.n	8005a18 <__kernel_rem_pio2+0x57c>
 8005a60:	46da      	mov	sl, fp
 8005a62:	f1ba 0f01 	cmp.w	sl, #1
 8005a66:	f1a5 0508 	sub.w	r5, r5, #8
 8005a6a:	dd1e      	ble.n	8005aaa <__kernel_rem_pio2+0x60e>
 8005a6c:	e9d5 6700 	ldrd	r6, r7, [r5]
 8005a70:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	e9cd 2300 	strd	r2, r3, [sp]
 8005a7c:	f7fa fb86 	bl	800018c <__adddf3>
 8005a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4630      	mov	r0, r6
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	f7fa fb7c 	bl	8000188 <__aeabi_dsub>
 8005a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a94:	f7fa fb7a 	bl	800018c <__adddf3>
 8005a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aa0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005aa4:	e9c5 2300 	strd	r2, r3, [r5]
 8005aa8:	e7db      	b.n	8005a62 <__kernel_rem_pio2+0x5c6>
 8005aaa:	2600      	movs	r6, #0
 8005aac:	4635      	mov	r5, r6
 8005aae:	3408      	adds	r4, #8
 8005ab0:	f1bb 0f01 	cmp.w	fp, #1
 8005ab4:	dd0a      	ble.n	8005acc <__kernel_rem_pio2+0x630>
 8005ab6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005aba:	4630      	mov	r0, r6
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa fb65 	bl	800018c <__adddf3>
 8005ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460d      	mov	r5, r1
 8005aca:	e7f1      	b.n	8005ab0 <__kernel_rem_pio2+0x614>
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d118      	bne.n	8005b04 <__kernel_rem_pio2+0x668>
 8005ad2:	9a06      	ldr	r2, [sp, #24]
 8005ad4:	ab98      	add	r3, sp, #608	; 0x260
 8005ad6:	e973 0150 	ldrd	r0, r1, [r3, #-320]!	; 0x140
 8005ada:	e9c2 0100 	strd	r0, r1, [r2]
 8005ade:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ae2:	9906      	ldr	r1, [sp, #24]
 8005ae4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	462b      	mov	r3, r5
 8005aec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005af0:	e019      	b.n	8005b26 <__kernel_rem_pio2+0x68a>
 8005af2:	bf00      	nop
 8005af4:	41700000 	.word	0x41700000
 8005af8:	3e700000 	.word	0x3e700000
 8005afc:	3ff00000 	.word	0x3ff00000
 8005b00:	08006308 	.word	0x08006308
 8005b04:	9a06      	ldr	r2, [sp, #24]
 8005b06:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8005b08:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005b10:	6116      	str	r6, [r2, #16]
 8005b12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	6053      	str	r3, [r2, #4]
 8005b18:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8005b1a:	6155      	str	r5, [r2, #20]
 8005b1c:	6093      	str	r3, [r2, #8]
 8005b1e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8005b20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	60d3      	str	r3, [r2, #12]
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	f003 0007 	and.w	r0, r3, #7
 8005b2c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	0000      	movs	r0, r0
	...

08005b38 <__kernel_sin>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8005b42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	468a      	mov	sl, r1
 8005b4e:	da04      	bge.n	8005b5a <__kernel_sin+0x22>
 8005b50:	f7fa ff68 	bl	8000a24 <__aeabi_d2iz>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f000 8081 	beq.w	8005c5c <__kernel_sin+0x124>
 8005b5a:	465a      	mov	r2, fp
 8005b5c:	4653      	mov	r3, sl
 8005b5e:	4658      	mov	r0, fp
 8005b60:	4651      	mov	r1, sl
 8005b62:	f7fa fcc5 	bl	80004f0 <__aeabi_dmul>
 8005b66:	4604      	mov	r4, r0
 8005b68:	460d      	mov	r5, r1
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4658      	mov	r0, fp
 8005b70:	4651      	mov	r1, sl
 8005b72:	f7fa fcbd 	bl	80004f0 <__aeabi_dmul>
 8005b76:	a33c      	add	r3, pc, #240	; (adr r3, 8005c68 <__kernel_sin+0x130>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	4689      	mov	r9, r1
 8005b80:	4620      	mov	r0, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	f7fa fcb4 	bl	80004f0 <__aeabi_dmul>
 8005b88:	a339      	add	r3, pc, #228	; (adr r3, 8005c70 <__kernel_sin+0x138>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fafb 	bl	8000188 <__aeabi_dsub>
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	f7fa fcab 	bl	80004f0 <__aeabi_dmul>
 8005b9a:	a337      	add	r3, pc, #220	; (adr r3, 8005c78 <__kernel_sin+0x140>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa faf4 	bl	800018c <__adddf3>
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	f7fa fca2 	bl	80004f0 <__aeabi_dmul>
 8005bac:	a334      	add	r3, pc, #208	; (adr r3, 8005c80 <__kernel_sin+0x148>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f7fa fae9 	bl	8000188 <__aeabi_dsub>
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	f7fa fc99 	bl	80004f0 <__aeabi_dmul>
 8005bbe:	a332      	add	r3, pc, #200	; (adr r3, 8005c88 <__kernel_sin+0x150>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fa fae2 	bl	800018c <__adddf3>
 8005bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	b99b      	cbnz	r3, 8005bf8 <__kernel_sin+0xc0>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fc8a 	bl	80004f0 <__aeabi_dmul>
 8005bdc:	a32c      	add	r3, pc, #176	; (adr r3, 8005c90 <__kernel_sin+0x158>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f7fa fad1 	bl	8000188 <__aeabi_dsub>
 8005be6:	4642      	mov	r2, r8
 8005be8:	464b      	mov	r3, r9
 8005bea:	f7fa fc81 	bl	80004f0 <__aeabi_dmul>
 8005bee:	465a      	mov	r2, fp
 8005bf0:	4653      	mov	r3, sl
 8005bf2:	f7fa facb 	bl	800018c <__adddf3>
 8005bf6:	e033      	b.n	8005c60 <__kernel_sin+0x128>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <__kernel_sin+0x160>)
 8005bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c00:	f7fa fc76 	bl	80004f0 <__aeabi_dmul>
 8005c04:	4632      	mov	r2, r6
 8005c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa fc6e 	bl	80004f0 <__aeabi_dmul>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1c:	f7fa fab4 	bl	8000188 <__aeabi_dsub>
 8005c20:	4622      	mov	r2, r4
 8005c22:	462b      	mov	r3, r5
 8005c24:	f7fa fc64 	bl	80004f0 <__aeabi_dmul>
 8005c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c2c:	f7fa faac 	bl	8000188 <__aeabi_dsub>
 8005c30:	a317      	add	r3, pc, #92	; (adr r3, 8005c90 <__kernel_sin+0x158>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fc57 	bl	80004f0 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fa9f 	bl	800018c <__adddf3>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4658      	mov	r0, fp
 8005c54:	4651      	mov	r1, sl
 8005c56:	f7fa fa97 	bl	8000188 <__aeabi_dsub>
 8005c5a:	e001      	b.n	8005c60 <__kernel_sin+0x128>
 8005c5c:	4658      	mov	r0, fp
 8005c5e:	4651      	mov	r1, sl
 8005c60:	b005      	add	sp, #20
 8005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	5acfd57c 	.word	0x5acfd57c
 8005c6c:	3de5d93a 	.word	0x3de5d93a
 8005c70:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c74:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c78:	57b1fe7d 	.word	0x57b1fe7d
 8005c7c:	3ec71de3 	.word	0x3ec71de3
 8005c80:	19c161d5 	.word	0x19c161d5
 8005c84:	3f2a01a0 	.word	0x3f2a01a0
 8005c88:	1110f8a6 	.word	0x1110f8a6
 8005c8c:	3f811111 	.word	0x3f811111
 8005c90:	55555549 	.word	0x55555549
 8005c94:	3fc55555 	.word	0x3fc55555
 8005c98:	3fe00000 	.word	0x3fe00000

08005c9c <fabs>:
 8005c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005ca0:	4770      	bx	lr
 8005ca2:	0000      	movs	r0, r0
 8005ca4:	0000      	movs	r0, r0
	...

08005ca8 <floor>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005cb0:	f2a8 37ff 	subw	r7, r8, #1023	; 0x3ff
 8005cb4:	2f13      	cmp	r7, #19
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	dc33      	bgt.n	8005d28 <floor+0x80>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	da15      	bge.n	8005cf0 <floor+0x48>
 8005cc4:	a334      	add	r3, pc, #208	; (adr r3, 8005d98 <floor+0xf0>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	f7fa fa5f 	bl	800018c <__adddf3>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f7fa fe9d 	bl	8000a10 <__aeabi_dcmpgt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d057      	beq.n	8005d8a <floor+0xe2>
 8005cda:	2c00      	cmp	r4, #0
 8005cdc:	da53      	bge.n	8005d86 <floor+0xde>
 8005cde:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ce2:	4333      	orrs	r3, r6
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <floor+0xf8>)
 8005ce6:	f04f 0500 	mov.w	r5, #0
 8005cea:	bf18      	it	ne
 8005cec:	461c      	movne	r4, r3
 8005cee:	e04c      	b.n	8005d8a <floor+0xe2>
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <floor+0xfc>)
 8005cf2:	fa42 f807 	asr.w	r8, r2, r7
 8005cf6:	ea01 0208 	and.w	r2, r1, r8
 8005cfa:	4302      	orrs	r2, r0
 8005cfc:	d048      	beq.n	8005d90 <floor+0xe8>
 8005cfe:	a326      	add	r3, pc, #152	; (adr r3, 8005d98 <floor+0xf0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa42 	bl	800018c <__adddf3>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7fa fe80 	bl	8000a10 <__aeabi_dcmpgt>
 8005d10:	b3d8      	cbz	r0, 8005d8a <floor+0xe2>
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	bfbe      	ittt	lt
 8005d16:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d1a:	fa43 f707 	asrlt.w	r7, r3, r7
 8005d1e:	19e4      	addlt	r4, r4, r7
 8005d20:	ea24 0408 	bic.w	r4, r4, r8
 8005d24:	2500      	movs	r5, #0
 8005d26:	e030      	b.n	8005d8a <floor+0xe2>
 8005d28:	2f33      	cmp	r7, #51	; 0x33
 8005d2a:	dd07      	ble.n	8005d3c <floor+0x94>
 8005d2c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8005d30:	d12e      	bne.n	8005d90 <floor+0xe8>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	f7fa fa29 	bl	800018c <__adddf3>
 8005d3a:	e02b      	b.n	8005d94 <floor+0xec>
 8005d3c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295
 8005d44:	fa22 f808 	lsr.w	r8, r2, r8
 8005d48:	ea10 0f08 	tst.w	r0, r8
 8005d4c:	d020      	beq.n	8005d90 <floor+0xe8>
 8005d4e:	a312      	add	r3, pc, #72	; (adr r3, 8005d98 <floor+0xf0>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fa1a 	bl	800018c <__adddf3>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fe58 	bl	8000a10 <__aeabi_dcmpgt>
 8005d60:	b198      	cbz	r0, 8005d8a <floor+0xe2>
 8005d62:	2c00      	cmp	r4, #0
 8005d64:	da0c      	bge.n	8005d80 <floor+0xd8>
 8005d66:	2f14      	cmp	r7, #20
 8005d68:	d101      	bne.n	8005d6e <floor+0xc6>
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	e008      	b.n	8005d80 <floor+0xd8>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f1c7 0734 	rsb	r7, r7, #52	; 0x34
 8005d74:	fa03 f707 	lsl.w	r7, r3, r7
 8005d78:	443d      	add	r5, r7
 8005d7a:	42ae      	cmp	r6, r5
 8005d7c:	bf88      	it	hi
 8005d7e:	18e4      	addhi	r4, r4, r3
 8005d80:	ea25 0508 	bic.w	r5, r5, r8
 8005d84:	e001      	b.n	8005d8a <floor+0xe2>
 8005d86:	2500      	movs	r5, #0
 8005d88:	462c      	mov	r4, r5
 8005d8a:	4623      	mov	r3, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	e000      	b.n	8005d92 <floor+0xea>
 8005d90:	4630      	mov	r0, r6
 8005d92:	4619      	mov	r1, r3
 8005d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d98:	8800759c 	.word	0x8800759c
 8005d9c:	7e37e43c 	.word	0x7e37e43c
 8005da0:	bff00000 	.word	0xbff00000
 8005da4:	000fffff 	.word	0x000fffff

08005da8 <scalbn>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	4616      	mov	r6, r2
 8005dac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005db0:	4604      	mov	r4, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	460b      	mov	r3, r1
 8005db6:	b98a      	cbnz	r2, 8005ddc <scalbn+0x34>
 8005db8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005dbc:	4303      	orrs	r3, r0
 8005dbe:	d050      	beq.n	8005e62 <scalbn+0xba>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <scalbn+0xd0>)
 8005dc4:	f7fa fb94 	bl	80004f0 <__aeabi_dmul>
 8005dc8:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <scalbn+0xd4>)
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4296      	cmp	r6, r2
 8005dce:	460d      	mov	r5, r1
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	db34      	blt.n	8005e3e <scalbn+0x96>
 8005dd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dd8:	3a36      	subs	r2, #54	; 0x36
 8005dda:	e008      	b.n	8005dee <scalbn+0x46>
 8005ddc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005de0:	42ba      	cmp	r2, r7
 8005de2:	d104      	bne.n	8005dee <scalbn+0x46>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	f7fa f9d0 	bl	800018c <__adddf3>
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005df2:	4432      	add	r2, r6
 8005df4:	428a      	cmp	r2, r1
 8005df6:	dd02      	ble.n	8005dfe <scalbn+0x56>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	e011      	b.n	8005e22 <scalbn+0x7a>
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	dd06      	ble.n	8005e10 <scalbn+0x68>
 8005e02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e0e:	e028      	b.n	8005e62 <scalbn+0xba>
 8005e10:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e14:	da17      	bge.n	8005e46 <scalbn+0x9e>
 8005e16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e1a:	429e      	cmp	r6, r3
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	462b      	mov	r3, r5
 8005e20:	dd08      	ble.n	8005e34 <scalbn+0x8c>
 8005e22:	a111      	add	r1, pc, #68	; (adr r1, 8005e68 <scalbn+0xc0>)
 8005e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e28:	f000 f82c 	bl	8005e84 <copysign>
 8005e2c:	a30e      	add	r3, pc, #56	; (adr r3, 8005e68 <scalbn+0xc0>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	e013      	b.n	8005e5c <scalbn+0xb4>
 8005e34:	a10e      	add	r1, pc, #56	; (adr r1, 8005e70 <scalbn+0xc8>)
 8005e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e3a:	f000 f823 	bl	8005e84 <copysign>
 8005e3e:	a30c      	add	r3, pc, #48	; (adr r3, 8005e70 <scalbn+0xc8>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	e00a      	b.n	8005e5c <scalbn+0xb4>
 8005e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e4a:	3236      	adds	r2, #54	; 0x36
 8005e4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <scalbn+0xd8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f7fa fb48 	bl	80004f0 <__aeabi_dmul>
 8005e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	8800759c 	.word	0x8800759c
 8005e6c:	7e37e43c 	.word	0x7e37e43c
 8005e70:	c2f8f359 	.word	0xc2f8f359
 8005e74:	01a56e1f 	.word	0x01a56e1f
 8005e78:	43500000 	.word	0x43500000
 8005e7c:	ffff3cb0 	.word	0xffff3cb0
 8005e80:	3c900000 	.word	0x3c900000

08005e84 <copysign>:
 8005e84:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	ea42 0103 	orr.w	r1, r2, r3
 8005e90:	4770      	bx	lr

08005e92 <abort>:
 8005e92:	b508      	push	{r3, lr}
 8005e94:	2006      	movs	r0, #6
 8005e96:	f000 f91d 	bl	80060d4 <raise>
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f000 f956 	bl	800614c <_exit>

08005ea0 <__libc_init_array>:
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <__libc_init_array+0x3c>)
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	461e      	mov	r6, r3
 8005ea6:	4c0e      	ldr	r4, [pc, #56]	; (8005ee0 <__libc_init_array+0x40>)
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	1ae4      	subs	r4, r4, r3
 8005eac:	10a4      	asrs	r4, r4, #2
 8005eae:	42a5      	cmp	r5, r4
 8005eb0:	d004      	beq.n	8005ebc <__libc_init_array+0x1c>
 8005eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eb6:	4798      	blx	r3
 8005eb8:	3501      	adds	r5, #1
 8005eba:	e7f8      	b.n	8005eae <__libc_init_array+0xe>
 8005ebc:	f000 f948 	bl	8006150 <_init>
 8005ec0:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <__libc_init_array+0x44>)
 8005ec2:	4c09      	ldr	r4, [pc, #36]	; (8005ee8 <__libc_init_array+0x48>)
 8005ec4:	461e      	mov	r6, r3
 8005ec6:	1ae4      	subs	r4, r4, r3
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2500      	movs	r5, #0
 8005ecc:	42a5      	cmp	r5, r4
 8005ece:	d004      	beq.n	8005eda <__libc_init_array+0x3a>
 8005ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ed4:	4798      	blx	r3
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	e7f8      	b.n	8005ecc <__libc_init_array+0x2c>
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	08006354 	.word	0x08006354
 8005ee0:	08006354 	.word	0x08006354
 8005ee4:	08006354 	.word	0x08006354
 8005ee8:	0800635c 	.word	0x0800635c

08005eec <malloc>:
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <malloc+0xc>)
 8005eee:	4601      	mov	r1, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	f000 b857 	b.w	8005fa4 <_malloc_r>
 8005ef6:	bf00      	nop
 8005ef8:	20000084 	.word	0x20000084

08005efc <free>:
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <free+0xc>)
 8005efe:	4601      	mov	r1, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f000 b803 	b.w	8005f0c <_free_r>
 8005f06:	bf00      	nop
 8005f08:	20000084 	.word	0x20000084

08005f0c <_free_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4605      	mov	r5, r0
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d044      	beq.n	8005f9e <_free_r+0x92>
 8005f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f18:	1f0c      	subs	r4, r1, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfb8      	it	lt
 8005f1e:	18e4      	addlt	r4, r4, r3
 8005f20:	f000 f8f4 	bl	800610c <__malloc_lock>
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	b913      	cbnz	r3, 8005f32 <_free_r+0x26>
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	6014      	str	r4, [r2, #0]
 8005f30:	e030      	b.n	8005f94 <_free_r+0x88>
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d90d      	bls.n	8005f52 <_free_r+0x46>
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	18a0      	adds	r0, r4, r2
 8005f3a:	4283      	cmp	r3, r0
 8005f3c:	bf01      	itttt	eq
 8005f3e:	6818      	ldreq	r0, [r3, #0]
 8005f40:	685b      	ldreq	r3, [r3, #4]
 8005f42:	1812      	addeq	r2, r2, r0
 8005f44:	6022      	streq	r2, [r4, #0]
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	600c      	str	r4, [r1, #0]
 8005f4a:	e023      	b.n	8005f94 <_free_r+0x88>
 8005f4c:	42a2      	cmp	r2, r4
 8005f4e:	d803      	bhi.n	8005f58 <_free_r+0x4c>
 8005f50:	4613      	mov	r3, r2
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	d1f9      	bne.n	8005f4c <_free_r+0x40>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	1819      	adds	r1, r3, r0
 8005f5c:	42a1      	cmp	r1, r4
 8005f5e:	d10b      	bne.n	8005f78 <_free_r+0x6c>
 8005f60:	6821      	ldr	r1, [r4, #0]
 8005f62:	4401      	add	r1, r0
 8005f64:	1858      	adds	r0, r3, r1
 8005f66:	4282      	cmp	r2, r0
 8005f68:	6019      	str	r1, [r3, #0]
 8005f6a:	d113      	bne.n	8005f94 <_free_r+0x88>
 8005f6c:	6810      	ldr	r0, [r2, #0]
 8005f6e:	6852      	ldr	r2, [r2, #4]
 8005f70:	4401      	add	r1, r0
 8005f72:	6019      	str	r1, [r3, #0]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e00d      	b.n	8005f94 <_free_r+0x88>
 8005f78:	d902      	bls.n	8005f80 <_free_r+0x74>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	e009      	b.n	8005f94 <_free_r+0x88>
 8005f80:	6821      	ldr	r1, [r4, #0]
 8005f82:	1860      	adds	r0, r4, r1
 8005f84:	4282      	cmp	r2, r0
 8005f86:	bf01      	itttt	eq
 8005f88:	6810      	ldreq	r0, [r2, #0]
 8005f8a:	6852      	ldreq	r2, [r2, #4]
 8005f8c:	1809      	addeq	r1, r1, r0
 8005f8e:	6021      	streq	r1, [r4, #0]
 8005f90:	6062      	str	r2, [r4, #4]
 8005f92:	605c      	str	r4, [r3, #4]
 8005f94:	4628      	mov	r0, r5
 8005f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9a:	f000 b8b8 	b.w	800610e <__malloc_unlock>
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	2000018c 	.word	0x2000018c

08005fa4 <_malloc_r>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	1ccd      	adds	r5, r1, #3
 8005fa8:	f025 0503 	bic.w	r5, r5, #3
 8005fac:	3508      	adds	r5, #8
 8005fae:	2d0c      	cmp	r5, #12
 8005fb0:	bf38      	it	cc
 8005fb2:	250c      	movcc	r5, #12
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	db01      	blt.n	8005fbe <_malloc_r+0x1a>
 8005fba:	42a9      	cmp	r1, r5
 8005fbc:	d902      	bls.n	8005fc4 <_malloc_r+0x20>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	6033      	str	r3, [r6, #0]
 8005fc2:	e046      	b.n	8006052 <_malloc_r+0xae>
 8005fc4:	f000 f8a2 	bl	800610c <__malloc_lock>
 8005fc8:	4b23      	ldr	r3, [pc, #140]	; (8006058 <_malloc_r+0xb4>)
 8005fca:	681c      	ldr	r4, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4621      	mov	r1, r4
 8005fd0:	b1a1      	cbz	r1, 8005ffc <_malloc_r+0x58>
 8005fd2:	680b      	ldr	r3, [r1, #0]
 8005fd4:	1b5b      	subs	r3, r3, r5
 8005fd6:	d40e      	bmi.n	8005ff6 <_malloc_r+0x52>
 8005fd8:	2b0b      	cmp	r3, #11
 8005fda:	d903      	bls.n	8005fe4 <_malloc_r+0x40>
 8005fdc:	600b      	str	r3, [r1, #0]
 8005fde:	18cc      	adds	r4, r1, r3
 8005fe0:	50cd      	str	r5, [r1, r3]
 8005fe2:	e01e      	b.n	8006022 <_malloc_r+0x7e>
 8005fe4:	428c      	cmp	r4, r1
 8005fe6:	bf0b      	itete	eq
 8005fe8:	6863      	ldreq	r3, [r4, #4]
 8005fea:	684b      	ldrne	r3, [r1, #4]
 8005fec:	6013      	streq	r3, [r2, #0]
 8005fee:	6063      	strne	r3, [r4, #4]
 8005ff0:	bf18      	it	ne
 8005ff2:	460c      	movne	r4, r1
 8005ff4:	e015      	b.n	8006022 <_malloc_r+0x7e>
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	6849      	ldr	r1, [r1, #4]
 8005ffa:	e7e9      	b.n	8005fd0 <_malloc_r+0x2c>
 8005ffc:	4c17      	ldr	r4, [pc, #92]	; (800605c <_malloc_r+0xb8>)
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	b91b      	cbnz	r3, 800600a <_malloc_r+0x66>
 8006002:	4630      	mov	r0, r6
 8006004:	f000 f82c 	bl	8006060 <_sbrk_r>
 8006008:	6020      	str	r0, [r4, #0]
 800600a:	4629      	mov	r1, r5
 800600c:	4630      	mov	r0, r6
 800600e:	f000 f827 	bl	8006060 <_sbrk_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d018      	beq.n	8006048 <_malloc_r+0xa4>
 8006016:	1cc4      	adds	r4, r0, #3
 8006018:	f024 0403 	bic.w	r4, r4, #3
 800601c:	42a0      	cmp	r0, r4
 800601e:	d10d      	bne.n	800603c <_malloc_r+0x98>
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	4630      	mov	r0, r6
 8006024:	f000 f873 	bl	800610e <__malloc_unlock>
 8006028:	f104 000b 	add.w	r0, r4, #11
 800602c:	1d23      	adds	r3, r4, #4
 800602e:	f020 0007 	bic.w	r0, r0, #7
 8006032:	1ac3      	subs	r3, r0, r3
 8006034:	d00e      	beq.n	8006054 <_malloc_r+0xb0>
 8006036:	425a      	negs	r2, r3
 8006038:	50e2      	str	r2, [r4, r3]
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	1a21      	subs	r1, r4, r0
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f80e 	bl	8006060 <_sbrk_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d1eb      	bne.n	8006020 <_malloc_r+0x7c>
 8006048:	230c      	movs	r3, #12
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f85e 	bl	800610e <__malloc_unlock>
 8006052:	2000      	movs	r0, #0
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	bf00      	nop
 8006058:	2000018c 	.word	0x2000018c
 800605c:	20000188 	.word	0x20000188

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4c06      	ldr	r4, [pc, #24]	; (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4605      	mov	r5, r0
 8006068:	4608      	mov	r0, r1
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	f000 f860 	bl	8006130 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000198 	.word	0x20000198

08006080 <_raise_r>:
 8006080:	291f      	cmp	r1, #31
 8006082:	b538      	push	{r3, r4, r5, lr}
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	d904      	bls.n	8006094 <_raise_r+0x14>
 800608a:	2316      	movs	r3, #22
 800608c:	6003      	str	r3, [r0, #0]
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006096:	b112      	cbz	r2, 800609e <_raise_r+0x1e>
 8006098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800609c:	b94b      	cbnz	r3, 80060b2 <_raise_r+0x32>
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 f832 	bl	8006108 <_getpid_r>
 80060a4:	462a      	mov	r2, r5
 80060a6:	4601      	mov	r1, r0
 80060a8:	4620      	mov	r0, r4
 80060aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ae:	f000 b819 	b.w	80060e4 <_kill_r>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d00c      	beq.n	80060d0 <_raise_r+0x50>
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	d103      	bne.n	80060c2 <_raise_r+0x42>
 80060ba:	2316      	movs	r3, #22
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	2001      	movs	r0, #1
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	2400      	movs	r4, #0
 80060c4:	4628      	mov	r0, r5
 80060c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060ca:	4798      	blx	r3
 80060cc:	4620      	mov	r0, r4
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000      	movs	r0, #0
 80060d2:	bd38      	pop	{r3, r4, r5, pc}

080060d4 <raise>:
 80060d4:	4b02      	ldr	r3, [pc, #8]	; (80060e0 <raise+0xc>)
 80060d6:	4601      	mov	r1, r0
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f7ff bfd1 	b.w	8006080 <_raise_r>
 80060de:	bf00      	nop
 80060e0:	20000084 	.word	0x20000084

080060e4 <_kill_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4c07      	ldr	r4, [pc, #28]	; (8006104 <_kill_r+0x20>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4605      	mov	r5, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	f000 f815 	bl	8006120 <_kill>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d102      	bne.n	8006100 <_kill_r+0x1c>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	b103      	cbz	r3, 8006100 <_kill_r+0x1c>
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	bd38      	pop	{r3, r4, r5, pc}
 8006102:	bf00      	nop
 8006104:	20000198 	.word	0x20000198

08006108 <_getpid_r>:
 8006108:	f000 b802 	b.w	8006110 <_getpid>

0800610c <__malloc_lock>:
 800610c:	4770      	bx	lr

0800610e <__malloc_unlock>:
 800610e:	4770      	bx	lr

08006110 <_getpid>:
 8006110:	4b02      	ldr	r3, [pc, #8]	; (800611c <_getpid+0xc>)
 8006112:	2258      	movs	r2, #88	; 0x58
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	4770      	bx	lr
 800611c:	20000198 	.word	0x20000198

08006120 <_kill>:
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <_kill+0xc>)
 8006122:	2258      	movs	r2, #88	; 0x58
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f04f 30ff 	mov.w	r0, #4294967295
 800612a:	4770      	bx	lr
 800612c:	20000198 	.word	0x20000198

08006130 <_sbrk>:
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <_sbrk+0x14>)
 8006132:	4602      	mov	r2, r0
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	b909      	cbnz	r1, 800613c <_sbrk+0xc>
 8006138:	4903      	ldr	r1, [pc, #12]	; (8006148 <_sbrk+0x18>)
 800613a:	6019      	str	r1, [r3, #0]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	4402      	add	r2, r0
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	4770      	bx	lr
 8006144:	20000190 	.word	0x20000190
 8006148:	2000019c 	.word	0x2000019c

0800614c <_exit>:
 800614c:	e7fe      	b.n	800614c <_exit>
	...

08006150 <_init>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr

0800615c <_fini>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr
