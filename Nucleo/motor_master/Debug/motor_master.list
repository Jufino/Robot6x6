
C:\Users\Juraj\Documents\GitHub\Robot6x6\Nucleo\motor_master\Debug\motor_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  080037dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  20000088  08003860  00020088  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000148  08003860  00020148  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  9 .debug_info   000078d3  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000165d  00000000  00000000  00027980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a48  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  00029a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035df  00000000  00000000  0002a388  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003114  00000000  00000000  0002d967  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00030a7b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002ec8  00000000  00000000  00030afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  000339c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00033a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	080037a0 	.word	0x080037a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	080037a0 	.word	0x080037a0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d038      	beq.n	8000b42 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <NVIC_Init+0xb8>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f1c3 0304 	rsb	r3, r3, #4
 8000ae4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	fa42 f303 	asr.w	r3, r2, r3
 8000aee:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	461a      	mov	r2, r3
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	789a      	ldrb	r2, [r3, #2]
 8000b02:	7b7b      	ldrb	r3, [r7, #13]
 8000b04:	4013      	ands	r3, r2
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <NVIC_Init+0xbc>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <NVIC_Init+0xbc>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 031f 	and.w	r3, r3, #31
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b40:	e00f      	b.n	8000b62 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b42:	490b      	ldr	r1, [pc, #44]	; (8000b70 <NVIC_Init+0xbc>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b5a:	f100 0320 	add.w	r3, r0, #32
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b84:	4013      	ands	r3, r2
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <DMA_DeInit+0x140>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d106      	bne.n	8000bb8 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000baa:	4a43      	ldr	r2, [pc, #268]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bac:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f043 030f 	orr.w	r3, r3, #15
 8000bb4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bb6:	e077      	b.n	8000ca8 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a40      	ldr	r2, [pc, #256]	; (8000cbc <DMA_DeInit+0x148>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000bca:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bcc:	e06c      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <DMA_DeInit+0x14c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d106      	bne.n	8000be4 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000bd6:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000be0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000be2:	e061      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <DMA_DeInit+0x150>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d106      	bne.n	8000bfa <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000bec:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <DMA_DeInit+0x144>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000bf6:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bf8:	e056      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <DMA_DeInit+0x154>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d106      	bne.n	8000c10 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c0c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c0e:	e04b      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <DMA_DeInit+0x158>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d106      	bne.n	8000c26 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c22:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c24:	e040      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <DMA_DeInit+0x15c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d106      	bne.n	8000c3c <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <DMA_DeInit+0x144>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000c38:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c3a:	e035      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <DMA_DeInit+0x160>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d106      	bne.n	8000c52 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000c44:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f043 030f 	orr.w	r3, r3, #15
 8000c4e:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c50:	e02a      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <DMA_DeInit+0x168>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d106      	bne.n	8000c68 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c64:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c66:	e01f      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <DMA_DeInit+0x16c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d106      	bne.n	8000c7e <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c7a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c7c:	e014      	b.n	8000ca8 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <DMA_DeInit+0x170>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c90:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c92:	e009      	b.n	8000ca8 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <DMA_DeInit+0x174>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d105      	bne.n	8000ca8 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <DMA_DeInit+0x164>)
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <DMA_DeInit+0x164>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ca6:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40026008 	.word	0x40026008
 8000cb8:	40026000 	.word	0x40026000
 8000cbc:	4002601c 	.word	0x4002601c
 8000cc0:	40026030 	.word	0x40026030
 8000cc4:	40026044 	.word	0x40026044
 8000cc8:	40026058 	.word	0x40026058
 8000ccc:	4002606c 	.word	0x4002606c
 8000cd0:	40026080 	.word	0x40026080
 8000cd4:	40026408 	.word	0x40026408
 8000cd8:	40026400 	.word	0x40026400
 8000cdc:	4002641c 	.word	0x4002641c
 8000ce0:	40026430 	.word	0x40026430
 8000ce4:	40026444 	.word	0x40026444
 8000ce8:	40026458 	.word	0x40026458

08000cec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d0a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000d1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60da      	str	r2, [r3, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000d86:	e006      	b.n	8000d96 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000d90:	4013      	ands	r3, r2
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000dc0:	e006      	b.n	8000dd0 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	601a      	str	r2, [r3, #0]
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <DMA_GetFlagStatus+0x48>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e002      	b.n	8000e04 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <DMA_GetFlagStatus+0x4c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e001      	b.n	8000e18 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40026000 	.word	0x40026000
 8000e28:	40026400 	.word	0x40026400

08000e2c <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <DMA_ClearFlag+0x2c>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000e44:	e002      	b.n	8000e4c <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <DMA_ClearFlag+0x30>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6053      	str	r3, [r2, #4]
  }  
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40026000 	.word	0x40026000
 8000e5c:	40026400 	.word	0x40026400

08000e60 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000e6c:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <EXTI_Init+0xe0>)
 8000e6e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	799b      	ldrb	r3, [r3, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d04f      	beq.n	8000f18 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e78:	4931      	ldr	r1, [pc, #196]	; (8000f40 <EXTI_Init+0xe0>)
 8000e7a:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <EXTI_Init+0xe0>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e88:	492d      	ldr	r1, [pc, #180]	; (8000f40 <EXTI_Init+0xe0>)
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <EXTI_Init+0xe0>)
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	6811      	ldr	r1, [r2, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000eb2:	4923      	ldr	r1, [pc, #140]	; (8000f40 <EXTI_Init+0xe0>)
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <EXTI_Init+0xe0>)
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000ec2:	491f      	ldr	r1, [pc, #124]	; (8000f40 <EXTI_Init+0xe0>)
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <EXTI_Init+0xe0>)
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	795b      	ldrb	r3, [r3, #5]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d10e      	bne.n	8000ef8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000eda:	4919      	ldr	r1, [pc, #100]	; (8000f40 <EXTI_Init+0xe0>)
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <EXTI_Init+0xe0>)
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000ee8:	4915      	ldr	r1, [pc, #84]	; (8000f40 <EXTI_Init+0xe0>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <EXTI_Init+0xe0>)
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ef6:	e01d      	b.n	8000f34 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <EXTI_Init+0xe0>)
 8000efa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	795b      	ldrb	r3, [r3, #5]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	6811      	ldr	r1, [r2, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000f16:	e00d      	b.n	8000f34 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	6811      	ldr	r1, [r2, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	43d2      	mvns	r2, r2
 8000f30:	400a      	ands	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
  }
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40010400 	.word	0x40010400

08000f44 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <EXTI_GetITStatus+0x44>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <EXTI_GetITStatus+0x44>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <EXTI_GetITStatus+0x32>
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e001      	b.n	8000f7a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40010400 	.word	0x40010400

08000f8c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <EXTI_ClearITPendingBit+0x18>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6153      	str	r3, [r2, #20]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e07e      	b.n	80010c2 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d16d      	bne.n	80010bc <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2103      	movs	r1, #3
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	4619      	mov	r1, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <GPIO_Init+0x76>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d136      	bne.n	800108c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2103      	movs	r1, #3
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	795b      	ldrb	r3, [r3, #5]
 800103c:	4619      	mov	r1, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	889b      	ldrh	r3, [r3, #4]
 8001050:	b29a      	uxth	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	4013      	ands	r3, r2
 8001064:	b29a      	uxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	b29b      	uxth	r3, r3
 8001070:	b21a      	sxth	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	799b      	ldrb	r3, [r3, #6]
 8001076:	4619      	mov	r1, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	b29b      	uxth	r3, r3
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	b29b      	uxth	r3, r3
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2103      	movs	r1, #3
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	79db      	ldrb	r3, [r3, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	f67f af7d 	bls.w	8000fc4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80010ca:	bf00      	nop
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010ec:	787a      	ldrb	r2, [r7, #1]
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	210f      	movs	r1, #15
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	ea02 0103 	and.w	r1, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f100 0208 	add.w	r2, r0, #8
 800112e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	b29b      	uxth	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <I2C_DeInit+0x44>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d10a      	bne.n	800118a <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001174:	2101      	movs	r1, #1
 8001176:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800117a:	f000 fb71 	bl	8001860 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800117e:	2100      	movs	r1, #0
 8001180:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001184:	f000 fb6c 	bl	8001860 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8001188:	e009      	b.n	800119e <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800118a:	2101      	movs	r1, #1
 800118c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001190:	f000 fb66 	bl	8001860 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001194:	2100      	movs	r1, #0
 8001196:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800119a:	f000 fb61 	bl	8001860 <RCC_APB1PeriphResetCmd>
  }
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40005400 	.word	0x40005400

080011ac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011ba:	2300      	movs	r3, #0
 80011bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80011be:	2304      	movs	r3, #4
 80011c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80011c2:	4b57      	ldr	r3, [pc, #348]	; (8001320 <I2C_Init+0x174>)
 80011c4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fa0d 	bl	80015f8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <I2C_Init+0x178>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80011ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011f2:	4313      	orrs	r3, r2
 80011f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011fa:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a44      	ldr	r2, [pc, #272]	; (8001328 <I2C_Init+0x17c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d815      	bhi.n	8001246 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800122a:	2b03      	cmp	r3, #3
 800122c:	d801      	bhi.n	8001232 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800122e:	2304      	movs	r3, #4
 8001230:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001236:	4313      	orrs	r3, r2
 8001238:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800123a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800123c:	3301      	adds	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	841a      	strh	r2, [r3, #32]
 8001244:	e040      	b.n	80012c8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	88db      	ldrh	r3, [r3, #6]
 800124a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800124e:	4293      	cmp	r3, r2
 8001250:	d109      	bne.n	8001266 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001264:	e00e      	b.n	8001284 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009a      	lsls	r2, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800127c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800128e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	4313      	orrs	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80012a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <I2C_Init+0x180>)
 80012b4:	fb82 1203 	smull	r1, r2, r2, r3
 80012b8:	1192      	asrs	r2, r2, #6
 80012ba:	17db      	asrs	r3, r3, #31
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012cc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012e6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80012ea:	f023 0302 	bic.w	r3, r3, #2
 80012ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	889a      	ldrh	r2, [r3, #4]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	895b      	ldrh	r3, [r3, #10]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012fe:	4313      	orrs	r3, r2
 8001300:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001306:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	899a      	ldrh	r2, [r3, #12]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	891b      	ldrh	r3, [r3, #8]
 8001310:	4313      	orrs	r3, r2
 8001312:	b29a      	uxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	811a      	strh	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	007a1200 	.word	0x007a1200
 8001324:	431bde83 	.word	0x431bde83
 8001328:	000186a0 	.word	0x000186a0
 800132c:	10624dd3 	.word	0x10624dd3

08001330 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001352:	e007      	b.n	8001364 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	801a      	strh	r2, [r3, #0]
  }
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d008      	beq.n	8001394 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001392:	e007      	b.n	80013a4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	801a      	strh	r2, [r3, #0]
  }
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80013d2:	e007      	b.n	80013e4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	801a      	strh	r2, [r3, #0]
  }
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001412:	e007      	b.n	8001424 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800141e:	b29a      	uxth	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	801a      	strh	r2, [r3, #0]
  }
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
 800143c:	4613      	mov	r3, r2
 800143e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	e003      	b.n	8001458 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	821a      	strh	r2, [r3, #16]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	821a      	strh	r2, [r3, #16]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	889b      	ldrh	r3, [r3, #4]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80014ae:	e007      	b.n	80014c0 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	889b      	ldrh	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	809a      	strh	r2, [r3, #4]
  }
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80014f2:	e009      	b.n	8001508 <I2C_ITConfig+0x3c>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4013      	ands	r3, r2
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	809a      	strh	r2, [r3, #4]
  }
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	8a9b      	ldrh	r3, [r3, #20]
 8001532:	b29b      	uxth	r3, r3
 8001534:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	8b1b      	ldrh	r3, [r3, #24]
 800153a:	b29b      	uxth	r3, r3
 800153c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4313      	orrs	r3, r2
 800154a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800154e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	401a      	ands	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d102      	bne.n	8001562 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800155c:	2301      	movs	r3, #1
 800155e:	75fb      	strb	r3, [r7, #23]
 8001560:	e001      	b.n	8001566 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001566:	7dfb      	ldrb	r3, [r7, #23]
}
 8001568:	4618      	mov	r0, r3
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	8892      	ldrh	r2, [r2, #4]
 800158e:	b292      	uxth	r2, r2
 8001590:	4013      	ands	r3, r2
 8001592:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001596:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800159e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8a9b      	ldrh	r3, [r3, #20]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <I2C_GetITStatus+0x48>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e001      	b.n	80015c0 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015e0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	829a      	strh	r2, [r3, #20]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d865      	bhi.n	80016f4 <RCC_GetClocksFreq+0xfc>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <RCC_GetClocksFreq+0x38>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001665 	.word	0x08001665
 8001634:	080016f5 	.word	0x080016f5
 8001638:	080016f5 	.word	0x080016f5
 800163c:	080016f5 	.word	0x080016f5
 8001640:	08001685 	.word	0x08001685
 8001644:	080016f5 	.word	0x080016f5
 8001648:	080016f5 	.word	0x080016f5
 800164c:	080016f5 	.word	0x080016f5
 8001650:	0800168d 	.word	0x0800168d
 8001654:	080016f5 	.word	0x080016f5
 8001658:	080016f5 	.word	0x080016f5
 800165c:	080016f5 	.word	0x080016f5
 8001660:	08001695 	.word	0x08001695
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800166c:	0b5b      	lsrs	r3, r3, #13
 800166e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
      break;
 8001682:	e047      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a45      	ldr	r2, [pc, #276]	; (800179c <RCC_GetClocksFreq+0x1a4>)
 8001688:	601a      	str	r2, [r3, #0]
      break;
 800168a:	e043      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <RCC_GetClocksFreq+0x1a8>)
 8001690:	601a      	str	r2, [r3, #0]
      break;
 8001692:	e03f      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800169c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016a6:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <RCC_GetClocksFreq+0x1ac>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	0d9b      	lsrs	r3, r3, #22
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4a33      	ldr	r2, [pc, #204]	; (800179c <RCC_GetClocksFreq+0x1a4>)
 80016d0:	fb02 f203 	mul.w	r2, r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80016de:	e019      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <RCC_GetClocksFreq+0x1a8>)
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
      }
      break;
 80016f2:	e00f      	b.n	8001714 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016fc:	0b5b      	lsrs	r3, r3, #13
 80016fe:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	601a      	str	r2, [r3, #0]
      break;
 8001712:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	40da      	lsrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001744:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	40da      	lsrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <RCC_GetClocksFreq+0x1a0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800176c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	0adb      	lsrs	r3, r3, #11
 8001772:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <RCC_GetClocksFreq+0x1b0>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	40da      	lsrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	bf00      	nop
 800178e:	3724      	adds	r7, #36	; 0x24
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	007a1200 	.word	0x007a1200
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2000000c 	.word	0x2000000c

080017ac <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017ca:	e006      	b.n	80017da <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017cc:	4905      	ldr	r1, [pc, #20]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <RCC_AHBPeriphClockCmd+0x38>)
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	61cb      	str	r3, [r1, #28]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40023800 	.word	0x40023800

080017e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001806:	e006      	b.n	8001816 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001808:	4905      	ldr	r1, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	43db      	mvns	r3, r3
 8001812:	4013      	ands	r3, r2
 8001814:	620b      	str	r3, [r1, #32]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001836:	4909      	ldr	r1, [pc, #36]	; (800185c <RCC_APB1PeriphClockCmd+0x38>)
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <RCC_APB1PeriphClockCmd+0x38>)
 800183a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4313      	orrs	r3, r2
 8001840:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001842:	e006      	b.n	8001852 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001844:	4905      	ldr	r1, [pc, #20]	; (800185c <RCC_APB1PeriphClockCmd+0x38>)
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <RCC_APB1PeriphClockCmd+0x38>)
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	43db      	mvns	r3, r3
 800184e:	4013      	ands	r3, r2
 8001850:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40023800 	.word	0x40023800

08001860 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001872:	4909      	ldr	r1, [pc, #36]	; (8001898 <RCC_APB1PeriphResetCmd+0x38>)
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <RCC_APB1PeriphResetCmd+0x38>)
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800187e:	e006      	b.n	800188e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001880:	4905      	ldr	r1, [pc, #20]	; (8001898 <RCC_APB1PeriphResetCmd+0x38>)
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <RCC_APB1PeriphResetCmd+0x38>)
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	43db      	mvns	r3, r3
 800188a:	4013      	ands	r3, r2
 800188c:	618b      	str	r3, [r1, #24]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800

0800189c <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800189c:	b490      	push	{r4, r7}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	401a      	ands	r2, r3
 80018de:	1c83      	adds	r3, r0, #2
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461c      	mov	r4, r3
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018fc:	79f9      	ldrb	r1, [r7, #7]
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	431a      	orrs	r2, r3
 800190c:	1ca3      	adds	r3, r4, #2
 800190e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bc90      	pop	{r4, r7}
 800191a:	4770      	bx	lr
 800191c:	40010000 	.word	0x40010000

08001920 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d00b      	beq.n	8001954 <TIM_TimeBaseInit+0x34>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <TIM_TimeBaseInit+0x90>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <TIM_TimeBaseInit+0x34>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <TIM_TimeBaseInit+0x94>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d003      	beq.n	8001954 <TIM_TimeBaseInit+0x34>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <TIM_TimeBaseInit+0x98>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d108      	bne.n	8001966 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	885a      	ldrh	r2, [r3, #2]
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	4313      	orrs	r3, r2
 8001964:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <TIM_TimeBaseInit+0x9c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00c      	beq.n	8001988 <TIM_TimeBaseInit+0x68>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <TIM_TimeBaseInit+0xa0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d008      	beq.n	8001988 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	891a      	ldrh	r2, [r3, #8]
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	4313      	orrs	r3, r2
 8001986:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	829a      	strh	r2, [r3, #20]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800
 80019b8:	40000c00 	.word	0x40000c00
 80019bc:	40001000 	.word	0x40001000
 80019c0:	40001400 	.word	0x40001400

080019c4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8001a1a:	e007      	b.n	8001a2c <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	801a      	strh	r2, [r3, #0]
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001a5a:	e007      	b.n	8001a6c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	801a      	strh	r2, [r3, #0]
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	81fb      	strh	r3, [r7, #14]
 8001a86:	2300      	movs	r3, #0
 8001a88:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8c1b      	ldrh	r3, [r3, #32]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8c1b      	ldrh	r3, [r3, #32]
 8001a9e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8b1b      	ldrh	r3, [r3, #24]
 8001aa4:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aac:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	f023 0303 	bic.w	r3, r3, #3
 8001ab4:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	89fb      	ldrh	r3, [r7, #14]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001ac0:	89bb      	ldrh	r3, [r7, #12]
 8001ac2:	f023 0302 	bic.w	r3, r3, #2
 8001ac6:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	891a      	ldrh	r2, [r3, #8]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	885a      	ldrh	r2, [r3, #2]
 8001ad6:	89bb      	ldrh	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	89fa      	ldrh	r2, [r7, #14]
 8001ae8:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	89ba      	ldrh	r2, [r7, #12]
 8001aee:	841a      	strh	r2, [r3, #32]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8b1b      	ldrh	r3, [r3, #24]
 8001b10:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	f023 0308 	bic.w	r3, r3, #8
 8001b18:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001b1a:	89fa      	ldrh	r2, [r7, #14]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	89fa      	ldrh	r2, [r7, #14]
 8001b26:	831a      	strh	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	899b      	ldrh	r3, [r3, #12]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001b5a:	e009      	b.n	8001b70 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	899b      	ldrh	r3, [r3, #12]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	819a      	strh	r2, [r3, #12]
  }
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop

08001b7c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	81bb      	strh	r3, [r7, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8a1b      	ldrh	r3, [r3, #16]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	899b      	ldrh	r3, [r3, #12]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <TIM_GetITStatus+0x42>
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e001      	b.n	8001bc2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	821a      	strh	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <I2C2_initDMA>:
#define I2C_READ_TIMEOUT 10000
uint32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C2_initDMA(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001bfc:	f7ff fdd6 	bl	80017ac <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 8001c00:	481c      	ldr	r0, [pc, #112]	; (8001c74 <I2C2_initDMA+0x84>)
 8001c02:	f7fe ffb7 	bl	8000b74 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <I2C2_initDMA+0x88>)
 8001c08:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <I2C2_initDMA+0x8c>)
 8001c0c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 8001c20:	2302      	movs	r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <I2C2_initDMA+0x84>)
 8001c3a:	f7ff f857 	bl	8000cec <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <I2C2_initDMA+0x84>)
 8001c44:	f7ff f8ac 	bl	8000da0 <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 8001c48:	230f      	movs	r3, #15
 8001c4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe ff25 	bl	8000ab4 <NVIC_Init>
}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40026058 	.word	0x40026058
 8001c78:	40005810 	.word	0x40005810
 8001c7c:	2000011c 	.word	0x2000011c

08001c80 <I2C2_getDeviceAddress>:

uint8_t I2C2_getDeviceAddress(void) {
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return deviceAddrUseI2c;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <I2C2_getDeviceAddress+0x10>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	200000a4 	.word	0x200000a4

08001c94 <I2C2_clearDeviceAddress>:

void I2C2_clearDeviceAddress(void) {
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <I2C2_clearDeviceAddress+0x14>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200000a4 	.word	0x200000a4

08001cac <I2C2_getRxBuffer>:

uint32_t I2C2_getRxBuffer(int index) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <I2C2_getRxBuffer+0x1c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000011c 	.word	0x2000011c

08001ccc <I2C2_getReadRegister>:

uint8_t I2C2_getReadRegister(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	return readReg;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <I2C2_getReadRegister+0x10>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	200000a5 	.word	0x200000a5

08001ce0 <I2C2_clearReadRegister>:

void I2C2_clearReadRegister(void) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	readReg = 0;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <I2C2_clearReadRegister+0x14>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200000a5 	.word	0x200000a5

08001cf8 <I2C2_Init>:


void I2C2_Init(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7ff fd53 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001d06:	2101      	movs	r1, #1
 8001d08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d0c:	f7ff fd8a 	bl	8001824 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 8001d10:	2204      	movs	r2, #4
 8001d12:	210a      	movs	r1, #10
 8001d14:	481e      	ldr	r0, [pc, #120]	; (8001d90 <I2C2_Init+0x98>)
 8001d16:	f7ff f9dd 	bl	80010d4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	210b      	movs	r1, #11
 8001d1e:	481c      	ldr	r0, [pc, #112]	; (8001d90 <I2C2_Init+0x98>)
 8001d20:	f7ff f9d8 	bl	80010d4 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001d24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d28:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001d36:	2303      	movs	r3, #3
 8001d38:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <I2C2_Init+0x98>)
 8001d42:	f7ff f931 	bl	8000fa8 <GPIO_Init>

	I2C_DeInit(I2C2);
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <I2C2_Init+0x9c>)
 8001d48:	f7ff fa0c 	bl	8001164 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d54:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5e:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d64:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <I2C2_Init+0xa0>)
 8001d68:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <I2C2_Init+0x9c>)
 8001d70:	f7ff fa1c 	bl	80011ac <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 8001d74:	2101      	movs	r1, #1
 8001d76:	4807      	ldr	r0, [pc, #28]	; (8001d94 <I2C2_Init+0x9c>)
 8001d78:	f7ff fada 	bl	8001330 <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <I2C2_Init+0x9c>)
 8001d80:	f7ff fb36 	bl	80013f0 <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8001d84:	f7ff ff34 	bl	8001bf0 <I2C2_initDMA>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40005800 	.word	0x40005800
 8001d98:	00061a80 	.word	0x00061a80

08001d9c <I2C2_BytesWrite>:

void I2C2_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,uint8_t writeAddr) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6039      	str	r1, [r7, #0]
 8001da4:	4611      	mov	r1, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	460b      	mov	r3, r1
 8001dae:	71bb      	strb	r3, [r7, #6]
 8001db0:	4613      	mov	r3, r2
 8001db2:	717b      	strb	r3, [r7, #5]
	I2C_GenerateSTART(I2C2, ENABLE);
 8001db4:	2101      	movs	r1, #1
 8001db6:	4825      	ldr	r0, [pc, #148]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001db8:	f7ff fada 	bl	8001370 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001dbc:	bf00      	nop
 8001dbe:	4924      	ldr	r1, [pc, #144]	; (8001e50 <I2C2_BytesWrite+0xb4>)
 8001dc0:	4822      	ldr	r0, [pc, #136]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001dc2:	f7ff fba7 	bl	8001514 <I2C_CheckEvent>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f8      	beq.n	8001dbe <I2C2_BytesWrite+0x22>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001dd4:	f7ff fb2c 	bl	8001430 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001dd8:	bf00      	nop
 8001dda:	491e      	ldr	r1, [pc, #120]	; (8001e54 <I2C2_BytesWrite+0xb8>)
 8001ddc:	481b      	ldr	r0, [pc, #108]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001dde:	f7ff fb99 	bl	8001514 <I2C_CheckEvent>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f8      	beq.n	8001dda <I2C2_BytesWrite+0x3e>
		;
	I2C_SendData(I2C2, writeAddr);
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	4619      	mov	r1, r3
 8001dec:	4817      	ldr	r0, [pc, #92]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001dee:	f7ff fb3d 	bl	800146c <I2C_SendData>
	for (int i = 0; i < length; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e014      	b.n	8001e22 <I2C2_BytesWrite+0x86>
		I2C_SendData(I2C2, pBuffer[i]);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001e04:	f7ff fb32 	bl	800146c <I2C_SendData>
		for (int x = 0; x < 1000; x++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	e002      	b.n	8001e14 <I2C2_BytesWrite+0x78>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e1a:	dbf8      	blt.n	8001e0e <I2C2_BytesWrite+0x72>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;
	I2C_SendData(I2C2, writeAddr);
	for (int i = 0; i < length; i++) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	79ba      	ldrb	r2, [r7, #6]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dce6      	bgt.n	8001df8 <I2C2_BytesWrite+0x5c>
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001e2a:	bf00      	nop
 8001e2c:	490a      	ldr	r1, [pc, #40]	; (8001e58 <I2C2_BytesWrite+0xbc>)
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001e30:	f7ff fb70 	bl	8001514 <I2C_CheckEvent>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f8      	beq.n	8001e2c <I2C2_BytesWrite+0x90>
		;
	I2C_GenerateSTOP(I2C2, ENABLE);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <I2C2_BytesWrite+0xb0>)
 8001e3e:	f7ff fab7 	bl	80013b0 <I2C_GenerateSTOP>

}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	00030001 	.word	0x00030001
 8001e54:	00070082 	.word	0x00070082
 8001e58:	00070084 	.word	0x00070084

08001e5c <I2C1_Init>:
#include <I2CSlaveLib/I2CSlaveLib.h>

void I2C1_Init(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001e62:	2101      	movs	r1, #1
 8001e64:	2002      	movs	r0, #2
 8001e66:	f7ff fca1 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e70:	f7ff fcd8 	bl	8001824 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8001e74:	2204      	movs	r2, #4
 8001e76:	2108      	movs	r1, #8
 8001e78:	4831      	ldr	r0, [pc, #196]	; (8001f40 <I2C1_Init+0xe4>)
 8001e7a:	f7ff f92b 	bl	80010d4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001e7e:	2204      	movs	r2, #4
 8001e80:	2109      	movs	r1, #9
 8001e82:	482f      	ldr	r0, [pc, #188]	; (8001f40 <I2C1_Init+0xe4>)
 8001e84:	f7ff f926 	bl	80010d4 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e9e:	f107 0318 	add.w	r3, r7, #24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4826      	ldr	r0, [pc, #152]	; (8001f40 <I2C1_Init+0xe4>)
 8001ea6:	f7ff f87f 	bl	8000fa8 <GPIO_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
 8001eaa:	231f      	movs	r3, #31
 8001eac:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fdf9 	bl	8000ab4 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fded 	bl	8000ab4 <NVIC_Init>

	I2C_DeInit(I2C1);
 8001eda:	481a      	ldr	r0, [pc, #104]	; (8001f44 <I2C1_Init+0xe8>)
 8001edc:	f7ff f942 	bl	8001164 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee8:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = slave_address<<1;
 8001eea:	2322      	movs	r3, #34	; 0x22
 8001eec:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef2:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef8:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <I2C1_Init+0xec>)
 8001efc:	60bb      	str	r3, [r7, #8]

	I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <I2C1_Init+0xe8>)
 8001f06:	f7ff fae1 	bl	80014cc <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <I2C1_Init+0xe8>)
 8001f12:	f7ff fadb 	bl	80014cc <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_ERR, ENABLE);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <I2C1_Init+0xe8>)
 8001f1e:	f7ff fad5 	bl	80014cc <I2C_ITConfig>

	I2C_Init(I2C1, &I2C_InitStructure);
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	4806      	ldr	r0, [pc, #24]	; (8001f44 <I2C1_Init+0xe8>)
 8001f2a:	f7ff f93f 	bl	80011ac <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <I2C1_Init+0xe8>)
 8001f32:	f7ff f9fd 	bl	8001330 <I2C_Cmd>

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40005400 	.word	0x40005400
 8001f48:	00061a80 	.word	0x00061a80

08001f4c <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <_ZN5MotorC1Eh+0x44>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	749a      	strb	r2, [r3, #18]
	this->motorAddr = motorAddr;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	81da      	strh	r2, [r3, #14]
}
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	080037c0 	.word	0x080037c0

08001f94 <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <_ZN5MotorD1Ev+0x24>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]

}
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <_ZN5MotorD1Ev+0x1a>
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 fa8e 	bl	80034ca <_ZdlPv>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	080037c0 	.word	0x080037c0

08001fbc <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

}
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffe5 	bl	8001f94 <_ZN5MotorD1Ev>
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f001 fa7d 	bl	80034ca <_ZdlPv>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	0000      	movs	r0, r0
	...

08001fe0 <_ZN5Motor13setSpeedMotorEd>:
//------------------------------------------------------------------
void Motor::setSpeedMotor(double mmPerSec) {
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t speedRaw =
			(mmPerSec * (numberTicksOfWheel / (M_PI * wheelDiameter)))
 8001fec:	a310      	add	r3, pc, #64	; (adr r3, 8002030 <_ZN5Motor13setSpeedMotorEd+0x50>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff6:	f7fe fa7b 	bl	80004f0 <__aeabi_dmul>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	4618      	mov	r0, r3
 8002000:	4621      	mov	r1, r4
					/ periodSpeedRegulator;
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <_ZN5Motor13setSpeedMotorEd+0x58>)
 8002008:	f7fe fb9c 	bl	8000744 <__aeabi_ddiv>
 800200c:	4603      	mov	r3, r0
 800200e:	460c      	mov	r4, r1
 8002010:	4618      	mov	r0, r3
 8002012:	4621      	mov	r1, r4
 8002014:	f7fe fd06 	bl	8000a24 <__aeabi_d2iz>
 8002018:	4603      	mov	r3, r0
 800201a:	82fb      	strh	r3, [r7, #22]
	setSpeedRawMotor(speedRaw);
 800201c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002020:	4619      	mov	r1, r3
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f80a 	bl	800203c <_ZN5Motor16setSpeedRawMotorEs>
}
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	16375352 	.word	0x16375352
 8002034:	3fdc6d02 	.word	0x3fdc6d02
 8002038:	3fd00000 	.word	0x3fd00000

0800203c <_ZN5Motor16setSpeedRawMotorEs>:
	setSpeedRawMotor(
			(int16_t) ((anglePerSec * (numberTicksOfWheel / 360))
					/ periodSpeedRegulator));
}
//------------------------------------------------------------------
void Motor::setSpeedRawMotor(int16_t data) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	tmp[1] = data & 0xFF;
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	737b      	strb	r3, [r7, #13]
	tmp[0] = (data >> 8) & 0xFF;
 800204e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002052:	121b      	asrs	r3, r3, #8
 8002054:	b2db      	uxtb	r3, r3
 8002056:	733b      	strb	r3, [r7, #12]
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETSPEEDREG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7918      	ldrb	r0, [r3, #4]
 800205c:	f107 010c 	add.w	r1, r7, #12
 8002060:	2364      	movs	r3, #100	; 0x64
 8002062:	2202      	movs	r2, #2
 8002064:	f7ff fe9a 	bl	8001d9c <I2C2_BytesWrite>
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETSPEEDREG, 2);
}
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002084:	441a      	add	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	609a      	str	r2, [r3, #8]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <_ZN5Motor11setSpeedRawEs>:
//------------------------------------------------------------------
double Motor::getDistance(void) {
	return (double) getTicks() * ((wheelDiameter * M_PI) / (numberTicksOfWheel));
}
//------------------------------------------------------------------
void Motor::setSpeedRaw(int16_t speedRaw) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
	this->speedRaw = speedRaw;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	819a      	strh	r2, [r3, #12]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <_ZN5Motor13setVoltageRawEt>:
	return getSpeedRaw()
			* ((wheelDiameter * M_PI)
					/ (periodSpeedRegulator * numberTicksOfWheel));
}
//------------------------------------------------------------------
void Motor::setVoltageRaw(uint16_t voltageRaw) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
	this->voltageRaw = voltageRaw;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	81da      	strh	r2, [r3, #14]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_ZN5Motor10setCurrentEt>:
	while (I2C2_getReadRegister() == GETVOLTAGEREG)
		;
	return (double) this->voltageRaw * (25 / 1023);
}
//------------------------------------------------------------------
void Motor::setCurrent(uint16_t current) {
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
	this->current = current;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	821a      	strh	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <_ZN5Motor12setTestValueEh>:
//------------------------------------------------------------------
void Motor::DMATestInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETWHO_I_AM, 1);
}
//------------------------------------------------------------------
void Motor::setTestValue(uint8_t value) {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
	this->test = value == this->motorAddr;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	749a      	strb	r2, [r3, #18]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <_Z8getMotori>:
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	switch (i) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	2b05      	cmp	r3, #5
 8002122:	d821      	bhi.n	8002168 <_Z8getMotori+0x54>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <_Z8getMotori+0x18>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002145 	.word	0x08002145
 8002130:	0800214b 	.word	0x0800214b
 8002134:	08002151 	.word	0x08002151
 8002138:	08002157 	.word	0x08002157
 800213c:	0800215d 	.word	0x0800215d
 8002140:	08002163 	.word	0x08002163
	case 1:
		return motor1;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <_Z8getMotori+0x60>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	e00f      	b.n	800216a <_Z8getMotori+0x56>
	case 2:
		return motor2;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <_Z8getMotori+0x64>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e00c      	b.n	800216a <_Z8getMotori+0x56>
	case 3:
		return motor3;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <_Z8getMotori+0x68>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e009      	b.n	800216a <_Z8getMotori+0x56>
	case 4:
		return motor4;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <_Z8getMotori+0x6c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e006      	b.n	800216a <_Z8getMotori+0x56>
	case 5:
		return motor5;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <_Z8getMotori+0x70>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e003      	b.n	800216a <_Z8getMotori+0x56>
	case 6:
		return motor6;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <_Z8getMotori+0x74>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e000      	b.n	800216a <_Z8getMotori+0x56>
	default:
		return NULL;
 8002168:	2300      	movs	r3, #0
	}
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	200000a8 	.word	0x200000a8
 8002178:	200000ac 	.word	0x200000ac
 800217c:	200000b0 	.word	0x200000b0
 8002180:	200000b4 	.word	0x200000b4
 8002184:	200000b8 	.word	0x200000b8
 8002188:	200000bc 	.word	0x200000bc

0800218c <EXTI1_IRQHandler>:
volatile double pitch = 0;

#define NUMBER_OF_ULTS 1
volatile int chooseUlt = -1;
volatile uint32_t ultRawValue[NUMBER_OF_ULTS];
extern "C" void EXTI1_IRQHandler(void) {
 800218c:	b598      	push	{r3, r4, r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8002190:	2002      	movs	r0, #2
 8002192:	f7fe fed7 	bl	8000f44 <EXTI_GetITStatus>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <EXTI1_IRQHandler+0x5c>
		if((GPIOC->IDR & GPIO_Pin_1) && GPIO_Pin_1){
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <EXTI1_IRQHandler+0x60>)
 80021a8:	8a1b      	ldrh	r3, [r3, #16]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <EXTI1_IRQHandler+0x2c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <EXTI1_IRQHandler+0x2e>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <EXTI1_IRQHandler+0x3c>
			TIM_SetCounter(TIM4, 0);
 80021be:	2100      	movs	r1, #0
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <EXTI1_IRQHandler+0x64>)
 80021c2:	f7ff fbff 	bl	80019c4 <TIM_SetCounter>
 80021c6:	e00c      	b.n	80021e2 <EXTI1_IRQHandler+0x56>
		}
		else{
			ultRawValue[chooseUlt] = TIM_GetCounter(TIM4);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <EXTI1_IRQHandler+0x68>)
 80021ca:	681c      	ldr	r4, [r3, #0]
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <EXTI1_IRQHandler+0x64>)
 80021ce:	f7ff fc07 	bl	80019e0 <TIM_GetCounter>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <EXTI1_IRQHandler+0x6c>)
 80021d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			chooseUlt = -1;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <EXTI1_IRQHandler+0x68>)
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	601a      	str	r2, [r3, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line1);
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7fe fed2 	bl	8000f8c <EXTI_ClearITPendingBit>
	}
}
 80021e8:	bf00      	nop
 80021ea:	bd98      	pop	{r3, r4, r7, pc}
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40000800 	.word	0x40000800
 80021f4:	2000001c 	.word	0x2000001c
 80021f8:	20000108 	.word	0x20000108

080021fc <_Z15Ultrasonic_initv>:

void Ultrasonic_init(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002202:	2101      	movs	r1, #1
 8002204:	2004      	movs	r0, #4
 8002206:	f7ff fad1 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800220a:	2101      	movs	r1, #1
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff faeb 	bl	80017e8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002216:	2301      	movs	r3, #1
 8002218:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800221a:	2300      	movs	r3, #0
 800221c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002222:	2303      	movs	r3, #3
 8002224:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4619      	mov	r1, r3
 800222c:	482e      	ldr	r0, [pc, #184]	; (80022e8 <_Z15Ultrasonic_initv+0xec>)
 800222e:	f7fe febb 	bl	8000fa8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002236:	2300      	movs	r3, #0
 8002238:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800223a:	2301      	movs	r3, #1
 800223c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002242:	2303      	movs	r3, #3
 8002244:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002246:	f107 0318 	add.w	r3, r7, #24
 800224a:	4619      	mov	r1, r3
 800224c:	4826      	ldr	r0, [pc, #152]	; (80022e8 <_Z15Ultrasonic_initv+0xec>)
 800224e:	f7fe feab 	bl	8000fa8 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1);
 8002252:	2101      	movs	r1, #1
 8002254:	2002      	movs	r0, #2
 8002256:	f7ff fb21 	bl	800189c <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 800225a:	2302      	movs	r3, #2
 800225c:	60fb      	str	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800225e:	2300      	movs	r3, #0
 8002260:	743b      	strb	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002262:	2310      	movs	r3, #16
 8002264:	747b      	strb	r3, [r7, #17]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	74bb      	strb	r3, [r7, #18]
	EXTI_Init(&EXTI_InitStructure);
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fdf6 	bl	8000e60 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8002274:	2307      	movs	r3, #7
 8002276:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fc13 	bl	8000ab4 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800228e:	2101      	movs	r1, #1
 8002290:	2004      	movs	r0, #4
 8002292:	f7ff fac7 	bl	8001824 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;//timer clock 2000khz
	timerInitStructure.TIM_Prescaler = 1; // 2000khz/2 = 1000khz = kazdu 1 us
 8002296:	2301      	movs	r3, #1
 8002298:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800229a:	2300      	movs	r3, #0
 800229c:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 30000; // po 30 ms si povie ze to uz je maximum
 800229e:	f247 5330 	movw	r3, #30000	; 0x7530
 80022a2:	607b      	str	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM4, &timerInitStructure);
 80022a8:	463b      	mov	r3, r7
 80022aa:	4619      	mov	r1, r3
 80022ac:	480f      	ldr	r0, [pc, #60]	; (80022ec <_Z15Ultrasonic_initv+0xf0>)
 80022ae:	f7ff fb37 	bl	8001920 <TIM_TimeBaseInit>
	TIM_Cmd(TIM4, ENABLE);
 80022b2:	2101      	movs	r1, #1
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <_Z15Ultrasonic_initv+0xf0>)
 80022b6:	f7ff fbbf 	bl	8001a38 <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2101      	movs	r1, #1
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <_Z15Ultrasonic_initv+0xf0>)
 80022c0:	f7ff fc38 	bl	8001b34 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 80022c4:	231e      	movs	r3, #30
 80022c6:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fbeb 	bl	8000ab4 <NVIC_Init>

}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40000800 	.word	0x40000800

080022f0 <_Z9ultTrigeri>:

void ultTriger(int index) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	while(chooseUlt!= -1);
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <_Z9ultTrigeri+0x5c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d000      	beq.n	800230e <_Z9ultTrigeri+0x1e>
 800230c:	e7f4      	b.n	80022f8 <_Z9ultTrigeri+0x8>
	switch (index) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d000      	beq.n	8002316 <_Z9ultTrigeri+0x26>
		GPIOC->BSRRL = GPIO_Pin_0;
		for (int i = 0; i < 2; i++); //cca 15 us
		GPIOC->BSRRH = GPIO_Pin_0;
		break;
	}
}
 8002314:	e016      	b.n	8002344 <_Z9ultTrigeri+0x54>

void ultTriger(int index) {
	while(chooseUlt!= -1);
	switch (index) {
	case 0:
		TIM_SetCounter(TIM4, 0);
 8002316:	2100      	movs	r1, #0
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <_Z9ultTrigeri+0x60>)
 800231a:	f7ff fb53 	bl	80019c4 <TIM_SetCounter>
		chooseUlt = index;
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <_Z9ultTrigeri+0x5c>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6013      	str	r3, [r2, #0]
		GPIOC->BSRRL = GPIO_Pin_0;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <_Z9ultTrigeri+0x64>)
 8002326:	2201      	movs	r2, #1
 8002328:	831a      	strh	r2, [r3, #24]
		for (int i = 0; i < 2; i++); //cca 15 us
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	dc03      	bgt.n	800233c <_Z9ultTrigeri+0x4c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e7f8      	b.n	800232e <_Z9ultTrigeri+0x3e>
		GPIOC->BSRRH = GPIO_Pin_0;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <_Z9ultTrigeri+0x64>)
 800233e:	2201      	movs	r2, #1
 8002340:	835a      	strh	r2, [r3, #26]
		break;
 8002342:	bf00      	nop
	}
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000001c 	.word	0x2000001c
 8002350:	40000800 	.word	0x40000800
 8002354:	40020800 	.word	0x40020800

08002358 <TIM4_IRQHandler>:

double getUltCm(int index){
	return ((double)ultRawValue[index])/58;
}

extern "C" void TIM4_IRQHandler(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
 800235c:	2101      	movs	r1, #1
 800235e:	4813      	ldr	r0, [pc, #76]	; (80023ac <TIM4_IRQHandler+0x54>)
 8002360:	f7ff fc0c 	bl	8001b7c <TIM_GetITStatus>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <TIM4_IRQHandler+0x4e>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8002374:	2101      	movs	r1, #1
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <TIM4_IRQHandler+0x54>)
 8002378:	f7ff fc2a 	bl	8001bd0 <TIM_ClearITPendingBit>
		if(chooseUlt!=-1){
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <TIM4_IRQHandler+0x58>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <TIM4_IRQHandler+0x4e>
			ultRawValue[chooseUlt] = 65535;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <TIM4_IRQHandler+0x58>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <TIM4_IRQHandler+0x5c>)
 8002396:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800239a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			chooseUlt = -1;
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <TIM4_IRQHandler+0x58>)
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40000800 	.word	0x40000800
 80023b0:	2000001c 	.word	0x2000001c
 80023b4:	20000108 	.word	0x20000108

080023b8 <_Z6setLedcbb>:

void setLed(char index, bool green, bool red) {
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	460b      	mov	r3, r1
 80023c4:	71bb      	strb	r3, [r7, #6]
 80023c6:	4613      	mov	r3, r2
 80023c8:	717b      	strb	r3, [r7, #5]
	switch (index) {
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d01d      	beq.n	800240c <_Z6setLedcbb+0x54>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d032      	beq.n	800243a <_Z6setLedcbb+0x82>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d000      	beq.n	80023da <_Z6setLedcbb+0x22>
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
	}
}
 80023d8:	e046      	b.n	8002468 <_Z6setLedcbb+0xb0>
}

void setLed(char index, bool green, bool red) {
	switch (index) {
	case 0:
		if (green)
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <_Z6setLedcbb+0x32>
			GPIOB->BSRRL = GPIO_Pin_14;
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <_Z6setLedcbb+0xbc>)
 80023e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e6:	831a      	strh	r2, [r3, #24]
 80023e8:	e003      	b.n	80023f2 <_Z6setLedcbb+0x3a>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <_Z6setLedcbb+0xbc>)
 80023ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f0:	835a      	strh	r2, [r3, #26]
		if (red)
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <_Z6setLedcbb+0x4a>
			GPIOB->BSRRL = GPIO_Pin_13;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <_Z6setLedcbb+0xbc>)
 80023fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fe:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_13;
		break;
 8002400:	e032      	b.n	8002468 <_Z6setLedcbb+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
		if (red)
			GPIOB->BSRRL = GPIO_Pin_13;
		else
			GPIOB->BSRRH = GPIO_Pin_13;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002408:	835a      	strh	r2, [r3, #26]
		break;
 800240a:	e02d      	b.n	8002468 <_Z6setLedcbb+0xb0>
	case 1:
		if (green)
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <_Z6setLedcbb+0x64>
			GPIOB->BSRRL = GPIO_Pin_15;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002418:	831a      	strh	r2, [r3, #24]
 800241a:	e003      	b.n	8002424 <_Z6setLedcbb+0x6c>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <_Z6setLedcbb+0xbc>)
 800241e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002422:	835a      	strh	r2, [r3, #26]
		if (red)
 8002424:	797b      	ldrb	r3, [r7, #5]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <_Z6setLedcbb+0x7a>
			GPIOB->BSRRL = GPIO_Pin_1;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <_Z6setLedcbb+0xbc>)
 800242c:	2202      	movs	r2, #2
 800242e:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_1;
		break;
 8002430:	e01a      	b.n	8002468 <_Z6setLedcbb+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
		if (red)
			GPIOB->BSRRL = GPIO_Pin_1;
		else
			GPIOB->BSRRH = GPIO_Pin_1;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002434:	2202      	movs	r2, #2
 8002436:	835a      	strh	r2, [r3, #26]
		break;
 8002438:	e016      	b.n	8002468 <_Z6setLedcbb+0xb0>
	case 2:
		if (green)
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <_Z6setLedcbb+0x90>
			GPIOB->BSRRL = GPIO_Pin_2;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002442:	2204      	movs	r2, #4
 8002444:	831a      	strh	r2, [r3, #24]
 8002446:	e002      	b.n	800244e <_Z6setLedcbb+0x96>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <_Z6setLedcbb+0xbc>)
 800244a:	2204      	movs	r2, #4
 800244c:	835a      	strh	r2, [r3, #26]
		if (red)
 800244e:	797b      	ldrb	r3, [r7, #5]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <_Z6setLedcbb+0xa6>
			GPIOB->BSRRL = GPIO_Pin_12;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800245a:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
 800245c:	e003      	b.n	8002466 <_Z6setLedcbb+0xae>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
		if (red)
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <_Z6setLedcbb+0xbc>)
 8002460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002464:	835a      	strh	r2, [r3, #26]
		break;
 8002466:	bf00      	nop
	}
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40020400 	.word	0x40020400

08002478 <_Z9Leds_Initv>:

void Leds_Init(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800247e:	2101      	movs	r1, #1
 8002480:	2002      	movs	r0, #2
 8002482:	f7ff f993 	bl	80017ac <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15
			| GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_12;
 8002486:	f24f 0306 	movw	r3, #61446	; 0xf006
 800248a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800248c:	2301      	movs	r3, #1
 800248e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002490:	2300      	movs	r3, #0
 8002492:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002498:	2303      	movs	r3, #3
 800249a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	480a      	ldr	r0, [pc, #40]	; (80024cc <_Z9Leds_Initv+0x54>)
 80024a2:	f7fe fd81 	bl	8000fa8 <GPIO_Init>
	setLed(1, false, false);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff ff84 	bl	80023b8 <_Z6setLedcbb>
	setLed(2, false, false);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff ff7f 	bl	80023b8 <_Z6setLedcbb>
	setLed(3, false, false);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2003      	movs	r0, #3
 80024c0:	f7ff ff7a 	bl	80023b8 <_Z6setLedcbb>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40020400 	.word	0x40020400

080024d0 <_Z12Buttons_Initv>:

void Buttons_Init(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80024d6:	2101      	movs	r1, #1
 80024d8:	2004      	movs	r0, #4
 80024da:	f7ff f967 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80024de:	2101      	movs	r1, #1
 80024e0:	2001      	movs	r0, #1
 80024e2:	f7ff f981 	bl	80017e8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_9;
 80024e6:	f44f 7350 	mov.w	r3, #832	; 0x340
 80024ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80024ec:	2300      	movs	r3, #0
 80024ee:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80024f0:	2301      	movs	r3, #1
 80024f2:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80024f8:	2303      	movs	r3, #3
 80024fa:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	482f      	ldr	r0, [pc, #188]	; (80025c0 <_Z12Buttons_Initv+0xf0>)
 8002504:	f7fe fd50 	bl	8000fa8 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 8002508:	2106      	movs	r1, #6
 800250a:	2002      	movs	r0, #2
 800250c:	f7ff f9c6 	bl	800189c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
 8002510:	2108      	movs	r1, #8
 8002512:	2002      	movs	r0, #2
 8002514:	f7ff f9c2 	bl	800189c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
 8002518:	2109      	movs	r1, #9
 800251a:	2002      	movs	r0, #2
 800251c:	f7ff f9be 	bl	800189c <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line6;
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002524:	2300      	movs	r3, #0
 8002526:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002528:	2310      	movs	r3, #16
 800252a:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fc94 	bl	8000e60 <EXTI_Init>

	EXTI_InitStructure.EXTI_Line = EXTI_Line8;
 8002538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253c:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fc8d 	bl	8000e60 <EXTI_Init>
	EXTI_InitStructure.EXTI_Line = EXTI_Line9;
 8002546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254a:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fc86 	bl	8000e60 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8002554:	2317      	movs	r3, #23
 8002556:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe faa3 	bl	8000ab4 <NVIC_Init>

	buttons[0] = !(GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6;
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <_Z12Buttons_Initv+0xf0>)
 8002570:	8a1b      	ldrh	r3, [r3, #16]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <_Z12Buttons_Initv+0xb0>
 800257c:	2201      	movs	r2, #1
 800257e:	e000      	b.n	8002582 <_Z12Buttons_Initv+0xb2>
 8002580:	2200      	movs	r2, #0
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_Z12Buttons_Initv+0xf4>)
 8002584:	701a      	strb	r2, [r3, #0]
	buttons[1] = !(GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <_Z12Buttons_Initv+0xf0>)
 8002588:	8a1b      	ldrh	r3, [r3, #16]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <_Z12Buttons_Initv+0xc8>
 8002594:	2201      	movs	r2, #1
 8002596:	e000      	b.n	800259a <_Z12Buttons_Initv+0xca>
 8002598:	2200      	movs	r2, #0
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <_Z12Buttons_Initv+0xf4>)
 800259c:	705a      	strb	r2, [r3, #1]
	buttons[2] = !(GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <_Z12Buttons_Initv+0xf0>)
 80025a0:	8a1b      	ldrh	r3, [r3, #16]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <_Z12Buttons_Initv+0xe0>
 80025ac:	2201      	movs	r2, #1
 80025ae:	e000      	b.n	80025b2 <_Z12Buttons_Initv+0xe2>
 80025b0:	2200      	movs	r2, #0
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_Z12Buttons_Initv+0xf4>)
 80025b4:	709a      	strb	r2, [r3, #2]
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40020800 	.word	0x40020800
 80025c4:	200000d0 	.word	0x200000d0

080025c8 <_Z15InitializeTimerv>:

void InitializeTimer(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80025ce:	2101      	movs	r1, #1
 80025d0:	2001      	movs	r0, #1
 80025d2:	f7ff f927 	bl	8001824 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 40 hz
	timerInitStructure.TIM_Prescaler = 999;
 80025d6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80025da:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80025dc:	2300      	movs	r3, #0
 80025de:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 49;
 80025e0:	2331      	movs	r3, #49	; 0x31
 80025e2:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025f0:	f7ff f996 	bl	8001920 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80025f4:	2101      	movs	r1, #1
 80025f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025fa:	f7ff fa1d 	bl	8001a38 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80025fe:	2201      	movs	r2, #1
 8002600:	2101      	movs	r1, #1
 8002602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002606:	f7ff fa95 	bl	8001b34 <TIM_ITConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 800260a:	231c      	movs	r3, #28
 800260c:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 800261a:	463b      	mov	r3, r7
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fa49 	bl	8000ab4 <NVIC_Init>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0000      	movs	r0, r0
	...

08002630 <_Z8setServod>:
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
}
void setServo(double angle) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	e9c7 0100 	strd	r0, r1, [r7]
	if (angle < 0)
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002646:	f7fe f9c5 	bl	80009d4 <__aeabi_dcmplt>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <_Z8setServod+0x2e>
		angle = 0;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	e887 0018 	stmia.w	r7, {r3, r4}
 800265c:	e00e      	b.n	800267c <_Z8setServod+0x4c>
	else if (angle > 180)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <_Z8setServod+0xb0>)
 8002664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002668:	f7fe f9d2 	bl	8000a10 <__aeabi_dcmpgt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <_Z8setServod+0x4c>
		angle = 180;
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	4c1a      	ldr	r4, [pc, #104]	; (80026e0 <_Z8setServod+0xb0>)
 8002678:	e887 0018 	stmia.w	r7, {r3, r4}
	uint32_t value = ((SERVO_MAX - SERVO_MIN) / 180) * angle + SERVO_MIN;
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <_Z8setServod+0xb4>)
 8002682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002686:	f7fd ff33 	bl	80004f0 <__aeabi_dmul>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	4618      	mov	r0, r3
 8002690:	4621      	mov	r1, r4
 8002692:	a311      	add	r3, pc, #68	; (adr r3, 80026d8 <_Z8setServod+0xa8>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd fd78 	bl	800018c <__adddf3>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	4618      	mov	r0, r3
 80026a2:	4621      	mov	r1, r4
 80026a4:	f7fe f9e6 	bl	8000a74 <__aeabi_d2uiz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	617b      	str	r3, [r7, #20]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80026b0:	2301      	movs	r3, #1
 80026b2:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_Pulse = value;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80026b8:	2300      	movs	r3, #0
 80026ba:	823b      	strh	r3, [r7, #16]

	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	4809      	ldr	r0, [pc, #36]	; (80026e8 <_Z8setServod+0xb8>)
 80026c4:	f7ff f9d8 	bl	8001a78 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 80026c8:	2108      	movs	r1, #8
 80026ca:	4807      	ldr	r0, [pc, #28]	; (80026e8 <_Z8setServod+0xb8>)
 80026cc:	f7ff fa16 	bl	8001afc <TIM_OC1PreloadConfig>
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40977000 	.word	0x40977000
 80026e0:	40668000 	.word	0x40668000
 80026e4:	40330000 	.word	0x40330000
 80026e8:	40000400 	.word	0x40000400

080026ec <_Z18InitializePWMServov>:
void InitializePWMServo(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7ff f895 	bl	8001824 <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80026fa:	2101      	movs	r1, #1
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff f855 	bl	80017ac <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002706:	2302      	movs	r3, #2
 8002708:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800270a:	2300      	movs	r3, #0
 800270c:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002712:	2303      	movs	r3, #3
 8002714:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <_Z18InitializePWMServov+0x80>)
 800271e:	f7fe fc43 	bl	8000fa8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 8002722:	2202      	movs	r2, #2
 8002724:	2106      	movs	r1, #6
 8002726:	4811      	ldr	r0, [pc, #68]	; (800276c <_Z18InitializePWMServov+0x80>)
 8002728:	f7fe fcd4 	bl	80010d4 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 50 hz
	timerInitStructure.TIM_Prescaler = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002730:	2300      	movs	r3, #0
 8002732:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 41999;
 8002734:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002738:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	480b      	ldr	r0, [pc, #44]	; (8002770 <_Z18InitializePWMServov+0x84>)
 8002744:	f7ff f8ec 	bl	8001920 <TIM_TimeBaseInit>

	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8002748:	2101      	movs	r1, #1
 800274a:	4809      	ldr	r0, [pc, #36]	; (8002770 <_Z18InitializePWMServov+0x84>)
 800274c:	f7ff f954 	bl	80019f8 <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM3, ENABLE);
 8002750:	2101      	movs	r1, #1
 8002752:	4807      	ldr	r0, [pc, #28]	; (8002770 <_Z18InitializePWMServov+0x84>)
 8002754:	f7ff f970 	bl	8001a38 <TIM_Cmd>

	setServo(90);
 8002758:	f04f 0000 	mov.w	r0, #0
 800275c:	4905      	ldr	r1, [pc, #20]	; (8002774 <_Z18InitializePWMServov+0x88>)
 800275e:	f7ff ff67 	bl	8002630 <_Z8setServod>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40020000 	.word	0x40020000
 8002770:	40000400 	.word	0x40000400
 8002774:	40568000 	.word	0x40568000

08002778 <_Z15longToI2CBufferl>:

void longToI2CBuffer(long number) {
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b03      	cmp	r3, #3
 8002788:	dc10      	bgt.n	80027ac <_Z15longToI2CBufferl+0x34>
		i2c_sendBuffer[i] = (number >> ((3 - i) * 8)) & 0xFF;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1c3 0303 	rsb	r3, r3, #3
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	fa42 f303 	asr.w	r3, r2, r3
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <_Z15longToI2CBufferl+0x40>)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	460a      	mov	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]

	setServo(90);
}

void longToI2CBuffer(long number) {
	for (int i = 0; i < 4; i++) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e7eb      	b.n	8002784 <_Z15longToI2CBufferl+0xc>
		i2c_sendBuffer[i] = (number >> ((3 - i) * 8)) & 0xFF;
	}
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200000cc 	.word	0x200000cc

080027bc <_Z6speedLd>:
	for (int i = 0; i < 2; i++) {
		i2c_sendBuffer[i] = (number >> ((1 - i) * 8)) & 0xFF;
	}
}

void speedL(double speed) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	e9c7 0100 	strd	r0, r1, [r7]
	getMotor(1)->setSpeedMotor(speed);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7ff fca4 	bl	8002114 <_Z8getMotori>
 80027cc:	4601      	mov	r1, r0
 80027ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d2:	4608      	mov	r0, r1
 80027d4:	f7ff fc04 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
	getMotor(2)->setSpeedMotor(speed);
 80027d8:	2002      	movs	r0, #2
 80027da:	f7ff fc9b 	bl	8002114 <_Z8getMotori>
 80027de:	4601      	mov	r1, r0
 80027e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e4:	4608      	mov	r0, r1
 80027e6:	f7ff fbfb 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
	getMotor(3)->setSpeedMotor(speed);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f7ff fc92 	bl	8002114 <_Z8getMotori>
 80027f0:	4601      	mov	r1, r0
 80027f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f6:	4608      	mov	r0, r1
 80027f8:	f7ff fbf2 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_Z6speedRd>:

void speedR(double speed) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	e9c7 0100 	strd	r0, r1, [r7]
	getMotor(4)->setSpeedMotor(speed);
 800280e:	2004      	movs	r0, #4
 8002810:	f7ff fc80 	bl	8002114 <_Z8getMotori>
 8002814:	4601      	mov	r1, r0
 8002816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800281a:	4608      	mov	r0, r1
 800281c:	f7ff fbe0 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
	getMotor(5)->setSpeedMotor(speed);
 8002820:	2005      	movs	r0, #5
 8002822:	f7ff fc77 	bl	8002114 <_Z8getMotori>
 8002826:	4601      	mov	r1, r0
 8002828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800282c:	4608      	mov	r0, r1
 800282e:	f7ff fbd7 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
	getMotor(6)->setSpeedMotor(speed);
 8002832:	2006      	movs	r0, #6
 8002834:	f7ff fc6e 	bl	8002114 <_Z8getMotori>
 8002838:	4601      	mov	r1, r0
 800283a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283e:	4608      	mov	r0, r1
 8002840:	f7ff fbce 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_Z11goDirection9Directiond>:

void goDirection(Direction dir, double speed) {
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	4601      	mov	r1, r0
 8002854:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002858:	460b      	mov	r3, r1
 800285a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (dir) {
 800285e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002862:	2b04      	cmp	r3, #4
 8002864:	d853      	bhi.n	800290e <_Z11goDirection9Directiond+0xc2>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <_Z11goDirection9Directiond+0x20>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	08002881 	.word	0x08002881
 8002870:	08002893 	.word	0x08002893
 8002874:	080028bd 	.word	0x080028bd
 8002878:	080028db 	.word	0x080028db
 800287c:	080028f5 	.word	0x080028f5
	case FORWARD:
		speedL(speed);
 8002880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002884:	f7ff ff9a 	bl	80027bc <_Z6speedLd>
		speedR(speed);
 8002888:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800288c:	f7ff ffba 	bl	8002804 <_Z6speedRd>
		break;
 8002890:	e03d      	b.n	800290e <_Z11goDirection9Directiond+0xc2>
	case BACKWARD:
		speedL(-speed);
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a2:	f7ff ff8b 	bl	80027bc <_Z6speedLd>
		speedR(-speed);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b6:	f7ff ffa5 	bl	8002804 <_Z6speedRd>
		break;
 80028ba:	e028      	b.n	800290e <_Z11goDirection9Directiond+0xc2>
	case ROTATE_CLOCKWISE:
		speedL(speed);
 80028bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028c0:	f7ff ff7c 	bl	80027bc <_Z6speedLd>
		speedR(-speed);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d4:	f7ff ff96 	bl	8002804 <_Z6speedRd>
		break;
 80028d8:	e019      	b.n	800290e <_Z11goDirection9Directiond+0xc2>
	case ROTATE_ANTICLOCKWISE:
		speedL(-speed);
 80028da:	69bc      	ldr	r4, [r7, #24]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028e2:	4620      	mov	r0, r4
 80028e4:	4629      	mov	r1, r5
 80028e6:	f7ff ff69 	bl	80027bc <_Z6speedLd>
		speedR(speed);
 80028ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ee:	f7ff ff89 	bl	8002804 <_Z6speedRd>
		break;
 80028f2:	e00c      	b.n	800290e <_Z11goDirection9Directiond+0xc2>
	case STOP:
		speedL(0);
 80028f4:	f04f 0000 	mov.w	r0, #0
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f7ff ff5e 	bl	80027bc <_Z6speedLd>
		speedR(0);
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	f7ff ff7c 	bl	8002804 <_Z6speedRd>
		break;
 800290c:	bf00      	nop
	}

}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	bf00      	nop

08002918 <I2C1_ER_IRQHandler>:
		return (val2 + val3) / 2;
	} else
		return (val1 + val3) / 2;
}

extern "C" void I2C1_ER_IRQHandler(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
 800291c:	4908      	ldr	r1, [pc, #32]	; (8002940 <I2C1_ER_IRQHandler+0x28>)
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <I2C1_ER_IRQHandler+0x2c>)
 8002920:	f7fe fe28 	bl	8001574 <I2C_GetITStatus>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <I2C1_ER_IRQHandler+0x24>
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 8002934:	4902      	ldr	r1, [pc, #8]	; (8002940 <I2C1_ER_IRQHandler+0x28>)
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <I2C1_ER_IRQHandler+0x2c>)
 8002938:	f7fe fe48 	bl	80015cc <I2C_ClearITPendingBit>
	}
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	01000400 	.word	0x01000400
 8002944:	40005400 	.word	0x40005400

08002948 <I2C1_EV_IRQHandler>:

extern "C" void I2C1_EV_IRQHandler(void) {
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	af00      	add	r7, sp, #0
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 800294c:	4bba      	ldr	r3, [pc, #744]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 800294e:	8a9b      	ldrh	r3, [r3, #20]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <I2C1_EV_IRQHandler+0x26>
		I2C1->SR1;
 8002964:	4bb4      	ldr	r3, [pc, #720]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 8002966:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->SR2;
 8002968:	4bb3      	ldr	r3, [pc, #716]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 800296a:	8b1b      	ldrh	r3, [r3, #24]
	}
}

extern "C" void I2C1_EV_IRQHandler(void) {
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 800296c:	e7ee      	b.n	800294c <I2C1_EV_IRQHandler+0x4>
		I2C1->SR1;
		I2C1->SR2;
	}
	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 800296e:	4bb2      	ldr	r3, [pc, #712]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 8002970:	8a9b      	ldrh	r3, [r3, #20]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 822a 	beq.w	8002ddc <I2C1_EV_IRQHandler+0x494>
		if (!i2c1_recv_reg_done) {
 8002988:	4bac      	ldr	r3, [pc, #688]	; (8002c3c <I2C1_EV_IRQHandler+0x2f4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80b5 	beq.w	8002b02 <I2C1_EV_IRQHandler+0x1ba>
			i2c1_reg = I2C1->DR;
 8002998:	4ba7      	ldr	r3, [pc, #668]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 800299a:	8a1b      	ldrh	r3, [r3, #16]
 800299c:	b29a      	uxth	r2, r3
 800299e:	4ba8      	ldr	r3, [pc, #672]	; (8002c40 <I2C1_EV_IRQHandler+0x2f8>)
 80029a0:	801a      	strh	r2, [r3, #0]
			i2c1_recv_reg_done = true;
 80029a2:	4ba6      	ldr	r3, [pc, #664]	; (8002c3c <I2C1_EV_IRQHandler+0x2f4>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
			i2c1_val = 0;
 80029a8:	4ba6      	ldr	r3, [pc, #664]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
			numberOfRecvValues = 0;
 80029ae:	4ba6      	ldr	r3, [pc, #664]	; (8002c48 <I2C1_EV_IRQHandler+0x300>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	801a      	strh	r2, [r3, #0]
			i2c_indexSendBuffer = 0;
 80029b4:	4ba5      	ldr	r3, [pc, #660]	; (8002c4c <I2C1_EV_IRQHandler+0x304>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
			switch (i2c1_reg) {
 80029ba:	4ba1      	ldr	r3, [pc, #644]	; (8002c40 <I2C1_EV_IRQHandler+0x2f8>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	3b64      	subs	r3, #100	; 0x64
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d8d4      	bhi.n	800296e <I2C1_EV_IRQHandler+0x26>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <I2C1_EV_IRQHandler+0x84>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	080029ff 	.word	0x080029ff
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a2b 	.word	0x08002a2b
 80029dc:	08002a51 	.word	0x08002a51
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002a9d 	.word	0x08002a9d
			case 100:
				longToI2CBuffer(x);
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <I2C1_EV_IRQHandler+0x308>)
 80029ea:	cb18      	ldmia	r3, {r3, r4}
 80029ec:	4618      	mov	r0, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	f7fe f818 	bl	8000a24 <__aeabi_d2iz>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff febe 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 80029fc:	e1ed      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 101:
				longToI2CBuffer(y);
 80029fe:	4b95      	ldr	r3, [pc, #596]	; (8002c54 <I2C1_EV_IRQHandler+0x30c>)
 8002a00:	cb18      	ldmia	r3, {r3, r4}
 8002a02:	4618      	mov	r0, r3
 8002a04:	4621      	mov	r1, r4
 8002a06:	f7fe f80d 	bl	8000a24 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff feb3 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 8002a12:	e1e2      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 102:
				longToI2CBuffer(z);
 8002a14:	4b90      	ldr	r3, [pc, #576]	; (8002c58 <I2C1_EV_IRQHandler+0x310>)
 8002a16:	cb18      	ldmia	r3, {r3, r4}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	f7fe f802 	bl	8000a24 <__aeabi_d2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fea8 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 8002a28:	e1d7      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 103:
				longToI2CBuffer(roll * 10000);
 8002a2a:	4b8c      	ldr	r3, [pc, #560]	; (8002c5c <I2C1_EV_IRQHandler+0x314>)
 8002a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a30:	a37f      	add	r3, pc, #508	; (adr r3, 8002c30 <I2C1_EV_IRQHandler+0x2e8>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fd5b 	bl	80004f0 <__aeabi_dmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4621      	mov	r1, r4
 8002a42:	f7fd ffef 	bl	8000a24 <__aeabi_d2iz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fe95 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 8002a4e:	e1c4      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 104:
				longToI2CBuffer(pitch * 10000);
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <I2C1_EV_IRQHandler+0x318>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	a376      	add	r3, pc, #472	; (adr r3, 8002c30 <I2C1_EV_IRQHandler+0x2e8>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fd48 	bl	80004f0 <__aeabi_dmul>
 8002a60:	4603      	mov	r3, r0
 8002a62:	460c      	mov	r4, r1
 8002a64:	4618      	mov	r0, r3
 8002a66:	4621      	mov	r1, r4
 8002a68:	f7fd ffdc 	bl	8000a24 <__aeabi_d2iz>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fe82 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 8002a74:	e1b1      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 105:
				longToI2CBuffer(yaw * 10000);
 8002a76:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <I2C1_EV_IRQHandler+0x31c>)
 8002a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7c:	a36c      	add	r3, pc, #432	; (adr r3, 8002c30 <I2C1_EV_IRQHandler+0x2e8>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fd35 	bl	80004f0 <__aeabi_dmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	f7fd ffc9 	bl	8000a24 <__aeabi_d2iz>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fe6f 	bl	8002778 <_Z15longToI2CBufferl>
				break;
 8002a9a:	e19e      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
			case 106:
				i2c_sendBuffer[0] = 0;
 8002a9c:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
				i2c_sendBuffer[1] = 0;
 8002aa2:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	705a      	strb	r2, [r3, #1]
				i2c_sendBuffer[2] = 0;
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	709a      	strb	r2, [r3, #2]
				i2c_sendBuffer[3] = 0;
 8002aae:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	70da      	strb	r2, [r3, #3]
				if (buttons[0])
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <I2C1_EV_IRQHandler+0x324>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <I2C1_EV_IRQHandler+0x184>
					i2c_sendBuffer[0] |= 1;
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002aca:	701a      	strb	r2, [r3, #0]
				if (buttons[1])
 8002acc:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <I2C1_EV_IRQHandler+0x324>)
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <I2C1_EV_IRQHandler+0x19c>
					i2c_sendBuffer[0] |= 2;
 8002ad6:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002ae2:	701a      	strb	r2, [r3, #0]
				if (buttons[2])
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <I2C1_EV_IRQHandler+0x324>)
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8174 	beq.w	8002dd8 <I2C1_EV_IRQHandler+0x490>
					i2c_sendBuffer[0] |= 4;
 8002af0:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <I2C1_EV_IRQHandler+0x320>)
 8002afc:	701a      	strb	r2, [r3, #0]
				break;
 8002afe:	bf00      	nop
 8002b00:	e16a      	b.n	8002dd8 <I2C1_EV_IRQHandler+0x490>
			}
		} else {
			i2c1_val = (i2c1_val << 8) | I2C1->DR;
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <I2C1_EV_IRQHandler+0x2f0>)
 8002b0e:	8a1b      	ldrh	r3, [r3, #16]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b21a      	sxth	r2, r3
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002b1a:	801a      	strh	r2, [r3, #0]
			numberOfRecvValues++;
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <I2C1_EV_IRQHandler+0x300>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <I2C1_EV_IRQHandler+0x300>)
 8002b26:	801a      	strh	r2, [r3, #0]
			if (numberOfRecvValues == 2) {
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <I2C1_EV_IRQHandler+0x300>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	f47f af1e 	bne.w	800296e <I2C1_EV_IRQHandler+0x26>
				switch (i2c1_reg) {
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <I2C1_EV_IRQHandler+0x2f8>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	f63f af18 	bhi.w	800296e <I2C1_EV_IRQHandler+0x26>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <I2C1_EV_IRQHandler+0x1fc>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b9d 	.word	0x08002b9d
 8002b4c:	08002bc1 	.word	0x08002bc1
 8002b50:	08002be5 	.word	0x08002be5
 8002b54:	08002c09 	.word	0x08002c09
 8002b58:	08002c71 	.word	0x08002c71
 8002b5c:	08002c95 	.word	0x08002c95
 8002b60:	08002cb1 	.word	0x08002cb1
 8002b64:	08002ccd 	.word	0x08002ccd
 8002b68:	08002ce9 	.word	0x08002ce9
 8002b6c:	08002d05 	.word	0x08002d05
 8002b70:	08002d21 	.word	0x08002d21
 8002b74:	08002dbf 	.word	0x08002dbf
				case 1:
					getMotor(1)->setSpeedMotor((double) i2c1_val);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff facb 	bl	8002114 <_Z8getMotori>
 8002b7e:	4605      	mov	r5, r0
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fc4c 	bl	8000424 <__aeabi_i2d>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	461a      	mov	r2, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	4628      	mov	r0, r5
 8002b96:	f7ff fa23 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002b9a:	e11e      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 2:
					getMotor(2)->setSpeedMotor((double) i2c1_val);
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f7ff fab9 	bl	8002114 <_Z8getMotori>
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fc3a 	bl	8000424 <__aeabi_i2d>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f7ff fa11 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002bbe:	e10c      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 3:
					getMotor(3)->setSpeedMotor((double) i2c1_val);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f7ff faa7 	bl	8002114 <_Z8getMotori>
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fc28 	bl	8000424 <__aeabi_i2d>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f7ff f9ff 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002be2:	e0fa      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 4:
					getMotor(4)->setSpeedMotor((double) i2c1_val);
 8002be4:	2004      	movs	r0, #4
 8002be6:	f7ff fa95 	bl	8002114 <_Z8getMotori>
 8002bea:	4605      	mov	r5, r0
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc16 	bl	8000424 <__aeabi_i2d>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	f7ff f9ed 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002c06:	e0e8      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 5:
					getMotor(5)->setSpeedMotor((double) i2c1_val);
 8002c08:	2005      	movs	r0, #5
 8002c0a:	f7ff fa83 	bl	8002114 <_Z8getMotori>
 8002c0e:	4605      	mov	r5, r0
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <I2C1_EV_IRQHandler+0x2fc>)
 8002c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc04 	bl	8000424 <__aeabi_i2d>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	461a      	mov	r2, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f7ff f9db 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002c2a:	e0d6      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
 8002c2c:	f3af 8000 	nop.w
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40c38800 	.word	0x40c38800
 8002c38:	40005400 	.word	0x40005400
 8002c3c:	200000c2 	.word	0x200000c2
 8002c40:	200000c0 	.word	0x200000c0
 8002c44:	200000c6 	.word	0x200000c6
 8002c48:	200000c4 	.word	0x200000c4
 8002c4c:	200000c8 	.word	0x200000c8
 8002c50:	200000d8 	.word	0x200000d8
 8002c54:	200000e0 	.word	0x200000e0
 8002c58:	200000e8 	.word	0x200000e8
 8002c5c:	200000f8 	.word	0x200000f8
 8002c60:	20000100 	.word	0x20000100
 8002c64:	200000f0 	.word	0x200000f0
 8002c68:	200000cc 	.word	0x200000cc
 8002c6c:	200000d0 	.word	0x200000d0
				case 6:
					getMotor(6)->setSpeedMotor((double) i2c1_val);
 8002c70:	2006      	movs	r0, #6
 8002c72:	f7ff fa4f 	bl	8002114 <_Z8getMotori>
 8002c76:	4605      	mov	r5, r0
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fbd0 	bl	8000424 <__aeabi_i2d>
 8002c84:	4603      	mov	r3, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7ff f9a7 	bl	8001fe0 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002c92:	e0a2      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 7:
					goDirection(FORWARD, (double) i2c1_val);
 8002c94:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fbc2 	bl	8000424 <__aeabi_i2d>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fdcf 	bl	800284c <_Z11goDirection9Directiond>
					break;
 8002cae:	e094      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 8:
					goDirection(BACKWARD, (double) i2c1_val);
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fbb4 	bl	8000424 <__aeabi_i2d>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff fdc1 	bl	800284c <_Z11goDirection9Directiond>
					break;
 8002cca:	e086      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 9:
					goDirection(ROTATE_CLOCKWISE, (double) i2c1_val);
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fba6 	bl	8000424 <__aeabi_i2d>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	2002      	movs	r0, #2
 8002ce2:	f7ff fdb3 	bl	800284c <_Z11goDirection9Directiond>
					break;
 8002ce6:	e078      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 10:
					goDirection(ROTATE_ANTICLOCKWISE, (double) i2c1_val);
 8002ce8:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fb98 	bl	8000424 <__aeabi_i2d>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	2003      	movs	r0, #3
 8002cfe:	f7ff fda5 	bl	800284c <_Z11goDirection9Directiond>
					break;
 8002d02:	e06a      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 11:
					goDirection(STOP, (double) i2c1_val);
 8002d04:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fb8a 	bl	8000424 <__aeabi_i2d>
 8002d10:	4603      	mov	r3, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	461a      	mov	r2, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	2004      	movs	r0, #4
 8002d1a:	f7ff fd97 	bl	800284c <_Z11goDirection9Directiond>
					break;
 8002d1e:	e05c      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 12:
					setLed(0, (i2c1_val & 0x01) && 0x01,
 8002d20:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2d9      	uxtb	r1, r3
							(i2c1_val & 0x02) && 0x02);
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f003 0302 	and.w	r3, r3, #2
					break;
				case 11:
					goDirection(STOP, (double) i2c1_val);
					break;
				case 12:
					setLed(0, (i2c1_val & 0x01) && 0x01,
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
							(i2c1_val & 0x02) && 0x02);
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff fb32 	bl	80023b8 <_Z6setLedcbb>
					setLed(1, (i2c1_val & 0x04) && 0x04,
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2d9      	uxtb	r1, r3
							(i2c1_val & 0x08) && 0x08);
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f003 0308 	and.w	r3, r3, #8
					goDirection(STOP, (double) i2c1_val);
					break;
				case 12:
					setLed(0, (i2c1_val & 0x01) && 0x01,
							(i2c1_val & 0x02) && 0x02);
					setLed(1, (i2c1_val & 0x04) && 0x04,
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
							(i2c1_val & 0x08) && 0x08);
 8002d80:	461a      	mov	r2, r3
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7ff fb18 	bl	80023b8 <_Z6setLedcbb>
					setLed(2, (i2c1_val & 0x10) && 0x10,
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2d9      	uxtb	r1, r3
							(i2c1_val & 0x20) && 0x20);
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f003 0320 	and.w	r3, r3, #32
				case 12:
					setLed(0, (i2c1_val & 0x01) && 0x01,
							(i2c1_val & 0x02) && 0x02);
					setLed(1, (i2c1_val & 0x04) && 0x04,
							(i2c1_val & 0x08) && 0x08);
					setLed(2, (i2c1_val & 0x10) && 0x10,
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
							(i2c1_val & 0x20) && 0x20);
 8002db4:	461a      	mov	r2, r3
 8002db6:	2002      	movs	r0, #2
 8002db8:	f7ff fafe 	bl	80023b8 <_Z6setLedcbb>
					break;
 8002dbc:	e00d      	b.n	8002dda <I2C1_EV_IRQHandler+0x492>
				case 13:
					setServo((double) i2c1_val);
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <I2C1_EV_IRQHandler+0x518>)
 8002dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb2d 	bl	8000424 <__aeabi_i2d>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	f7ff fc2d 	bl	8002630 <_Z8setServod>
 8002dd6:	e5ca      	b.n	800296e <I2C1_EV_IRQHandler+0x26>
					i2c_sendBuffer[0] |= 1;
				if (buttons[1])
					i2c_sendBuffer[0] |= 2;
				if (buttons[2])
					i2c_sendBuffer[0] |= 4;
				break;
 8002dd8:	bf00      	nop
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
		I2C1->SR1;
		I2C1->SR2;
	}
	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 8002dda:	e5c8      	b.n	800296e <I2C1_EV_IRQHandler+0x26>
				}
			}
		}
	}
//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002dde:	8a9b      	ldrh	r3, [r3, #20]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <I2C1_EV_IRQHandler+0x4e0>
		if (i2c_indexSendBuffer < I2C_MAX_SEND_BUFFER) {
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <I2C1_EV_IRQHandler+0x520>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d80c      	bhi.n	8002e16 <I2C1_EV_IRQHandler+0x4ce>
			I2C1->DR = i2c_sendBuffer[i2c_indexSendBuffer++];
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <I2C1_EV_IRQHandler+0x520>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	b2c8      	uxtb	r0, r1
 8002e06:	4918      	ldr	r1, [pc, #96]	; (8002e68 <I2C1_EV_IRQHandler+0x520>)
 8002e08:	7008      	strb	r0, [r1, #0]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <I2C1_EV_IRQHandler+0x524>)
 8002e0e:	5c5b      	ldrb	r3, [r3, r1]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8213      	strh	r3, [r2, #16]
 8002e14:	e7e2      	b.n	8002ddc <I2C1_EV_IRQHandler+0x494>
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e1a:	8a9b      	ldrh	r3, [r3, #20]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8293      	strh	r3, [r2, #20]
				}
			}
		}
	}
//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 8002e26:	e7d9      	b.n	8002ddc <I2C1_EV_IRQHandler+0x494>
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}
//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e2a:	8a9b      	ldrh	r3, [r3, #20]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <I2C1_EV_IRQHandler+0x514>
		i2c1_recv_reg_done = false;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <I2C1_EV_IRQHandler+0x528>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
		I2C1->SR1;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e48:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->CR1 |= 0x1;
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <I2C1_EV_IRQHandler+0x51c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}
//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 8002e5a:	e7e5      	b.n	8002e28 <I2C1_EV_IRQHandler+0x4e0>
		i2c1_recv_reg_done = false;
		I2C1->SR1;
		I2C1->CR1 |= 0x1;
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e60:	200000c6 	.word	0x200000c6
 8002e64:	40005400 	.word	0x40005400
 8002e68:	200000c8 	.word	0x200000c8
 8002e6c:	200000cc 	.word	0x200000cc
 8002e70:	200000c2 	.word	0x200000c2

08002e74 <DMA1_Channel5_IRQHandler>:

extern "C" void DMA1_Channel5_IRQHandler(void) {
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 8002e7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e7e:	f7fd ffad 	bl	8000ddc <DMA_GetFlagStatus>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8117 	beq.w	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 8002e94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e98:	f7fd ffc8 	bl	8000e2c <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	488b      	ldr	r0, [pc, #556]	; (80030cc <DMA1_Channel5_IRQHandler+0x258>)
 8002ea0:	f7fe faf4 	bl	800148c <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4889      	ldr	r0, [pc, #548]	; (80030cc <DMA1_Channel5_IRQHandler+0x258>)
 8002ea8:	f7fe fa82 	bl	80013b0 <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 8002eac:	2100      	movs	r1, #0
 8002eae:	4888      	ldr	r0, [pc, #544]	; (80030d0 <DMA1_Channel5_IRQHandler+0x25c>)
 8002eb0:	f7fd ff5a 	bl	8000d68 <DMA_Cmd>

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
 8002eb4:	f7fe ff0a 	bl	8001ccc <I2C2_getReadRegister>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d029      	beq.n	8002f1c <DMA1_Channel5_IRQHandler+0xa8>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002ec8:	2301      	movs	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	f300 80f7 	bgt.w	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <DMA1_Channel5_IRQHandler+0x260>)
 8002eda:	5cd4      	ldrb	r4, [r2, r3]
 8002edc:	f7fe fed0 	bl	8001c80 <I2C2_getDeviceAddress>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d011      	beq.n	8002f14 <DMA1_Channel5_IRQHandler+0xa0>
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	f7ff f90f 	bl	8002114 <_Z8getMotori>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fe fed7 	bl	8001cac <I2C2_getRxBuffer>
 8002efe:	4603      	mov	r3, r0
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff f8b3 	bl	8002070 <_ZN5Motor13addDeltaTicksEs>
					I2C2_clearReadRegister();
 8002f0a:	f7fe fee9 	bl	8001ce0 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002f0e:	f7fe fec1 	bl	8001c94 <I2C2_clearDeviceAddress>
					break;
 8002f12:	e0d6      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e7d7      	b.n	8002ecc <DMA1_Channel5_IRQHandler+0x58>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
 8002f1c:	f7fe fed6 	bl	8001ccc <I2C2_getReadRegister>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d029      	beq.n	8002f84 <DMA1_Channel5_IRQHandler+0x110>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002f30:	2301      	movs	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	f300 80c3 	bgt.w	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	4a64      	ldr	r2, [pc, #400]	; (80030d4 <DMA1_Channel5_IRQHandler+0x260>)
 8002f42:	5cd4      	ldrb	r4, [r2, r3]
 8002f44:	f7fe fe9c 	bl	8001c80 <I2C2_getDeviceAddress>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d011      	beq.n	8002f7c <DMA1_Channel5_IRQHandler+0x108>
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
 8002f58:	6938      	ldr	r0, [r7, #16]
 8002f5a:	f7ff f8db 	bl	8002114 <_Z8getMotori>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe fea3 	bl	8001cac <I2C2_getRxBuffer>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff f89f 	bl	80020b0 <_ZN5Motor13setVoltageRawEt>
					I2C2_clearReadRegister();
 8002f72:	f7fe feb5 	bl	8001ce0 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002f76:	f7fe fe8d 	bl	8001c94 <I2C2_clearDeviceAddress>
					break;
 8002f7a:	e0a2      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e7d7      	b.n	8002f34 <DMA1_Channel5_IRQHandler+0xc0>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
 8002f84:	f7fe fea2 	bl	8001ccc <I2C2_getReadRegister>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d029      	beq.n	8002fec <DMA1_Channel5_IRQHandler+0x178>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	f300 808f 	bgt.w	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	4a4a      	ldr	r2, [pc, #296]	; (80030d4 <DMA1_Channel5_IRQHandler+0x260>)
 8002faa:	5cd4      	ldrb	r4, [r2, r3]
 8002fac:	f7fe fe68 	bl	8001c80 <I2C2_getDeviceAddress>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	429c      	cmp	r4, r3
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <DMA1_Channel5_IRQHandler+0x170>
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff f8a7 	bl	8002114 <_Z8getMotori>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fe fe6f 	bl	8001cac <I2C2_getRxBuffer>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff f879 	bl	80020cc <_ZN5Motor10setCurrentEt>
					I2C2_clearReadRegister();
 8002fda:	f7fe fe81 	bl	8001ce0 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002fde:	f7fe fe59 	bl	8001c94 <I2C2_clearDeviceAddress>
					break;
 8002fe2:	e06e      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e7d7      	b.n	8002f9c <DMA1_Channel5_IRQHandler+0x128>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
 8002fec:	f7fe fe6e 	bl	8001ccc <I2C2_getReadRegister>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d028      	beq.n	8003052 <DMA1_Channel5_IRQHandler+0x1de>
			for (int i = 1; i <= numberOfMotors; i++) {
 8003000:	2301      	movs	r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b06      	cmp	r3, #6
 8003008:	dc5b      	bgt.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3b01      	subs	r3, #1
 800300e:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <DMA1_Channel5_IRQHandler+0x260>)
 8003010:	5cd4      	ldrb	r4, [r2, r3]
 8003012:	f7fe fe35 	bl	8001c80 <I2C2_getDeviceAddress>
 8003016:	4603      	mov	r3, r0
 8003018:	429c      	cmp	r4, r3
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d011      	beq.n	800304a <DMA1_Channel5_IRQHandler+0x1d6>
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f7ff f874 	bl	8002114 <_Z8getMotori>
 800302c:	4604      	mov	r4, r0
 800302e:	2000      	movs	r0, #0
 8003030:	f7fe fe3c 	bl	8001cac <I2C2_getRxBuffer>
 8003034:	4603      	mov	r3, r0
 8003036:	b21b      	sxth	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff f82a 	bl	8002094 <_ZN5Motor11setSpeedRawEs>
					I2C2_clearReadRegister();
 8003040:	f7fe fe4e 	bl	8001ce0 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8003044:	f7fe fe26 	bl	8001c94 <I2C2_clearDeviceAddress>
					break;
 8003048:	e03b      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3301      	adds	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e7d8      	b.n	8003004 <DMA1_Channel5_IRQHandler+0x190>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETWHO_I_AM) {
 8003052:	f7fe fe3b 	bl	8001ccc <I2C2_getReadRegister>
 8003056:	4603      	mov	r3, r0
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d028      	beq.n	80030b8 <DMA1_Channel5_IRQHandler+0x244>
			for (int i = 1; i <= numberOfMotors; i++) {
 8003066:	2301      	movs	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b06      	cmp	r3, #6
 800306e:	dc28      	bgt.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <DMA1_Channel5_IRQHandler+0x260>)
 8003076:	5cd4      	ldrb	r4, [r2, r3]
 8003078:	f7fe fe02 	bl	8001c80 <I2C2_getDeviceAddress>
 800307c:	4603      	mov	r3, r0
 800307e:	429c      	cmp	r4, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d011      	beq.n	80030b0 <DMA1_Channel5_IRQHandler+0x23c>
					getMotor(i)->setTestValue((int8_t) I2C2_getRxBuffer(0));
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff f841 	bl	8002114 <_Z8getMotori>
 8003092:	4604      	mov	r4, r0
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe fe09 	bl	8001cac <I2C2_getRxBuffer>
 800309a:	4603      	mov	r3, r0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff f821 	bl	80020e8 <_ZN5Motor12setTestValueEh>
					I2C2_clearReadRegister();
 80030a6:	f7fe fe1b 	bl	8001ce0 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 80030aa:	f7fe fdf3 	bl	8001c94 <I2C2_clearDeviceAddress>
					break;
 80030ae:	e008      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETWHO_I_AM) {
			for (int i = 1; i <= numberOfMotors; i++) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3301      	adds	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	e7d8      	b.n	800306a <DMA1_Channel5_IRQHandler+0x1f6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else {
			I2C2_clearReadRegister();
 80030b8:	f7fe fe12 	bl	8001ce0 <I2C2_clearReadRegister>
			I2C2_clearDeviceAddress();
 80030bc:	f7fe fdea 	bl	8001c94 <I2C2_clearDeviceAddress>
		}

	}
}
 80030c0:	e7ff      	b.n	80030c2 <DMA1_Channel5_IRQHandler+0x24e>
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40005800 	.word	0x40005800
 80030d0:	40026058 	.word	0x40026058
 80030d4:	080037c8 	.word	0x080037c8

080030d8 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80030dc:	2101      	movs	r1, #1
 80030de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030e2:	f7fe fd4b 	bl	8001b7c <TIM_GetITStatus>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <TIM2_IRQHandler+0x2e>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80030f6:	2101      	movs	r1, #1
 80030f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030fc:	f7fe fd68 	bl	8001bd0 <TIM_ClearITPendingBit>
		timePosition = true;
 8003100:	4b02      	ldr	r3, [pc, #8]	; (800310c <TIM2_IRQHandler+0x34>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
	}
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200000d3 	.word	0x200000d3

08003110 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler(void) {
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line6) != RESET) {
 8003114:	2040      	movs	r0, #64	; 0x40
 8003116:	f7fd ff15 	bl	8000f44 <EXTI_GetITStatus>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <EXTI9_5_IRQHandler+0x38>
		buttons[0] = !(GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6;
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <EXTI9_5_IRQHandler+0xac>)
 800312c:	8a1b      	ldrh	r3, [r3, #16]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <EXTI9_5_IRQHandler+0x2c>
 8003138:	2201      	movs	r2, #1
 800313a:	e000      	b.n	800313e <EXTI9_5_IRQHandler+0x2e>
 800313c:	2200      	movs	r2, #0
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <EXTI9_5_IRQHandler+0xb0>)
 8003140:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 8003142:	2040      	movs	r0, #64	; 0x40
 8003144:	f7fd ff22 	bl	8000f8c <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line8) != RESET) {
 8003148:	f44f 7080 	mov.w	r0, #256	; 0x100
 800314c:	f7fd fefa 	bl	8000f44 <EXTI_GetITStatus>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <EXTI9_5_IRQHandler+0x70>
		buttons[1] = !(GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8;
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <EXTI9_5_IRQHandler+0xac>)
 8003162:	8a1b      	ldrh	r3, [r3, #16]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <EXTI9_5_IRQHandler+0x62>
 800316e:	2201      	movs	r2, #1
 8003170:	e000      	b.n	8003174 <EXTI9_5_IRQHandler+0x64>
 8003172:	2200      	movs	r2, #0
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <EXTI9_5_IRQHandler+0xb0>)
 8003176:	705a      	strb	r2, [r3, #1]
		EXTI_ClearITPendingBit(EXTI_Line8);
 8003178:	f44f 7080 	mov.w	r0, #256	; 0x100
 800317c:	f7fd ff06 	bl	8000f8c <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line9) != RESET) {
 8003180:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003184:	f7fd fede 	bl	8000f44 <EXTI_GetITStatus>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00f      	beq.n	80031b8 <EXTI9_5_IRQHandler+0xa8>
		buttons[2] = !(GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <EXTI9_5_IRQHandler+0xac>)
 800319a:	8a1b      	ldrh	r3, [r3, #16]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <EXTI9_5_IRQHandler+0x9a>
 80031a6:	2201      	movs	r2, #1
 80031a8:	e000      	b.n	80031ac <EXTI9_5_IRQHandler+0x9c>
 80031aa:	2200      	movs	r2, #0
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <EXTI9_5_IRQHandler+0xb0>)
 80031ae:	709a      	strb	r2, [r3, #2]
		EXTI_ClearITPendingBit(EXTI_Line9);
 80031b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031b4:	f7fd feea 	bl	8000f8c <EXTI_ClearITPendingBit>
	}

}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40020800 	.word	0x40020800
 80031c0:	200000d0 	.word	0x200000d0

080031c4 <main>:

double lastDistance[6];
int main(void) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	InitializePWMServo();
 80031c8:	f7ff fa90 	bl	80026ec <_Z18InitializePWMServov>
	Leds_Init();
 80031cc:	f7ff f954 	bl	8002478 <_Z9Leds_Initv>
	Buttons_Init();
 80031d0:	f7ff f97e 	bl	80024d0 <_Z12Buttons_Initv>
	I2C2_Init();
 80031d4:	f7fe fd90 	bl	8001cf8 <I2C2_Init>
	I2C1_Init();
 80031d8:	f7fe fe40 	bl	8001e5c <I2C1_Init>
	InitializeTimer();
 80031dc:	f7ff f9f4 	bl	80025c8 <_Z15InitializeTimerv>
	Ultrasonic_init();
 80031e0:	f7ff f80c 	bl	80021fc <_Z15Ultrasonic_initv>
	ultTriger(0);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7ff f883 	bl	80022f0 <_Z9ultTrigeri>
	while (1) {
 80031ea:	e7fe      	b.n	80031ea <main+0x26>

080031ec <_Z41__static_initialization_and_destruction_0ii>:
		 getMotor(5)->DMADeltaTicksInvoke();
		 getMotor(6)->DMADeltaTicksInvoke();
		 for (int i = 0; i < 1000; i++);
		 }*/
	}
}
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d146      	bne.n	800328a <_Z41__static_initialization_and_destruction_0ii+0x9e>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003202:	4293      	cmp	r3, r2
 8003204:	d141      	bne.n	800328a <_Z41__static_initialization_and_destruction_0ii+0x9e>
#include <math.h>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
 8003206:	2014      	movs	r0, #20
 8003208:	f000 f94e 	bl	80034a8 <_Znwj>
 800320c:	4603      	mov	r3, r0
 800320e:	461c      	mov	r4, r3
 8003210:	2102      	movs	r1, #2
 8003212:	4620      	mov	r0, r4
 8003214:	f7fe fe9a 	bl	8001f4c <_ZN5MotorC1Eh>
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800321a:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 800321c:	2014      	movs	r0, #20
 800321e:	f000 f943 	bl	80034a8 <_Znwj>
 8003222:	4603      	mov	r3, r0
 8003224:	461c      	mov	r4, r3
 8003226:	2104      	movs	r1, #4
 8003228:	4620      	mov	r0, r4
 800322a:	f7fe fe8f 	bl	8001f4c <_ZN5MotorC1Eh>
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003230:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 8003232:	2014      	movs	r0, #20
 8003234:	f000 f938 	bl	80034a8 <_Znwj>
 8003238:	4603      	mov	r3, r0
 800323a:	461c      	mov	r4, r3
 800323c:	2106      	movs	r1, #6
 800323e:	4620      	mov	r0, r4
 8003240:	f7fe fe84 	bl	8001f4c <_ZN5MotorC1Eh>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003246:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 8003248:	2014      	movs	r0, #20
 800324a:	f000 f92d 	bl	80034a8 <_Znwj>
 800324e:	4603      	mov	r3, r0
 8003250:	461c      	mov	r4, r3
 8003252:	2108      	movs	r1, #8
 8003254:	4620      	mov	r0, r4
 8003256:	f7fe fe79 	bl	8001f4c <_ZN5MotorC1Eh>
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800325c:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 800325e:	2014      	movs	r0, #20
 8003260:	f000 f922 	bl	80034a8 <_Znwj>
 8003264:	4603      	mov	r3, r0
 8003266:	461c      	mov	r4, r3
 8003268:	210a      	movs	r1, #10
 800326a:	4620      	mov	r0, r4
 800326c:	f7fe fe6e 	bl	8001f4c <_ZN5MotorC1Eh>
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003272:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 8003274:	2014      	movs	r0, #20
 8003276:	f000 f917 	bl	80034a8 <_Znwj>
 800327a:	4603      	mov	r3, r0
 800327c:	461c      	mov	r4, r3
 800327e:	210c      	movs	r1, #12
 8003280:	4620      	mov	r0, r4
 8003282:	f7fe fe63 	bl	8001f4c <_ZN5MotorC1Eh>
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003288:	601c      	str	r4, [r3, #0]
		 getMotor(5)->DMADeltaTicksInvoke();
		 getMotor(6)->DMADeltaTicksInvoke();
		 for (int i = 0; i < 1000; i++);
		 }*/
	}
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	200000a8 	.word	0x200000a8
 8003298:	200000ac 	.word	0x200000ac
 800329c:	200000b0 	.word	0x200000b0
 80032a0:	200000b4 	.word	0x200000b4
 80032a4:	200000b8 	.word	0x200000b8
 80032a8:	200000bc 	.word	0x200000bc

080032ac <_GLOBAL__sub_I_motor1>:
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032b4:	2001      	movs	r0, #1
 80032b6:	f7ff ff99 	bl	80031ec <_Z41__static_initialization_and_destruction_0ii>
 80032ba:	bd80      	pop	{r7, pc}

080032bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032c2:	e003      	b.n	80032cc <LoopCopyDataInit>

080032c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80032c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032ca:	3104      	adds	r1, #4

080032cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80032d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032d4:	d3f6      	bcc.n	80032c4 <CopyDataInit>
  ldr r2, =_sbss
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80032d8:	e002      	b.n	80032e0 <LoopFillZerobss>

080032da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80032dc:	f842 3b04 	str.w	r3, [r2], #4

080032e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80032e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032e4:	d3f9      	bcc.n	80032da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032e6:	f000 f841 	bl	800336c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ea:	f000 f901 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ee:	f7ff ff69 	bl	80031c4 <main>
  bx lr
 80032f2:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032f4:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80032f8:	080037dc 	.word	0x080037dc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003300:	20000084 	.word	0x20000084
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003304:	20000088 	.word	0x20000088
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003308:	20000148 	.word	0x20000148

0800330c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC1_IRQHandler>
	...

08003310 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003320:	e7fe      	b.n	8003320 <HardFault_Handler+0x4>
 8003322:	bf00      	nop

08003324 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003328:	e7fe      	b.n	8003328 <MemManage_Handler+0x4>
 800332a:	bf00      	nop

0800332c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003330:	e7fe      	b.n	8003330 <BusFault_Handler+0x4>
 8003332:	bf00      	nop

08003334 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003338:	e7fe      	b.n	8003338 <UsageFault_Handler+0x4>
 800333a:	bf00      	nop

0800333c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <SystemInit+0x5c>)
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <SystemInit+0x5c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800337c:	4912      	ldr	r1, [pc, #72]	; (80033c8 <SystemInit+0x5c>)
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <SystemInit+0x5c>)
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <SystemInit+0x60>)
 8003384:	4013      	ands	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <SystemInit+0x5c>)
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <SystemInit+0x5c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003392:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8003396:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <SystemInit+0x5c>)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <SystemInit+0x5c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80033a4:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <SystemInit+0x5c>)
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <SystemInit+0x5c>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80033ae:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <SystemInit+0x5c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80033b6:	f000 f80d 	bl	80033d4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <SystemInit+0x64>)
 80033bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033c0:	609a      	str	r2, [r3, #8]
#endif
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	88ffc00c 	.word	0x88ffc00c
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
  __IO uint32_t  MSIStatus = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  if ((RCC->CR & RCC_CR_MSIRDY) != RESET)
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <SetSysClock+0xc8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <SetSysClock+0x1c>
  {
    MSIStatus = (uint32_t)0x01;
 80033ea:	2301      	movs	r3, #1
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	e001      	b.n	80033f4 <SetSysClock+0x20>
  }
  else
  {
    MSIStatus = (uint32_t)0x00;
 80033f0:	2300      	movs	r3, #0
 80033f2:	607b      	str	r3, [r7, #4]
  }
   if (MSIStatus == (uint32_t)0x01)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d14b      	bne.n	8003492 <SetSysClock+0xbe>
   {
    /* Flash 0 wait state */
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80033fa:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <SetSysClock+0xcc>)
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <SetSysClock+0xcc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]
    
    /* Disable Prefetch Buffer */
    FLASH->ACR &= ~FLASH_ACR_PRFTEN;
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <SetSysClock+0xcc>)
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <SetSysClock+0xcc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0302 	bic.w	r3, r3, #2
 8003410:	6013      	str	r3, [r2, #0]

    /* Disable 64-bit access */
    FLASH->ACR &= ~FLASH_ACR_ACC64;
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <SetSysClock+0xcc>)
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <SetSysClock+0xcc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <SetSysClock+0xc8>)
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <SetSysClock+0xc8>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 2 (1.5 V) */
    PWR->CR = PWR_CR_VOS_1;
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <SetSysClock+0xd0>)
 800342c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003430:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8003432:	bf00      	nop
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <SetSysClock+0xd0>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f9      	bne.n	8003434 <SetSysClock+0x60>
    {
    }
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <SetSysClock+0xc8>)
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <SetSysClock+0xc8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <SetSysClock+0xc8>)
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <SetSysClock+0xc8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <SetSysClock+0xc8>)
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <SetSysClock+0xc8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	6093      	str	r3, [r2, #8]
  
    RCC->ICSCR &= (uint32_t)((uint32_t)~(RCC_ICSCR_MSIRANGE));
 8003458:	4a10      	ldr	r2, [pc, #64]	; (800349c <SetSysClock+0xc8>)
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <SetSysClock+0xc8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003462:	6053      	str	r3, [r2, #4]
    RCC->ICSCR |= (uint32_t)RCC_ICSCR_MSIRANGE_5;
 8003464:	4a0d      	ldr	r2, [pc, #52]	; (800349c <SetSysClock+0xc8>)
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <SetSysClock+0xc8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800346e:	6053      	str	r3, [r2, #4]

    /* Select MSI as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SetSysClock+0xc8>)
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <SetSysClock+0xc8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <SetSysClock+0xc8>)
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <SetSysClock+0xc8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	6093      	str	r3, [r2, #8]

    /* Wait till MSI is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_MSI)
 8003484:	bf00      	nop
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <SetSysClock+0xc8>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f9      	bne.n	8003486 <SetSysClock+0xb2>
  else
  {
    /* If MSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40023800 	.word	0x40023800
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40007000 	.word	0x40007000

080034a8 <_Znwj>:
 80034a8:	b510      	push	{r4, lr}
 80034aa:	2800      	cmp	r0, #0
 80034ac:	bf14      	ite	ne
 80034ae:	4604      	movne	r4, r0
 80034b0:	2401      	moveq	r4, #1
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f842 	bl	800353c <malloc>
 80034b8:	b930      	cbnz	r0, 80034c8 <_Znwj+0x20>
 80034ba:	f000 f809 	bl	80034d0 <_ZSt15get_new_handlerv>
 80034be:	b908      	cbnz	r0, 80034c4 <_Znwj+0x1c>
 80034c0:	f000 f80e 	bl	80034e0 <abort>
 80034c4:	4780      	blx	r0
 80034c6:	e7f4      	b.n	80034b2 <_Znwj+0xa>
 80034c8:	bd10      	pop	{r4, pc}

080034ca <_ZdlPv>:
 80034ca:	f000 b83f 	b.w	800354c <free>
	...

080034d0 <_ZSt15get_new_handlerv>:
 80034d0:	4b02      	ldr	r3, [pc, #8]	; (80034dc <_ZSt15get_new_handlerv+0xc>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f3bf 8f5f 	dmb	sy
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	2000010c 	.word	0x2000010c

080034e0 <abort>:
 80034e0:	b508      	push	{r3, lr}
 80034e2:	2006      	movs	r0, #6
 80034e4:	f000 f91e 	bl	8003724 <raise>
 80034e8:	2001      	movs	r0, #1
 80034ea:	f000 f957 	bl	800379c <_exit>
	...

080034f0 <__libc_init_array>:
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <__libc_init_array+0x3c>)
 80034f2:	b570      	push	{r4, r5, r6, lr}
 80034f4:	461e      	mov	r6, r3
 80034f6:	4c0e      	ldr	r4, [pc, #56]	; (8003530 <__libc_init_array+0x40>)
 80034f8:	2500      	movs	r5, #0
 80034fa:	1ae4      	subs	r4, r4, r3
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	42a5      	cmp	r5, r4
 8003500:	d004      	beq.n	800350c <__libc_init_array+0x1c>
 8003502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003506:	4798      	blx	r3
 8003508:	3501      	adds	r5, #1
 800350a:	e7f8      	b.n	80034fe <__libc_init_array+0xe>
 800350c:	f000 f948 	bl	80037a0 <_init>
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <__libc_init_array+0x44>)
 8003512:	4c09      	ldr	r4, [pc, #36]	; (8003538 <__libc_init_array+0x48>)
 8003514:	461e      	mov	r6, r3
 8003516:	1ae4      	subs	r4, r4, r3
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2500      	movs	r5, #0
 800351c:	42a5      	cmp	r5, r4
 800351e:	d004      	beq.n	800352a <__libc_init_array+0x3a>
 8003520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003524:	4798      	blx	r3
 8003526:	3501      	adds	r5, #1
 8003528:	e7f8      	b.n	800351c <__libc_init_array+0x2c>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	080037d0 	.word	0x080037d0
 8003530:	080037d0 	.word	0x080037d0
 8003534:	080037d0 	.word	0x080037d0
 8003538:	080037d8 	.word	0x080037d8

0800353c <malloc>:
 800353c:	4b02      	ldr	r3, [pc, #8]	; (8003548 <malloc+0xc>)
 800353e:	4601      	mov	r1, r0
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	f000 b857 	b.w	80035f4 <_malloc_r>
 8003546:	bf00      	nop
 8003548:	20000080 	.word	0x20000080

0800354c <free>:
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <free+0xc>)
 800354e:	4601      	mov	r1, r0
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	f000 b803 	b.w	800355c <_free_r>
 8003556:	bf00      	nop
 8003558:	20000080 	.word	0x20000080

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d044      	beq.n	80035ee <_free_r+0x92>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f8f4 	bl	800375c <__malloc_lock>
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <_free_r+0x94>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4611      	mov	r1, r2
 800357a:	b913      	cbnz	r3, 8003582 <_free_r+0x26>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	e030      	b.n	80035e4 <_free_r+0x88>
 8003582:	42a3      	cmp	r3, r4
 8003584:	d90d      	bls.n	80035a2 <_free_r+0x46>
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	18a0      	adds	r0, r4, r2
 800358a:	4283      	cmp	r3, r0
 800358c:	bf01      	itttt	eq
 800358e:	6818      	ldreq	r0, [r3, #0]
 8003590:	685b      	ldreq	r3, [r3, #4]
 8003592:	1812      	addeq	r2, r2, r0
 8003594:	6022      	streq	r2, [r4, #0]
 8003596:	6063      	str	r3, [r4, #4]
 8003598:	600c      	str	r4, [r1, #0]
 800359a:	e023      	b.n	80035e4 <_free_r+0x88>
 800359c:	42a2      	cmp	r2, r4
 800359e:	d803      	bhi.n	80035a8 <_free_r+0x4c>
 80035a0:	4613      	mov	r3, r2
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d1f9      	bne.n	800359c <_free_r+0x40>
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	1819      	adds	r1, r3, r0
 80035ac:	42a1      	cmp	r1, r4
 80035ae:	d10b      	bne.n	80035c8 <_free_r+0x6c>
 80035b0:	6821      	ldr	r1, [r4, #0]
 80035b2:	4401      	add	r1, r0
 80035b4:	1858      	adds	r0, r3, r1
 80035b6:	4282      	cmp	r2, r0
 80035b8:	6019      	str	r1, [r3, #0]
 80035ba:	d113      	bne.n	80035e4 <_free_r+0x88>
 80035bc:	6810      	ldr	r0, [r2, #0]
 80035be:	6852      	ldr	r2, [r2, #4]
 80035c0:	4401      	add	r1, r0
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	e00d      	b.n	80035e4 <_free_r+0x88>
 80035c8:	d902      	bls.n	80035d0 <_free_r+0x74>
 80035ca:	230c      	movs	r3, #12
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	e009      	b.n	80035e4 <_free_r+0x88>
 80035d0:	6821      	ldr	r1, [r4, #0]
 80035d2:	1860      	adds	r0, r4, r1
 80035d4:	4282      	cmp	r2, r0
 80035d6:	bf01      	itttt	eq
 80035d8:	6810      	ldreq	r0, [r2, #0]
 80035da:	6852      	ldreq	r2, [r2, #4]
 80035dc:	1809      	addeq	r1, r1, r0
 80035de:	6021      	streq	r1, [r4, #0]
 80035e0:	6062      	str	r2, [r4, #4]
 80035e2:	605c      	str	r4, [r3, #4]
 80035e4:	4628      	mov	r0, r5
 80035e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035ea:	f000 b8b8 	b.w	800375e <__malloc_unlock>
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	20000114 	.word	0x20000114

080035f4 <_malloc_r>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	1ccd      	adds	r5, r1, #3
 80035f8:	f025 0503 	bic.w	r5, r5, #3
 80035fc:	3508      	adds	r5, #8
 80035fe:	2d0c      	cmp	r5, #12
 8003600:	bf38      	it	cc
 8003602:	250c      	movcc	r5, #12
 8003604:	2d00      	cmp	r5, #0
 8003606:	4606      	mov	r6, r0
 8003608:	db01      	blt.n	800360e <_malloc_r+0x1a>
 800360a:	42a9      	cmp	r1, r5
 800360c:	d902      	bls.n	8003614 <_malloc_r+0x20>
 800360e:	230c      	movs	r3, #12
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	e046      	b.n	80036a2 <_malloc_r+0xae>
 8003614:	f000 f8a2 	bl	800375c <__malloc_lock>
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <_malloc_r+0xb4>)
 800361a:	681c      	ldr	r4, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4621      	mov	r1, r4
 8003620:	b1a1      	cbz	r1, 800364c <_malloc_r+0x58>
 8003622:	680b      	ldr	r3, [r1, #0]
 8003624:	1b5b      	subs	r3, r3, r5
 8003626:	d40e      	bmi.n	8003646 <_malloc_r+0x52>
 8003628:	2b0b      	cmp	r3, #11
 800362a:	d903      	bls.n	8003634 <_malloc_r+0x40>
 800362c:	600b      	str	r3, [r1, #0]
 800362e:	18cc      	adds	r4, r1, r3
 8003630:	50cd      	str	r5, [r1, r3]
 8003632:	e01e      	b.n	8003672 <_malloc_r+0x7e>
 8003634:	428c      	cmp	r4, r1
 8003636:	bf0b      	itete	eq
 8003638:	6863      	ldreq	r3, [r4, #4]
 800363a:	684b      	ldrne	r3, [r1, #4]
 800363c:	6013      	streq	r3, [r2, #0]
 800363e:	6063      	strne	r3, [r4, #4]
 8003640:	bf18      	it	ne
 8003642:	460c      	movne	r4, r1
 8003644:	e015      	b.n	8003672 <_malloc_r+0x7e>
 8003646:	460c      	mov	r4, r1
 8003648:	6849      	ldr	r1, [r1, #4]
 800364a:	e7e9      	b.n	8003620 <_malloc_r+0x2c>
 800364c:	4c17      	ldr	r4, [pc, #92]	; (80036ac <_malloc_r+0xb8>)
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	b91b      	cbnz	r3, 800365a <_malloc_r+0x66>
 8003652:	4630      	mov	r0, r6
 8003654:	f000 f82c 	bl	80036b0 <_sbrk_r>
 8003658:	6020      	str	r0, [r4, #0]
 800365a:	4629      	mov	r1, r5
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f827 	bl	80036b0 <_sbrk_r>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d018      	beq.n	8003698 <_malloc_r+0xa4>
 8003666:	1cc4      	adds	r4, r0, #3
 8003668:	f024 0403 	bic.w	r4, r4, #3
 800366c:	42a0      	cmp	r0, r4
 800366e:	d10d      	bne.n	800368c <_malloc_r+0x98>
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	4630      	mov	r0, r6
 8003674:	f000 f873 	bl	800375e <__malloc_unlock>
 8003678:	f104 000b 	add.w	r0, r4, #11
 800367c:	1d23      	adds	r3, r4, #4
 800367e:	f020 0007 	bic.w	r0, r0, #7
 8003682:	1ac3      	subs	r3, r0, r3
 8003684:	d00e      	beq.n	80036a4 <_malloc_r+0xb0>
 8003686:	425a      	negs	r2, r3
 8003688:	50e2      	str	r2, [r4, r3]
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4630      	mov	r0, r6
 8003690:	f000 f80e 	bl	80036b0 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d1eb      	bne.n	8003670 <_malloc_r+0x7c>
 8003698:	230c      	movs	r3, #12
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f85e 	bl	800375e <__malloc_unlock>
 80036a2:	2000      	movs	r0, #0
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	bf00      	nop
 80036a8:	20000114 	.word	0x20000114
 80036ac:	20000110 	.word	0x20000110

080036b0 <_sbrk_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4c06      	ldr	r4, [pc, #24]	; (80036cc <_sbrk_r+0x1c>)
 80036b4:	2300      	movs	r3, #0
 80036b6:	4605      	mov	r5, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	f000 f860 	bl	8003780 <_sbrk>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_sbrk_r+0x1a>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_sbrk_r+0x1a>
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20000144 	.word	0x20000144

080036d0 <_raise_r>:
 80036d0:	291f      	cmp	r1, #31
 80036d2:	b538      	push	{r3, r4, r5, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	460d      	mov	r5, r1
 80036d8:	d904      	bls.n	80036e4 <_raise_r+0x14>
 80036da:	2316      	movs	r3, #22
 80036dc:	6003      	str	r3, [r0, #0]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80036e6:	b112      	cbz	r2, 80036ee <_raise_r+0x1e>
 80036e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80036ec:	b94b      	cbnz	r3, 8003702 <_raise_r+0x32>
 80036ee:	4620      	mov	r0, r4
 80036f0:	f000 f832 	bl	8003758 <_getpid_r>
 80036f4:	462a      	mov	r2, r5
 80036f6:	4601      	mov	r1, r0
 80036f8:	4620      	mov	r0, r4
 80036fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036fe:	f000 b819 	b.w	8003734 <_kill_r>
 8003702:	2b01      	cmp	r3, #1
 8003704:	d00c      	beq.n	8003720 <_raise_r+0x50>
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	d103      	bne.n	8003712 <_raise_r+0x42>
 800370a:	2316      	movs	r3, #22
 800370c:	6003      	str	r3, [r0, #0]
 800370e:	2001      	movs	r0, #1
 8003710:	bd38      	pop	{r3, r4, r5, pc}
 8003712:	2400      	movs	r4, #0
 8003714:	4628      	mov	r0, r5
 8003716:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800371a:	4798      	blx	r3
 800371c:	4620      	mov	r0, r4
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	2000      	movs	r0, #0
 8003722:	bd38      	pop	{r3, r4, r5, pc}

08003724 <raise>:
 8003724:	4b02      	ldr	r3, [pc, #8]	; (8003730 <raise+0xc>)
 8003726:	4601      	mov	r1, r0
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	f7ff bfd1 	b.w	80036d0 <_raise_r>
 800372e:	bf00      	nop
 8003730:	20000080 	.word	0x20000080

08003734 <_kill_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4c07      	ldr	r4, [pc, #28]	; (8003754 <_kill_r+0x20>)
 8003738:	2300      	movs	r3, #0
 800373a:	4605      	mov	r5, r0
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	f000 f815 	bl	8003770 <_kill>
 8003746:	1c43      	adds	r3, r0, #1
 8003748:	d102      	bne.n	8003750 <_kill_r+0x1c>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	b103      	cbz	r3, 8003750 <_kill_r+0x1c>
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	bf00      	nop
 8003754:	20000144 	.word	0x20000144

08003758 <_getpid_r>:
 8003758:	f000 b802 	b.w	8003760 <_getpid>

0800375c <__malloc_lock>:
 800375c:	4770      	bx	lr

0800375e <__malloc_unlock>:
 800375e:	4770      	bx	lr

08003760 <_getpid>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <_getpid+0xc>)
 8003762:	2258      	movs	r2, #88	; 0x58
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	4770      	bx	lr
 800376c:	20000144 	.word	0x20000144

08003770 <_kill>:
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <_kill+0xc>)
 8003772:	2258      	movs	r2, #88	; 0x58
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	f04f 30ff 	mov.w	r0, #4294967295
 800377a:	4770      	bx	lr
 800377c:	20000144 	.word	0x20000144

08003780 <_sbrk>:
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <_sbrk+0x14>)
 8003782:	4602      	mov	r2, r0
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	b909      	cbnz	r1, 800378c <_sbrk+0xc>
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <_sbrk+0x18>)
 800378a:	6019      	str	r1, [r3, #0]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	4402      	add	r2, r0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4770      	bx	lr
 8003794:	20000118 	.word	0x20000118
 8003798:	20000148 	.word	0x20000148

0800379c <_exit>:
 800379c:	e7fe      	b.n	800379c <_exit>
	...

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
