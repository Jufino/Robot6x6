
C:\Users\Juraj\Documents\GitHub\Robot6x6\Nucleo\motor_master\Debug\motor_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c60  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003da0  08003da0  00013da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08003fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  20000080  08004020  00020080  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  2000014c  08004020  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006940  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000125e  00000000  00000000  000269e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008d0  00000000  00000000  00027c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  00028518  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002cc5  00000000  00000000  00028d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029c4  00000000  00000000  0002b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e3a9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002ab0  00000000  00000000  0002e428  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00030ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00030f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08003d88 	.word	0x08003d88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08003d88 	.word	0x08003d88

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	230f      	movs	r3, #15
 8000a86:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d038      	beq.n	8000b02 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <NVIC_Init+0xb8>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	f1c3 0304 	rsb	r3, r3, #4
 8000aa4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000aa6:	7b7a      	ldrb	r2, [r7, #13]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	789a      	ldrb	r2, [r3, #2]
 8000ac2:	7b7b      	ldrb	r3, [r7, #13]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <NVIC_Init+0xbc>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <NVIC_Init+0xbc>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000afc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b00:	e00f      	b.n	8000b22 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b02:	490b      	ldr	r1, [pc, #44]	; (8000b30 <NVIC_Init+0xbc>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	095b      	lsrs	r3, r3, #5
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	2201      	movs	r2, #1
 8000b18:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b1a:	f100 0320 	add.w	r3, r0, #32
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b44:	4013      	ands	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a43      	ldr	r2, [pc, #268]	; (8000c74 <DMA_DeInit+0x140>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000b6a:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <DMA_DeInit+0x144>)
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <DMA_DeInit+0x144>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f043 030f 	orr.w	r3, r3, #15
 8000b74:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b76:	e077      	b.n	8000c68 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <DMA_DeInit+0x148>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d106      	bne.n	8000b8e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000b80:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <DMA_DeInit+0x144>)
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <DMA_DeInit+0x144>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b8a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b8c:	e06c      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <DMA_DeInit+0x14c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000b96:	4a38      	ldr	r2, [pc, #224]	; (8000c78 <DMA_DeInit+0x144>)
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <DMA_DeInit+0x144>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ba0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ba2:	e061      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a37      	ldr	r2, [pc, #220]	; (8000c84 <DMA_DeInit+0x150>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <DMA_DeInit+0x144>)
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <DMA_DeInit+0x144>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000bb6:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bb8:	e056      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <DMA_DeInit+0x154>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d106      	bne.n	8000bd0 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <DMA_DeInit+0x144>)
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <DMA_DeInit+0x144>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000bcc:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bce:	e04b      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <DMA_DeInit+0x158>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d106      	bne.n	8000be6 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000bd8:	4a27      	ldr	r2, [pc, #156]	; (8000c78 <DMA_DeInit+0x144>)
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <DMA_DeInit+0x144>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be2:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000be4:	e040      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <DMA_DeInit+0x15c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d106      	bne.n	8000bfc <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <DMA_DeInit+0x144>)
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <DMA_DeInit+0x144>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000bf8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bfa:	e035      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <DMA_DeInit+0x160>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <DMA_DeInit+0x164>)
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <DMA_DeInit+0x164>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f043 030f 	orr.w	r3, r3, #15
 8000c0e:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c10:	e02a      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <DMA_DeInit+0x168>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <DMA_DeInit+0x164>)
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <DMA_DeInit+0x164>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c24:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c26:	e01f      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <DMA_DeInit+0x16c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <DMA_DeInit+0x164>)
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <DMA_DeInit+0x164>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c3a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c3c:	e014      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <DMA_DeInit+0x170>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d106      	bne.n	8000c54 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <DMA_DeInit+0x164>)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <DMA_DeInit+0x164>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c50:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c52:	e009      	b.n	8000c68 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <DMA_DeInit+0x174>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d105      	bne.n	8000c68 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <DMA_DeInit+0x164>)
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <DMA_DeInit+0x164>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c66:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40026008 	.word	0x40026008
 8000c78:	40026000 	.word	0x40026000
 8000c7c:	4002601c 	.word	0x4002601c
 8000c80:	40026030 	.word	0x40026030
 8000c84:	40026044 	.word	0x40026044
 8000c88:	40026058 	.word	0x40026058
 8000c8c:	4002606c 	.word	0x4002606c
 8000c90:	40026080 	.word	0x40026080
 8000c94:	40026408 	.word	0x40026408
 8000c98:	40026400 	.word	0x40026400
 8000c9c:	4002641c 	.word	0x4002641c
 8000ca0:	40026430 	.word	0x40026430
 8000ca4:	40026444 	.word	0x40026444
 8000ca8:	40026458 	.word	0x40026458

08000cac <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cca:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000cda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ce6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000cf2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000d46:	e006      	b.n	8000d56 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000d50:	4013      	ands	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	4613      	mov	r3, r2
 8000d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000d9c:	e006      	b.n	8000dac <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
  }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <DMA_GetFlagStatus+0x48>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e002      	b.n	8000de0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <DMA_GetFlagStatus+0x4c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40026000 	.word	0x40026000
 8000e04:	40026400 	.word	0x40026400

08000e08 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <DMA_ClearFlag+0x2c>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000e20:	e002      	b.n	8000e28 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <DMA_ClearFlag+0x30>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6053      	str	r3, [r2, #4]
  }  
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40026000 	.word	0x40026000
 8000e38:	40026400 	.word	0x40026400

08000e3c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e07e      	b.n	8000f56 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d16d      	bne.n	8000f50 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	401a      	ands	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	4619      	mov	r1, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d003      	beq.n	8000eb2 <GPIO_Init+0x76>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	791b      	ldrb	r3, [r3, #4]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d136      	bne.n	8000f20 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2103      	movs	r1, #3
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	795b      	ldrb	r3, [r3, #5]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	889b      	ldrh	r3, [r3, #4]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	2101      	movs	r1, #1
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	799b      	ldrb	r3, [r3, #6]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	79db      	ldrb	r3, [r3, #7]
 8000f40:	4619      	mov	r1, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	f67f af7d 	bls.w	8000e58 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000f5e:	bf00      	nop
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	ea02 0103 	and.w	r1, r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f100 0208 	add.w	r2, r0, #8
 8000fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <I2C_DeInit+0x44>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d10a      	bne.n	800101e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001008:	2101      	movs	r1, #1
 800100a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800100e:	f000 fba5 	bl	800175c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8001012:	2100      	movs	r1, #0
 8001014:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001018:	f000 fba0 	bl	800175c <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 800101c:	e009      	b.n	8001032 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800101e:	2101      	movs	r1, #1
 8001020:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001024:	f000 fb9a 	bl	800175c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001028:	2100      	movs	r1, #0
 800102a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800102e:	f000 fb95 	bl	800175c <RCC_APB1PeriphResetCmd>
  }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40005400 	.word	0x40005400

08001040 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800104e:	2300      	movs	r3, #0
 8001050:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001052:	2304      	movs	r3, #4
 8001054:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <I2C_Init+0x174>)
 8001058:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001062:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001066:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fa5f 	bl	8001530 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <I2C_Init+0x178>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001082:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001086:	4313      	orrs	r3, r2
 8001088:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800108e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a44      	ldr	r2, [pc, #272]	; (80011bc <I2C_Init+0x17c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d815      	bhi.n	80010da <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80010bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d801      	bhi.n	80010c6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80010c2:	2304      	movs	r3, #4
 80010c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80010c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ca:	4313      	orrs	r3, r2
 80010cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80010ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	841a      	strh	r2, [r3, #32]
 80010d8:	e040      	b.n	800115c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	88db      	ldrh	r3, [r3, #6]
 80010de:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d109      	bne.n	80010fa <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010f8:	e00e      	b.n	8001118 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009a      	lsls	r2, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800111a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800112a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800112c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800112e:	4313      	orrs	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800113a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800113c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800113e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <I2C_Init+0x180>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1192      	asrs	r2, r2, #6
 800114e:	17db      	asrs	r3, r3, #31
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001160:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800117a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	889a      	ldrh	r2, [r3, #4]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	895b      	ldrh	r3, [r3, #10]
 800118c:	4313      	orrs	r3, r2
 800118e:	b29a      	uxth	r2, r3
 8001190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001192:	4313      	orrs	r3, r2
 8001194:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800119a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	899a      	ldrh	r2, [r3, #12]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	811a      	strh	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	007a1200 	.word	0x007a1200
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	000186a0 	.word	0x000186a0
 80011c0:	10624dd3 	.word	0x10624dd3

080011c4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80011e6:	e007      	b.n	80011f8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	801a      	strh	r2, [r3, #0]
  }
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001226:	e007      	b.n	8001238 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	801a      	strh	r2, [r3, #0]
  }
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001266:	e007      	b.n	8001278 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
  }
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80012a6:	e007      	b.n	80012b8 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	801a      	strh	r2, [r3, #0]
  }
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
 80012d0:	4613      	mov	r3, r2
 80012d2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	e003      	b.n	80012ec <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	821a      	strh	r2, [r3, #16]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	821a      	strh	r2, [r3, #16]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	b29b      	uxth	r3, r3
 8001338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 8001342:	e007      	b.n	8001354 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	889b      	ldrh	r3, [r3, #4]
 8001348:	b29b      	uxth	r3, r3
 800134a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	809a      	strh	r2, [r3, #4]
  }
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 8001382:	e007      	b.n	8001394 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	809a      	strh	r2, [r3, #4]
  }
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d008      	beq.n	80013c8 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80013c6:	e009      	b.n	80013dc <I2C_ITConfig+0x3c>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	889b      	ldrh	r3, [r3, #4]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	809a      	strh	r2, [r3, #4]
  }
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	8a9b      	ldrh	r3, [r3, #20]
 8001406:	b29b      	uxth	r3, r3
 8001408:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8b1b      	ldrh	r3, [r3, #24]
 800140e:	b29b      	uxth	r3, r3
 8001410:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4313      	orrs	r3, r2
 800141e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001422:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	401a      	ands	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d102      	bne.n	8001436 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001430:	2301      	movs	r3, #1
 8001432:	75fb      	strb	r3, [r7, #23]
 8001434:	e001      	b.n	800143a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800143a:	7dfb      	ldrb	r3, [r7, #23]
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	0f1b      	lsrs	r3, r3, #28
 8001466:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800146e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3314      	adds	r3, #20
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e005      	b.n	800148a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3318      	adds	r3, #24
 8001488:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	e001      	b.n	80014a0 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	8892      	ldrh	r2, [r2, #4]
 80014c6:	b292      	uxth	r2, r2
 80014c8:	4013      	ands	r3, r2
 80014ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014ce:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014d6:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	8a9b      	ldrh	r3, [r3, #20]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <I2C_GetITStatus+0x48>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e001      	b.n	80014f8 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001518:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b29b      	uxth	r3, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	829a      	strh	r2, [r3, #20]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001550:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d865      	bhi.n	800162c <RCC_GetClocksFreq+0xfc>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <RCC_GetClocksFreq+0x38>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	0800159d 	.word	0x0800159d
 800156c:	0800162d 	.word	0x0800162d
 8001570:	0800162d 	.word	0x0800162d
 8001574:	0800162d 	.word	0x0800162d
 8001578:	080015bd 	.word	0x080015bd
 800157c:	0800162d 	.word	0x0800162d
 8001580:	0800162d 	.word	0x0800162d
 8001584:	0800162d 	.word	0x0800162d
 8001588:	080015c5 	.word	0x080015c5
 800158c:	0800162d 	.word	0x0800162d
 8001590:	0800162d 	.word	0x0800162d
 8001594:	0800162d 	.word	0x0800162d
 8001598:	080015cd 	.word	0x080015cd
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80015a4:	0b5b      	lsrs	r3, r3, #13
 80015a6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3301      	adds	r3, #1
 80015ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
      break;
 80015ba:	e047      	b.n	800164c <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <RCC_GetClocksFreq+0x1a4>)
 80015c0:	601a      	str	r2, [r3, #0]
      break;
 80015c2:	e043      	b.n	800164c <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <RCC_GetClocksFreq+0x1a8>)
 80015c8:	601a      	str	r2, [r3, #0]
      break;
 80015ca:	e03f      	b.n	800164c <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015d4:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80015de:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <RCC_GetClocksFreq+0x1ac>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0d9b      	lsrs	r3, r3, #22
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <RCC_GetClocksFreq+0x1a4>)
 8001608:	fb02 f203 	mul.w	r2, r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001616:	e019      	b.n	800164c <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <RCC_GetClocksFreq+0x1a8>)
 800161c:	fb02 f203 	mul.w	r2, r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fbb2 f2f3 	udiv	r2, r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
      }
      break;
 800162a:	e00f      	b.n	800164c <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001634:	0b5b      	lsrs	r3, r3, #13
 8001636:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3301      	adds	r3, #1
 800163c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
      break;
 800164a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001654:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <RCC_GetClocksFreq+0x1b0>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	40da      	lsrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800167c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <RCC_GetClocksFreq+0x1b0>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	40da      	lsrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <RCC_GetClocksFreq+0x1a0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80016a4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	0adb      	lsrs	r3, r3, #11
 80016aa:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <RCC_GetClocksFreq+0x1b0>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	40da      	lsrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	60da      	str	r2, [r3, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	00f42400 	.word	0x00f42400
 80016d8:	007a1200 	.word	0x007a1200
 80016dc:	20000000 	.word	0x20000000
 80016e0:	2000000c 	.word	0x2000000c

080016e4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80016f6:	4909      	ldr	r1, [pc, #36]	; (800171c <RCC_AHBPeriphClockCmd+0x38>)
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <RCC_AHBPeriphClockCmd+0x38>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001702:	e006      	b.n	8001712 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001704:	4905      	ldr	r1, [pc, #20]	; (800171c <RCC_AHBPeriphClockCmd+0x38>)
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <RCC_AHBPeriphClockCmd+0x38>)
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	43db      	mvns	r3, r3
 800170e:	4013      	ands	r3, r2
 8001710:	61cb      	str	r3, [r1, #28]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40023800 	.word	0x40023800

08001720 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001732:	4909      	ldr	r1, [pc, #36]	; (8001758 <RCC_APB1PeriphClockCmd+0x38>)
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <RCC_APB1PeriphClockCmd+0x38>)
 8001736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4313      	orrs	r3, r2
 800173c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800173e:	e006      	b.n	800174e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001740:	4905      	ldr	r1, [pc, #20]	; (8001758 <RCC_APB1PeriphClockCmd+0x38>)
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <RCC_APB1PeriphClockCmd+0x38>)
 8001744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	43db      	mvns	r3, r3
 800174a:	4013      	ands	r3, r2
 800174c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40023800 	.word	0x40023800

0800175c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <RCC_APB1PeriphResetCmd+0x38>)
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <RCC_APB1PeriphResetCmd+0x38>)
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4313      	orrs	r3, r2
 8001778:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800177a:	e006      	b.n	800178a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800177c:	4905      	ldr	r1, [pc, #20]	; (8001794 <RCC_APB1PeriphResetCmd+0x38>)
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <RCC_APB1PeriphResetCmd+0x38>)
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	43db      	mvns	r3, r3
 8001786:	4013      	ands	r3, r2
 8001788:	618b      	str	r3, [r1, #24]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40023800 	.word	0x40023800

08001798 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b2:	d00b      	beq.n	80017cc <TIM_TimeBaseInit+0x34>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <TIM_TimeBaseInit+0x90>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <TIM_TimeBaseInit+0x34>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <TIM_TimeBaseInit+0x94>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d003      	beq.n	80017cc <TIM_TimeBaseInit+0x34>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <TIM_TimeBaseInit+0x98>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d108      	bne.n	80017de <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	885a      	ldrh	r2, [r3, #2]
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	4313      	orrs	r3, r2
 80017dc:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <TIM_TimeBaseInit+0x9c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00c      	beq.n	8001800 <TIM_TimeBaseInit+0x68>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <TIM_TimeBaseInit+0xa0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d008      	beq.n	8001800 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	891a      	ldrh	r2, [r3, #8]
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	89fa      	ldrh	r2, [r7, #14]
 8001804:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	829a      	strh	r2, [r3, #20]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800
 8001830:	40000c00 	.word	0x40000c00
 8001834:	40001000 	.word	0x40001000
 8001838:	40001400 	.word	0x40001400

0800183c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800185e:	e007      	b.n	8001870 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	801a      	strh	r2, [r3, #0]
  }
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	899b      	ldrh	r3, [r3, #12]
 8001896:	b29a      	uxth	r2, r3
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4313      	orrs	r3, r2
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80018a2:	e009      	b.n	80018b8 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	899b      	ldrh	r3, [r3, #12]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	819a      	strh	r2, [r3, #12]
  }
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	81bb      	strh	r3, [r7, #12]
 80018d8:	2300      	movs	r3, #0
 80018da:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8a1b      	ldrh	r3, [r3, #16]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	4013      	ands	r3, r2
 80018e6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	899b      	ldrh	r3, [r3, #12]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	4013      	ands	r3, r2
 80018f2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <TIM_GetITStatus+0x42>
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	43db      	mvns	r3, r3
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	821a      	strh	r2, [r3, #16]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <I2C2_initDMA>:

uint32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C2_initDMA(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800193e:	2101      	movs	r1, #1
 8001940:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001944:	f7ff fece 	bl	80016e4 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 8001948:	481c      	ldr	r0, [pc, #112]	; (80019bc <I2C2_initDMA+0x84>)
 800194a:	f7ff f8f3 	bl	8000b34 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <I2C2_initDMA+0x88>)
 8001950:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <I2C2_initDMA+0x8c>)
 8001954:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 8001968:	2302      	movs	r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <I2C2_initDMA+0x84>)
 8001982:	f7ff f993 	bl	8000cac <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 8001986:	2201      	movs	r2, #1
 8001988:	2102      	movs	r1, #2
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <I2C2_initDMA+0x84>)
 800198c:	f7ff f9f6 	bl	8000d7c <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 8001990:	230f      	movs	r3, #15
 8001992:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f861 	bl	8000a74 <NVIC_Init>
}
 80019b2:	bf00      	nop
 80019b4:	3730      	adds	r7, #48	; 0x30
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40026058 	.word	0x40026058
 80019c0:	40005810 	.word	0x40005810
 80019c4:	20000120 	.word	0x20000120

080019c8 <I2C2_getDeviceAddress>:

uint8_t I2C2_getDeviceAddress(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return deviceAddrUseI2c;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <I2C2_getDeviceAddress+0x10>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	2000009c 	.word	0x2000009c

080019dc <I2C2_clearDeviceAddress>:

void I2C2_clearDeviceAddress(void) {
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <I2C2_clearDeviceAddress+0x14>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000009c 	.word	0x2000009c

080019f4 <I2C2_getRxBuffer>:

uint32_t I2C2_getRxBuffer(int index) {
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <I2C2_getRxBuffer+0x1c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000120 	.word	0x20000120

08001a14 <I2C2_getReadRegister>:

uint8_t I2C2_getReadRegister(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	return readReg;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <I2C2_getReadRegister+0x10>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	2000009d 	.word	0x2000009d

08001a28 <I2C2_clearReadRegister>:

void I2C2_clearReadRegister(void) {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	readReg = 0;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <I2C2_clearReadRegister+0x14>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000009d 	.word	0x2000009d

08001a40 <I2C2_Init>:


void I2C2_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff fe4b 	bl	80016e4 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a54:	f7ff fe64 	bl	8001720 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 8001a58:	2204      	movs	r2, #4
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <I2C2_Init+0x98>)
 8001a5e:	f7ff fa83 	bl	8000f68 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8001a62:	2204      	movs	r2, #4
 8001a64:	210b      	movs	r1, #11
 8001a66:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <I2C2_Init+0x98>)
 8001a68:	f7ff fa7e 	bl	8000f68 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001a6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a70:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001a72:	2302      	movs	r3, #2
 8001a74:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4619      	mov	r1, r3
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <I2C2_Init+0x98>)
 8001a8a:	f7ff f9d7 	bl	8000e3c <GPIO_Init>

	I2C_DeInit(I2C2);
 8001a8e:	4813      	ldr	r0, [pc, #76]	; (8001adc <I2C2_Init+0x9c>)
 8001a90:	f7ff fab2 	bl	8000ff8 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001a94:	2300      	movs	r3, #0
 8001a96:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a9c:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa6:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aac:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <I2C2_Init+0xa0>)
 8001ab0:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <I2C2_Init+0x9c>)
 8001ab8:	f7ff fac2 	bl	8001040 <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 8001abc:	2101      	movs	r1, #1
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <I2C2_Init+0x9c>)
 8001ac0:	f7ff fb80 	bl	80011c4 <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <I2C2_Init+0x9c>)
 8001ac8:	f7ff fbdc 	bl	8001284 <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8001acc:	f7ff ff34 	bl	8001938 <I2C2_initDMA>
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40005800 	.word	0x40005800
 8001ae0:	00061a80 	.word	0x00061a80

08001ae4 <I2C2_BytesWrite>:

void I2C2_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,uint8_t writeAddr) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	4611      	mov	r1, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	71bb      	strb	r3, [r7, #6]
 8001af8:	4613      	mov	r3, r2
 8001afa:	717b      	strb	r3, [r7, #5]
	I2C_GenerateSTART(I2C2, ENABLE);
 8001afc:	2101      	movs	r1, #1
 8001afe:	4825      	ldr	r0, [pc, #148]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b00:	f7ff fb80 	bl	8001204 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001b04:	bf00      	nop
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <I2C2_BytesWrite+0xb4>)
 8001b08:	4822      	ldr	r0, [pc, #136]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b0a:	f7ff fc6d 	bl	80013e8 <I2C_CheckEvent>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f8      	beq.n	8001b06 <I2C2_BytesWrite+0x22>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481e      	ldr	r0, [pc, #120]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b1c:	f7ff fbd2 	bl	80012c4 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001b20:	bf00      	nop
 8001b22:	491e      	ldr	r1, [pc, #120]	; (8001b9c <I2C2_BytesWrite+0xb8>)
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b26:	f7ff fc5f 	bl	80013e8 <I2C_CheckEvent>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f8      	beq.n	8001b22 <I2C2_BytesWrite+0x3e>
		;
	I2C_SendData(I2C2, writeAddr);
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4817      	ldr	r0, [pc, #92]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b36:	f7ff fbe3 	bl	8001300 <I2C_SendData>
	for (int i = 0; i < length; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e014      	b.n	8001b6a <I2C2_BytesWrite+0x86>
		I2C_SendData(I2C2, pBuffer[i]);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4812      	ldr	r0, [pc, #72]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b4c:	f7ff fbd8 	bl	8001300 <I2C_SendData>
		for (int x = 0; x < 1000; x++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	e002      	b.n	8001b5c <I2C2_BytesWrite+0x78>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b62:	dbf8      	blt.n	8001b56 <I2C2_BytesWrite+0x72>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;
	I2C_SendData(I2C2, writeAddr);
	for (int i = 0; i < length; i++) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dce6      	bgt.n	8001b40 <I2C2_BytesWrite+0x5c>
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001b72:	bf00      	nop
 8001b74:	490a      	ldr	r1, [pc, #40]	; (8001ba0 <I2C2_BytesWrite+0xbc>)
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b78:	f7ff fc36 	bl	80013e8 <I2C_CheckEvent>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f8      	beq.n	8001b74 <I2C2_BytesWrite+0x90>
		;
	I2C_GenerateSTOP(I2C2, ENABLE);
 8001b82:	2101      	movs	r1, #1
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <I2C2_BytesWrite+0xb0>)
 8001b86:	f7ff fb5d 	bl	8001244 <I2C_GenerateSTOP>

}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005800 	.word	0x40005800
 8001b98:	00030001 	.word	0x00030001
 8001b9c:	00070082 	.word	0x00070082
 8001ba0:	00070084 	.word	0x00070084

08001ba4 <I2C2_DMA_Read>:

void I2C2_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,uint8_t numberBytesReceive) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	717b      	strb	r3, [r7, #5]
	while (deviceAddrUseI2c != 0);
 8001bb6:	bf00      	nop
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <I2C2_DMA_Read+0xf8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1fb      	bne.n	8001bb8 <I2C2_DMA_Read+0x14>
	deviceAddrUseI2c = slaveAddr;
 8001bc0:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <I2C2_DMA_Read+0xf8>)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	7013      	strb	r3, [r2, #0]
	readReg = readAddr;
 8001bc6:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <I2C2_DMA_Read+0xfc>)
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	7013      	strb	r3, [r2, #0]

	/* Disable DMA channel*/
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <I2C2_DMA_Read+0x100>)
 8001bd0:	f7ff f8aa 	bl	8000d28 <DMA_Cmd>

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <I2C2_DMA_Read+0x100>)
 8001bdc:	f7ff f8c0 	bl	8000d60 <DMA_SetCurrDataCounter>

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY))
 8001be0:	bf00      	nop
 8001be2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001be6:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001be8:	f7ff fc2e 	bl	8001448 <I2C_GetFlagStatus>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f7      	bne.n	8001be2 <I2C2_DMA_Read+0x3e>
		;

	/* Enable DMA NACK automatic generation */
	I2C_DMALastTransferCmd(I2C2, ENABLE); //Note this one, very important
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	482c      	ldr	r0, [pc, #176]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001bf6:	f7ff fbb3 	bl	8001360 <I2C_DMALastTransferCmd>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001bfe:	f7ff fb01 	bl	8001204 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001c02:	bf00      	nop
 8001c04:	4929      	ldr	r1, [pc, #164]	; (8001cac <I2C2_DMA_Read+0x108>)
 8001c06:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c08:	f7ff fbee 	bl	80013e8 <I2C_CheckEvent>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f8      	beq.n	8001c04 <I2C2_DMA_Read+0x60>
		;

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4823      	ldr	r0, [pc, #140]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c1a:	f7ff fb53 	bl	80012c4 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 8001c1e:	bf00      	nop
 8001c20:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <I2C2_DMA_Read+0x10c>)
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c24:	f7ff fbe0 	bl	80013e8 <I2C_CheckEvent>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f8      	beq.n	8001c20 <I2C2_DMA_Read+0x7c>
	I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(I2C2, ENABLE);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	481d      	ldr	r0, [pc, #116]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c32:	f7ff fac7 	bl	80011c4 <I2C_Cmd>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481b      	ldr	r0, [pc, #108]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c3c:	f7ff fb60 	bl	8001300 <I2C_SendData>

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001c40:	bf00      	nop
 8001c42:	491c      	ldr	r1, [pc, #112]	; (8001cb4 <I2C2_DMA_Read+0x110>)
 8001c44:	4818      	ldr	r0, [pc, #96]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c46:	f7ff fbcf 	bl	80013e8 <I2C_CheckEvent>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f8      	beq.n	8001c42 <I2C2_DMA_Read+0x9e>
		;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);
 8001c50:	2101      	movs	r1, #1
 8001c52:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c54:	f7ff fad6 	bl	8001204 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001c58:	bf00      	nop
 8001c5a:	4914      	ldr	r1, [pc, #80]	; (8001cac <I2C2_DMA_Read+0x108>)
 8001c5c:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c5e:	f7ff fbc3 	bl	80013e8 <I2C_CheckEvent>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f8      	beq.n	8001c5a <I2C2_DMA_Read+0xb6>
		;

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c70:	f7ff fb28 	bl	80012c4 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8001c74:	bf00      	nop
 8001c76:	4910      	ldr	r1, [pc, #64]	; (8001cb8 <I2C2_DMA_Read+0x114>)
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c7a:	f7ff fbb5 	bl	80013e8 <I2C_CheckEvent>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f8      	beq.n	8001c76 <I2C2_DMA_Read+0xd2>
		;

	/* Start DMA to receive data from I2C */
	DMA_Cmd(DMA1_Channel5, ENABLE);
 8001c84:	2101      	movs	r1, #1
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <I2C2_DMA_Read+0x100>)
 8001c88:	f7ff f84e 	bl	8000d28 <DMA_Cmd>
	I2C_DMACmd(I2C2, ENABLE);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <I2C2_DMA_Read+0x104>)
 8001c90:	f7ff fb46 	bl	8001320 <I2C_DMACmd>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000009c 	.word	0x2000009c
 8001ca0:	2000009d 	.word	0x2000009d
 8001ca4:	40026058 	.word	0x40026058
 8001ca8:	40005800 	.word	0x40005800
 8001cac:	00030001 	.word	0x00030001
 8001cb0:	00070082 	.word	0x00070082
 8001cb4:	00070084 	.word	0x00070084
 8001cb8:	00030002 	.word	0x00030002

08001cbc <I2C1_Init>:
#include <I2CSlaveLib/I2CSlaveLib.h>

void I2C1_Init(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff fd0d 	bl	80016e4 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001cd0:	f7ff fd26 	bl	8001720 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	2108      	movs	r1, #8
 8001cd8:	4831      	ldr	r0, [pc, #196]	; (8001da0 <I2C1_Init+0xe4>)
 8001cda:	f7ff f945 	bl	8000f68 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001cde:	2204      	movs	r2, #4
 8001ce0:	2109      	movs	r1, #9
 8001ce2:	482f      	ldr	r0, [pc, #188]	; (8001da0 <I2C1_Init+0xe4>)
 8001ce4:	f7ff f940 	bl	8000f68 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	4619      	mov	r1, r3
 8001d04:	4826      	ldr	r0, [pc, #152]	; (8001da0 <I2C1_Init+0xe4>)
 8001d06:	f7ff f899 	bl	8000e3c <GPIO_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
 8001d0a:	231f      	movs	r3, #31
 8001d0c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fea9 	bl	8000a74 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;
 8001d22:	2320      	movs	r3, #32
 8001d24:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fe9d 	bl	8000a74 <NVIC_Init>

	I2C_DeInit(I2C1);
 8001d3a:	481a      	ldr	r0, [pc, #104]	; (8001da4 <I2C1_Init+0xe8>)
 8001d3c:	f7ff f95c 	bl	8000ff8 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001d40:	2300      	movs	r3, #0
 8001d42:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d48:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = slave_address<<1;
 8001d4a:	2322      	movs	r3, #34	; 0x22
 8001d4c:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d58:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <I2C1_Init+0xec>)
 8001d5c:	60bb      	str	r3, [r7, #8]

	I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d64:	480f      	ldr	r0, [pc, #60]	; (8001da4 <I2C1_Init+0xe8>)
 8001d66:	f7ff fb1b 	bl	80013a0 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <I2C1_Init+0xe8>)
 8001d72:	f7ff fb15 	bl	80013a0 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_ERR, ENABLE);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <I2C1_Init+0xe8>)
 8001d7e:	f7ff fb0f 	bl	80013a0 <I2C_ITConfig>

	I2C_Init(I2C1, &I2C_InitStructure);
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	4619      	mov	r1, r3
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <I2C1_Init+0xe8>)
 8001d8a:	f7ff f959 	bl	8001040 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <I2C1_Init+0xe8>)
 8001d92:	f7ff fa17 	bl	80011c4 <I2C_Cmd>

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40005400 	.word	0x40005400
 8001da8:	00061a80 	.word	0x00061a80

08001dac <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <_ZN5MotorC1Eh+0x3c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
	this->motorAddr = motorAddr;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	81da      	strh	r2, [r3, #14]
}
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	08003da8 	.word	0x08003da8

08001dec <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <_ZN5MotorD1Ev+0x24>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]

}
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <_ZN5MotorD1Ev+0x1a>
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fe1e 	bl	8002a42 <_ZdlPv>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	08003da8 	.word	0x08003da8

08001e14 <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

}
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe5 	bl	8001dec <_ZN5MotorD1Ev>
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fe0d 	bl	8002a42 <_ZdlPv>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	0000      	movs	r0, r0
	...

08001e38 <_ZN5Motor13setSpeedMotorEd>:
//------------------------------------------------------------------
void Motor::setSpeedMotor(double mmPerSec){
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t speedRaw = (mmPerSec*(numberTicksOfWheel/(M_PI*wheelDiameter)))/periodSpeedRegulator;
 8001e44:	a310      	add	r3, pc, #64	; (adr r3, 8001e88 <_ZN5Motor13setSpeedMotorEd+0x50>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e4e:	f7fe fb4f 	bl	80004f0 <__aeabi_dmul>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4618      	mov	r0, r3
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <_ZN5Motor13setSpeedMotorEd+0x58>)
 8001e60:	f7fe fc70 	bl	8000744 <__aeabi_ddiv>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	4618      	mov	r0, r3
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	f7fe fdda 	bl	8000a24 <__aeabi_d2iz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	82fb      	strh	r3, [r7, #22]
	setSpeedRawMotor(speedRaw);
 8001e74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f80a 	bl	8001e94 <_ZN5Motor16setSpeedRawMotorEs>
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	16375352 	.word	0x16375352
 8001e8c:	3fdc6d02 	.word	0x3fdc6d02
 8001e90:	3fd00000 	.word	0x3fd00000

08001e94 <_ZN5Motor16setSpeedRawMotorEs>:
//------------------------------------------------------------------
void Motor::setAngleSpeedMotor(double anglePerSec){
	setSpeedRawMotor((int16_t)((anglePerSec*(numberTicksOfWheel/360))/periodSpeedRegulator));
}
//------------------------------------------------------------------
void Motor::setSpeedRawMotor(int16_t data) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	tmp[1] = data & 0xFF;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	737b      	strb	r3, [r7, #13]
	tmp[0] = (data >> 8) && 0xFF;
 8001ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eaa:	121b      	asrs	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	733b      	strb	r3, [r7, #12]
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETSPEEDREG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7918      	ldrb	r0, [r3, #4]
 8001ebc:	f107 010c 	add.w	r1, r7, #12
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f7ff fe0e 	bl	8001ae4 <I2C2_BytesWrite>
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>:
	tmp[1] = data & 0xFF;
	tmp[0] = (data >> 8) && 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETPWMREG);
}
//------------------------------------------------------------------
void Motor::DMADeltaTicksInvoke(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	I2C2_DMA_Read(this->motorAddr, GETDELTATICKSREG, 2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe5f 	bl	8001ba4 <I2C2_DMA_Read>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETSPEEDREG, 2);
}
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <_ZN5Motor8getTicksEv>:
//------------------------------------------------------------------
long Motor::getTicks(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	while (I2C2_getReadRegister() == GETDELTATICKSREG)
 8001f1c:	f7ff fd7a 	bl	8001a14 <I2C2_getReadRegister>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d000      	beq.n	8001f32 <_ZN5Motor8getTicksEv+0x1e>
 8001f30:	e7f4      	b.n	8001f1c <_ZN5Motor8getTicksEv+0x8>
		;
	return this->ticks;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop

08001f40 <_ZN5Motor11getDistanceEv>:
//------------------------------------------------------------------
double Motor::getDistance(void) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	return (double)getTicks()*((wheelDiameter*M_PI)/(numberTicksOfWheel));
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe3 	bl	8001f14 <_ZN5Motor8getTicksEv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa67 	bl	8000424 <__aeabi_i2d>
 8001f56:	a306      	add	r3, pc, #24	; (adr r3, 8001f70 <_ZN5Motor11getDistanceEv+0x30>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fac8 	bl	80004f0 <__aeabi_dmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2f974273 	.word	0x2f974273
 8001f74:	40020305 	.word	0x40020305

08001f78 <_ZN5Motor11setSpeedRawEs>:
//------------------------------------------------------------------
void Motor::setSpeedRaw(int16_t speedRaw) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
	this->speedRaw=speedRaw;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	819a      	strh	r2, [r3, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <_ZN5Motor13setVoltageRawEt>:
//------------------------------------------------------------------
double Motor::getSpeed(void) {
	return getSpeedRaw()*((wheelDiameter*M_PI)/(periodSpeedRegulator*numberTicksOfWheel));
}
//------------------------------------------------------------------
void Motor::setVoltageRaw(uint16_t voltageRaw) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
	this->voltageRaw=voltageRaw;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	81da      	strh	r2, [r3, #14]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <_ZN5Motor10setCurrentEt>:
	while (I2C2_getReadRegister() == GETVOLTAGEREG)
		;
	return (double)this->voltageRaw * (25 / 1023);
}
//------------------------------------------------------------------
void Motor::setCurrent(uint16_t current) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
	this->current=current;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	821a      	strh	r2, [r3, #16]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_Z8getMotori>:
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	switch (i) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d821      	bhi.n	8002020 <_Z8getMotori+0x54>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <_Z8getMotori+0x18>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002003 	.word	0x08002003
 8001fec:	08002009 	.word	0x08002009
 8001ff0:	0800200f 	.word	0x0800200f
 8001ff4:	08002015 	.word	0x08002015
 8001ff8:	0800201b 	.word	0x0800201b
	case 1:
		return motor1;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <_Z8getMotori+0x60>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e00e      	b.n	8002020 <_Z8getMotori+0x54>
	case 2:
		return motor2;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <_Z8getMotori+0x64>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e00b      	b.n	8002020 <_Z8getMotori+0x54>
	case 3:
		return motor3;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <_Z8getMotori+0x68>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e008      	b.n	8002020 <_Z8getMotori+0x54>
	case 4:
		return motor4;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <_Z8getMotori+0x6c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	e005      	b.n	8002020 <_Z8getMotori+0x54>
	case 5:
		return motor5;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <_Z8getMotori+0x70>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e002      	b.n	8002020 <_Z8getMotori+0x54>
	case 6:
		return motor6;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <_Z8getMotori+0x74>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e7ff      	b.n	8002020 <_Z8getMotori+0x54>
	}
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200000a0 	.word	0x200000a0
 8002030:	200000a4 	.word	0x200000a4
 8002034:	200000a8 	.word	0x200000a8
 8002038:	200000ac 	.word	0x200000ac
 800203c:	200000b0 	.word	0x200000b0
 8002040:	200000b4 	.word	0x200000b4

08002044 <I2C1_ER_IRQHandler>:
volatile double x = 0;
volatile double y = 0;
volatile double angle = 0;
#define dt 0.025

extern "C" void I2C1_ER_IRQHandler(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
 8002048:	4908      	ldr	r1, [pc, #32]	; (800206c <I2C1_ER_IRQHandler+0x28>)
 800204a:	4809      	ldr	r0, [pc, #36]	; (8002070 <I2C1_ER_IRQHandler+0x2c>)
 800204c:	f7ff fa2e 	bl	80014ac <I2C_GetITStatus>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <I2C1_ER_IRQHandler+0x24>
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 8002060:	4902      	ldr	r1, [pc, #8]	; (800206c <I2C1_ER_IRQHandler+0x28>)
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <I2C1_ER_IRQHandler+0x2c>)
 8002064:	f7ff fa4e 	bl	8001504 <I2C_ClearITPendingBit>
	}
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	01000400 	.word	0x01000400
 8002070:	40005400 	.word	0x40005400

08002074 <I2C1_EV_IRQHandler>:

uint16_t i2c1_reg;
int16_t i2c1_val;
bool i2c1_recv_reg_done = false;
extern "C" void I2C1_EV_IRQHandler() {
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	af00      	add	r7, sp, #0
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 800207a:	8a9b      	ldrh	r3, [r3, #20]
 800207c:	b29b      	uxth	r3, r3
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <I2C1_EV_IRQHandler+0x26>
		I2C1->SR1;
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002092:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->SR2;
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002096:	8b1b      	ldrh	r3, [r3, #24]
uint16_t i2c1_reg;
int16_t i2c1_val;
bool i2c1_recv_reg_done = false;
extern "C" void I2C1_EV_IRQHandler() {
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 8002098:	e7ee      	b.n	8002078 <I2C1_EV_IRQHandler+0x4>
		I2C1->SR1;
		I2C1->SR2;
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 800209c:	8a9b      	ldrh	r3, [r3, #20]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d035      	beq.n	800211e <I2C1_EV_IRQHandler+0xaa>
		if (!i2c1_recv_reg_done) {
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <I2C1_EV_IRQHandler+0x118>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <I2C1_EV_IRQHandler+0x64>
			i2c1_reg = I2C1->DR;
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 80020c2:	8a1b      	ldrh	r3, [r3, #16]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <I2C1_EV_IRQHandler+0x11c>)
 80020c8:	801a      	strh	r2, [r3, #0]
			i2c1_recv_reg_done = true;
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <I2C1_EV_IRQHandler+0x118>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
			i2c1_val = 0;
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <I2C1_EV_IRQHandler+0x120>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	e7e0      	b.n	800209a <I2C1_EV_IRQHandler+0x26>
		} else {
			i2c1_val = (i2c1_val<<8) | I2C1->DR;
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <I2C1_EV_IRQHandler+0x120>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 80020e4:	8a1b      	ldrh	r3, [r3, #16]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <I2C1_EV_IRQHandler+0x120>)
 80020f0:	801a      	strh	r2, [r3, #0]
			if(i2c1_reg == 100){
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <I2C1_EV_IRQHandler+0x11c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d1cf      	bne.n	800209a <I2C1_EV_IRQHandler+0x26>
				getMotor(1)->setSpeedMotor((double)i2c1_val);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff ff66 	bl	8001fcc <_Z8getMotori>
 8002100:	4605      	mov	r5, r0
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <I2C1_EV_IRQHandler+0x120>)
 8002104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f98b 	bl	8000424 <__aeabi_i2d>
 800210e:	4603      	mov	r3, r0
 8002110:	460c      	mov	r4, r1
 8002112:	461a      	mov	r2, r3
 8002114:	4623      	mov	r3, r4
 8002116:	4628      	mov	r0, r5
 8002118:	f7ff fe8e 	bl	8001e38 <_ZN5Motor13setSpeedMotorEd>
		I2C1->SR1;
		I2C1->SR2;
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 800211c:	e7bd      	b.n	800209a <I2C1_EV_IRQHandler+0x26>
		}

	}

	//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002120:	8a9b      	ldrh	r3, [r3, #20]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <I2C1_EV_IRQHandler+0xda>
		if (i2c1_reg == 1) {
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <I2C1_EV_IRQHandler+0x11c>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d103      	bne.n	8002146 <I2C1_EV_IRQHandler+0xd2>
			I2C1->DR = 0xF0;
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002140:	22f0      	movs	r2, #240	; 0xf0
 8002142:	821a      	strh	r2, [r3, #16]
 8002144:	e7eb      	b.n	800211e <I2C1_EV_IRQHandler+0xaa>
		} else {
			I2C1->DR = 0xFF;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	821a      	strh	r2, [r3, #16]
		}

	}

	//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 800214c:	e7e7      	b.n	800211e <I2C1_EV_IRQHandler+0xaa>
		}
		//I2C1->SR1 |= I2C_SR1_AF;
	}

	//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002150:	8a9b      	ldrh	r3, [r3, #20]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <I2C1_EV_IRQHandler+0x10e>
		i2c1_recv_reg_done = false;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <I2C1_EV_IRQHandler+0x118>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
		I2C1->SR1;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 800216e:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->CR1 |= 0x1;
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <I2C1_EV_IRQHandler+0x114>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	8013      	strh	r3, [r2, #0]
		}
		//I2C1->SR1 |= I2C_SR1_AF;
	}

	//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 8002180:	e7e5      	b.n	800214e <I2C1_EV_IRQHandler+0xda>
		i2c1_recv_reg_done = false;
		I2C1->SR1;
		I2C1->CR1 |= 0x1;
	}

}
 8002182:	bf00      	nop
 8002184:	bdb0      	pop	{r4, r5, r7, pc}
 8002186:	bf00      	nop
 8002188:	40005400 	.word	0x40005400
 800218c:	200000dc 	.word	0x200000dc
 8002190:	200000d8 	.word	0x200000d8
 8002194:	200000da 	.word	0x200000da

08002198 <_Z26getAverageOfSimilaryValuesddd>:

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b08b      	sub	sp, #44	; 0x2c
 800219c:	af00      	add	r7, sp, #0
 800219e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021a2:	e9c7 2300 	strd	r2, r3, [r7]
	double diff1 = fabs(val1 - val2);
 80021a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ae:	f7fd ffeb 	bl	8000188 <__aeabi_dsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	460c      	mov	r4, r1
 80021b6:	461a      	mov	r2, r3
 80021b8:	623a      	str	r2, [r7, #32]
 80021ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
	double diff2 = fabs(val2 - val3);
 80021c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021c8:	f7fd ffde 	bl	8000188 <__aeabi_dsub>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	461a      	mov	r2, r3
 80021d2:	61ba      	str	r2, [r7, #24]
 80021d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80021d8:	61fb      	str	r3, [r7, #28]
	double diff3 = fabs(val1 - val3);
 80021da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e2:	f7fd ffd1 	bl	8000188 <__aeabi_dsub>
 80021e6:	4603      	mov	r3, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	461a      	mov	r2, r3
 80021ec:	613a      	str	r2, [r7, #16]
 80021ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80021f2:	617b      	str	r3, [r7, #20]
	if (diff1 < diff2 && diff1 < diff3) {
 80021f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021fc:	f7fe fbea 	bl	80009d4 <__aeabi_dcmplt>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01b      	beq.n	800223e <_Z26getAverageOfSimilaryValuesddd+0xa6>
 8002206:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800220a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800220e:	f7fe fbe1 	bl	80009d4 <__aeabi_dcmplt>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <_Z26getAverageOfSimilaryValuesddd+0xa6>
		return (val1 + val2) / 2;
 8002218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800221c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002220:	f7fd ffb4 	bl	800018c <__adddf3>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4618      	mov	r0, r3
 800222a:	4621      	mov	r1, r4
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002234:	f7fe fa86 	bl	8000744 <__aeabi_ddiv>
 8002238:	4603      	mov	r3, r0
 800223a:	460c      	mov	r4, r1
 800223c:	e036      	b.n	80022ac <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else if (diff2 < diff1 && diff2 < diff3) {
 800223e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002246:	f7fe fbc5 	bl	80009d4 <__aeabi_dcmplt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01b      	beq.n	8002288 <_Z26getAverageOfSimilaryValuesddd+0xf0>
 8002250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002254:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002258:	f7fe fbbc 	bl	80009d4 <__aeabi_dcmplt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <_Z26getAverageOfSimilaryValuesddd+0xf0>
		return (val2 + val3) / 2;
 8002262:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002266:	e9d7 0100 	ldrd	r0, r1, [r7]
 800226a:	f7fd ff8f 	bl	800018c <__adddf3>
 800226e:	4603      	mov	r3, r0
 8002270:	460c      	mov	r4, r1
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800227e:	f7fe fa61 	bl	8000744 <__aeabi_ddiv>
 8002282:	4603      	mov	r3, r0
 8002284:	460c      	mov	r4, r1
 8002286:	e011      	b.n	80022ac <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else
		return (val1 + val3) / 2;
 8002288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800228c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002290:	f7fd ff7c 	bl	800018c <__adddf3>
 8002294:	4603      	mov	r3, r0
 8002296:	460c      	mov	r4, r1
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a4:	f7fe fa4e 	bl	8000744 <__aeabi_ddiv>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	4621      	mov	r1, r4
 80022b0:	372c      	adds	r7, #44	; 0x2c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}
 80022b6:	bf00      	nop

080022b8 <DMA1_Channel5_IRQHandler>:

extern "C" void DMA1_Channel5_IRQHandler(void) {
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 80022be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022c2:	f7fe fd79 	bl	8000db8 <DMA_GetFlagStatus>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80e3 	beq.w	800249e <DMA1_Channel5_IRQHandler+0x1e6>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 80022d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022dc:	f7fe fd94 	bl	8000e08 <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 80022e0:	2100      	movs	r1, #0
 80022e2:	4871      	ldr	r0, [pc, #452]	; (80024a8 <DMA1_Channel5_IRQHandler+0x1f0>)
 80022e4:	f7ff f81c 	bl	8001320 <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 80022e8:	2101      	movs	r1, #1
 80022ea:	486f      	ldr	r0, [pc, #444]	; (80024a8 <DMA1_Channel5_IRQHandler+0x1f0>)
 80022ec:	f7fe ffaa 	bl	8001244 <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 80022f0:	2100      	movs	r1, #0
 80022f2:	486e      	ldr	r0, [pc, #440]	; (80024ac <DMA1_Channel5_IRQHandler+0x1f4>)
 80022f4:	f7fe fd18 	bl	8000d28 <DMA_Cmd>

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
 80022f8:	f7ff fb8c 	bl	8001a14 <I2C2_getReadRegister>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b03      	cmp	r3, #3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d029      	beq.n	8002360 <DMA1_Channel5_IRQHandler+0xa8>
			for (int i = 1; i <= numberOfMotors; i++) {
 800230c:	2301      	movs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b06      	cmp	r3, #6
 8002314:	f300 80c3 	bgt.w	800249e <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <DMA1_Channel5_IRQHandler+0x1f8>)
 800231e:	5cd4      	ldrb	r4, [r2, r3]
 8002320:	f7ff fb52 	bl	80019c8 <I2C2_getDeviceAddress>
 8002324:	4603      	mov	r3, r0
 8002326:	429c      	cmp	r4, r3
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d011      	beq.n	8002358 <DMA1_Channel5_IRQHandler+0xa0>
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff fe49 	bl	8001fcc <_Z8getMotori>
 800233a:	4604      	mov	r4, r0
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff fb59 	bl	80019f4 <I2C2_getRxBuffer>
 8002342:	4603      	mov	r3, r0
 8002344:	b21b      	sxth	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fdd1 	bl	8001ef0 <_ZN5Motor13addDeltaTicksEs>
					I2C2_clearReadRegister();
 800234e:	f7ff fb6b 	bl	8001a28 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002352:	f7ff fb43 	bl	80019dc <I2C2_clearDeviceAddress>
					break;
 8002356:	e0a2      	b.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e7d7      	b.n	8002310 <DMA1_Channel5_IRQHandler+0x58>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
 8002360:	f7ff fb58 	bl	8001a14 <I2C2_getReadRegister>
 8002364:	4603      	mov	r3, r0
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d029      	beq.n	80023c8 <DMA1_Channel5_IRQHandler+0x110>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002374:	2301      	movs	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b06      	cmp	r3, #6
 800237c:	f300 808f 	bgt.w	800249e <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3b01      	subs	r3, #1
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <DMA1_Channel5_IRQHandler+0x1f8>)
 8002386:	5cd4      	ldrb	r4, [r2, r3]
 8002388:	f7ff fb1e 	bl	80019c8 <I2C2_getDeviceAddress>
 800238c:	4603      	mov	r3, r0
 800238e:	429c      	cmp	r4, r3
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d011      	beq.n	80023c0 <DMA1_Channel5_IRQHandler+0x108>
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
 800239c:	68b8      	ldr	r0, [r7, #8]
 800239e:	f7ff fe15 	bl	8001fcc <_Z8getMotori>
 80023a2:	4604      	mov	r4, r0
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fb25 	bl	80019f4 <I2C2_getRxBuffer>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff fdef 	bl	8001f94 <_ZN5Motor13setVoltageRawEt>
					I2C2_clearReadRegister();
 80023b6:	f7ff fb37 	bl	8001a28 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 80023ba:	f7ff fb0f 	bl	80019dc <I2C2_clearDeviceAddress>
					break;
 80023be:	e06e      	b.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	e7d7      	b.n	8002378 <DMA1_Channel5_IRQHandler+0xc0>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
 80023c8:	f7ff fb24 	bl	8001a14 <I2C2_getReadRegister>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d028      	beq.n	800242e <DMA1_Channel5_IRQHandler+0x176>
			for (int i = 1; i <= numberOfMotors; i++) {
 80023dc:	2301      	movs	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	dc5b      	bgt.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <DMA1_Channel5_IRQHandler+0x1f8>)
 80023ec:	5cd4      	ldrb	r4, [r2, r3]
 80023ee:	f7ff faeb 	bl	80019c8 <I2C2_getDeviceAddress>
 80023f2:	4603      	mov	r3, r0
 80023f4:	429c      	cmp	r4, r3
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <DMA1_Channel5_IRQHandler+0x16e>
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fde2 	bl	8001fcc <_Z8getMotori>
 8002408:	4604      	mov	r4, r0
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff faf2 	bl	80019f4 <I2C2_getRxBuffer>
 8002410:	4603      	mov	r3, r0
 8002412:	b29b      	uxth	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff fdca 	bl	8001fb0 <_ZN5Motor10setCurrentEt>
					I2C2_clearReadRegister();
 800241c:	f7ff fb04 	bl	8001a28 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002420:	f7ff fadc 	bl	80019dc <I2C2_clearDeviceAddress>
					break;
 8002424:	e03b      	b.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3301      	adds	r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	e7d8      	b.n	80023e0 <DMA1_Channel5_IRQHandler+0x128>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
 800242e:	f7ff faf1 	bl	8001a14 <I2C2_getReadRegister>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d028      	beq.n	8002494 <DMA1_Channel5_IRQHandler+0x1dc>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002442:	2301      	movs	r3, #1
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b06      	cmp	r3, #6
 800244a:	dc28      	bgt.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3b01      	subs	r3, #1
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <DMA1_Channel5_IRQHandler+0x1f8>)
 8002452:	5cd4      	ldrb	r4, [r2, r3]
 8002454:	f7ff fab8 	bl	80019c8 <I2C2_getDeviceAddress>
 8002458:	4603      	mov	r3, r0
 800245a:	429c      	cmp	r4, r3
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d011      	beq.n	800248c <DMA1_Channel5_IRQHandler+0x1d4>
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f7ff fdaf 	bl	8001fcc <_Z8getMotori>
 800246e:	4604      	mov	r4, r0
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff fabf 	bl	80019f4 <I2C2_getRxBuffer>
 8002476:	4603      	mov	r3, r0
 8002478:	b21b      	sxth	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff fd7b 	bl	8001f78 <_ZN5Motor11setSpeedRawEs>
					I2C2_clearReadRegister();
 8002482:	f7ff fad1 	bl	8001a28 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002486:	f7ff faa9 	bl	80019dc <I2C2_clearDeviceAddress>
					break;
 800248a:	e008      	b.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	e7d8      	b.n	8002446 <DMA1_Channel5_IRQHandler+0x18e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else {
			I2C2_clearReadRegister();
 8002494:	f7ff fac8 	bl	8001a28 <I2C2_clearReadRegister>
			I2C2_clearDeviceAddress();
 8002498:	f7ff faa0 	bl	80019dc <I2C2_clearDeviceAddress>
		}

	}
}
 800249c:	e7ff      	b.n	800249e <DMA1_Channel5_IRQHandler+0x1e6>
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40005800 	.word	0x40005800
 80024ac:	40026058 	.word	0x40026058
 80024b0:	08003db0 	.word	0x08003db0

080024b4 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80024b8:	2101      	movs	r1, #1
 80024ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024be:	f7ff fa01 	bl	80018c4 <TIM_GetITStatus>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <TIM2_IRQHandler+0x2e>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80024d2:	2101      	movs	r1, #1
 80024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024d8:	f7ff fa1e 	bl	8001918 <TIM_ClearITPendingBit>
		timePosition = true;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <TIM2_IRQHandler+0x34>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
	}
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200000b8 	.word	0x200000b8

080024ec <_Z15InitializeTimerv>:

void InitializeTimer() {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80024f2:	2101      	movs	r1, #1
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff f913 	bl	8001720 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 40 hz
	timerInitStructure.TIM_Prescaler = 999;
 80024fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024fe:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002500:	2300      	movs	r3, #0
 8002502:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 49;
 8002504:	2331      	movs	r3, #49	; 0x31
 8002506:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002508:	2300      	movs	r3, #0
 800250a:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002514:	f7ff f940 	bl	8001798 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8002518:	2101      	movs	r1, #1
 800251a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800251e:	f7ff f98d 	bl	800183c <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002522:	2201      	movs	r2, #1
 8002524:	2101      	movs	r1, #1
 8002526:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800252a:	f7ff f9a7 	bl	800187c <TIM_ITConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 800252e:	231c      	movs	r3, #28
 8002530:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 800253e:	463b      	mov	r3, r7
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fa97 	bl	8000a74 <NVIC_Init>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop

08002550 <main>:

double lastDistance[6];
int main(void) {
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	b099      	sub	sp, #100	; 0x64
 8002554:	af02      	add	r7, sp, #8
	I2C2_Init();
 8002556:	f7ff fa73 	bl	8001a40 <I2C2_Init>
	I2C1_Init();
 800255a:	f7ff fbaf 	bl	8001cbc <I2C1_Init>
	InitializeTimer();
 800255e:	f7ff ffc5 	bl	80024ec <_Z15InitializeTimerv>
	while (1) {
		if (timePosition) {
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <main+0x1fc>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80b9 	beq.w	80026e0 <main+0x190>
			double speeds[6];
			for (int i = 0; i < 6; i++) {
 800256e:	2300      	movs	r3, #0
 8002570:	657b      	str	r3, [r7, #84]	; 0x54
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	2b05      	cmp	r3, #5
 8002576:	dc2c      	bgt.n	80025d2 <main+0x82>
				speeds[i] = (getMotor(i)->getDistance() - lastDistance[i]);
 8002578:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800257a:	f7ff fd27 	bl	8001fcc <_Z8getMotori>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fcdd 	bl	8001f40 <_ZN5Motor11getDistanceEv>
 8002586:	4a72      	ldr	r2, [pc, #456]	; (8002750 <main+0x200>)
 8002588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	cb18      	ldmia	r3, {r3, r4}
 8002590:	461a      	mov	r2, r3
 8002592:	4623      	mov	r3, r4
 8002594:	f7fd fdf8 	bl	8000188 <__aeabi_dsub>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800259e:	00d2      	lsls	r2, r2, #3
 80025a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80025a4:	440a      	add	r2, r1
 80025a6:	3a58      	subs	r2, #88	; 0x58
 80025a8:	e882 0018 	stmia.w	r2, {r3, r4}
				lastDistance[i] = getMotor(i)->getDistance();
 80025ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025ae:	f7ff fd0d 	bl	8001fcc <_Z8getMotori>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fcc3 	bl	8001f40 <_ZN5Motor11getDistanceEv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	4964      	ldr	r1, [pc, #400]	; (8002750 <main+0x200>)
 80025c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025c2:	00d2      	lsls	r2, r2, #3
 80025c4:	440a      	add	r2, r1
 80025c6:	e882 0018 	stmia.w	r2, {r3, r4}
	I2C1_Init();
	InitializeTimer();
	while (1) {
		if (timePosition) {
			double speeds[6];
			for (int i = 0; i < 6; i++) {
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	3301      	adds	r3, #1
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
 80025d0:	e7cf      	b.n	8002572 <main+0x22>
				speeds[i] = (getMotor(i)->getDistance() - lastDistance[i]);
				lastDistance[i] = getMotor(i)->getDistance();
			}

			double vL = getAverageOfSimilaryValues(speeds[1], speeds[2],
 80025d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025d6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80025da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
					speeds[3]);
 80025de:	e88d 0018 	stmia.w	sp, {r3, r4}
 80025e2:	462a      	mov	r2, r5
 80025e4:	4633      	mov	r3, r6
 80025e6:	f7ff fdd7 	bl	8002198 <_Z26getAverageOfSimilaryValuesddd>
 80025ea:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			double vR = getAverageOfSimilaryValues(speeds[4], speeds[5],
 80025ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025f2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80025f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
					speeds[6]);
 80025fa:	e88d 0018 	stmia.w	sp, {r3, r4}
 80025fe:	462a      	mov	r2, r5
 8002600:	4633      	mov	r3, r6
 8002602:	f7ff fdc9 	bl	8002198 <_Z26getAverageOfSimilaryValuesddd>
 8002606:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			double vT = (vL + vR) / 2;
 800260a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800260e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002612:	f7fd fdbb 	bl	800018c <__adddf3>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	4618      	mov	r0, r3
 800261c:	4621      	mov	r1, r4
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002626:	f7fe f88d 	bl	8000744 <__aeabi_ddiv>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			double omegaT = (vR - vL) / lengthBetweenLeftAndRightWheel;
 8002632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002636:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800263a:	f7fd fda5 	bl	8000188 <__aeabi_dsub>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	4618      	mov	r0, r3
 8002644:	4621      	mov	r1, r4
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <main+0x204>)
 800264c:	f7fe f87a 	bl	8000744 <__aeabi_ddiv>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			angle += omegaT;
 8002658:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <main+0x208>)
 800265a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002662:	f7fd fd93 	bl	800018c <__adddf3>
 8002666:	4603      	mov	r3, r0
 8002668:	460c      	mov	r4, r1
 800266a:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <main+0x208>)
 800266c:	e882 0018 	stmia.w	r2, {r3, r4}
			x += vT * cos(angle);
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <main+0x208>)
 8002672:	cb18      	ldmia	r3, {r3, r4}
 8002674:	4618      	mov	r0, r3
 8002676:	4621      	mov	r1, r4
 8002678:	f000 f9ee 	bl	8002a58 <cos>
 800267c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002680:	f7fd ff36 	bl	80004f0 <__aeabi_dmul>
 8002684:	4603      	mov	r3, r0
 8002686:	460c      	mov	r4, r1
 8002688:	4625      	mov	r5, r4
 800268a:	461c      	mov	r4, r3
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <main+0x20c>)
 800268e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f7fd fd79 	bl	800018c <__adddf3>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	4a2f      	ldr	r2, [pc, #188]	; (800275c <main+0x20c>)
 80026a0:	e882 0018 	stmia.w	r2, {r3, r4}
			y += vT * sin(angle);
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <main+0x208>)
 80026a6:	cb18      	ldmia	r3, {r3, r4}
 80026a8:	4618      	mov	r0, r3
 80026aa:	4621      	mov	r1, r4
 80026ac:	f000 fa0a 	bl	8002ac4 <sin>
 80026b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026b4:	f7fd ff1c 	bl	80004f0 <__aeabi_dmul>
 80026b8:	4603      	mov	r3, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	4625      	mov	r5, r4
 80026be:	461c      	mov	r4, r3
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <main+0x210>)
 80026c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	f7fd fd5f 	bl	800018c <__adddf3>
 80026ce:	4603      	mov	r3, r0
 80026d0:	460c      	mov	r4, r1
 80026d2:	4a23      	ldr	r2, [pc, #140]	; (8002760 <main+0x210>)
 80026d4:	e882 0018 	stmia.w	r2, {r3, r4}
			timePosition = false;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <main+0x1fc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e740      	b.n	8002562 <main+0x12>
		} else {
			getMotor(1)->DMADeltaTicksInvoke();
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff fc73 	bl	8001fcc <_Z8getMotori>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fbf1 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(2)->DMADeltaTicksInvoke();
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff fc6c 	bl	8001fcc <_Z8getMotori>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fbea 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(3)->DMADeltaTicksInvoke();
 80026fc:	2003      	movs	r0, #3
 80026fe:	f7ff fc65 	bl	8001fcc <_Z8getMotori>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fbe3 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(4)->DMADeltaTicksInvoke();
 800270a:	2004      	movs	r0, #4
 800270c:	f7ff fc5e 	bl	8001fcc <_Z8getMotori>
 8002710:	4603      	mov	r3, r0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fbdc 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(5)->DMADeltaTicksInvoke();
 8002718:	2005      	movs	r0, #5
 800271a:	f7ff fc57 	bl	8001fcc <_Z8getMotori>
 800271e:	4603      	mov	r3, r0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fbd5 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(6)->DMADeltaTicksInvoke();
 8002726:	2006      	movs	r0, #6
 8002728:	f7ff fc50 	bl	8001fcc <_Z8getMotori>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fbce 	bl	8001ed0 <_ZN5Motor19DMADeltaTicksInvokeEv>
			for (int i = 0; i < 1000; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273e:	f6bf af10 	bge.w	8002562 <main+0x12>
 8002742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002744:	3301      	adds	r3, #1
 8002746:	653b      	str	r3, [r7, #80]	; 0x50
 8002748:	e7f6      	b.n	8002738 <main+0x1e8>
 800274a:	bf00      	nop
 800274c:	200000b8 	.word	0x200000b8
 8002750:	200000e0 	.word	0x200000e0
 8002754:	406f4000 	.word	0x406f4000
 8002758:	200000d0 	.word	0x200000d0
 800275c:	200000c0 	.word	0x200000c0
 8002760:	200000c8 	.word	0x200000c8

08002764 <_Z41__static_initialization_and_destruction_0ii>:
				;
		}
	}
}
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d146      	bne.n	8002802 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277a:	4293      	cmp	r3, r2
 800277c:	d141      	bne.n	8002802 <_Z41__static_initialization_and_destruction_0ii+0x9e>
#include <math.h>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
 800277e:	2014      	movs	r0, #20
 8002780:	f000 f94e 	bl	8002a20 <_Znwj>
 8002784:	4603      	mov	r3, r0
 8002786:	461c      	mov	r4, r3
 8002788:	2102      	movs	r1, #2
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff fb0e 	bl	8001dac <_ZN5MotorC1Eh>
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002792:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 8002794:	2014      	movs	r0, #20
 8002796:	f000 f943 	bl	8002a20 <_Znwj>
 800279a:	4603      	mov	r3, r0
 800279c:	461c      	mov	r4, r3
 800279e:	2104      	movs	r1, #4
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fb03 	bl	8001dac <_ZN5MotorC1Eh>
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80027a8:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 80027aa:	2014      	movs	r0, #20
 80027ac:	f000 f938 	bl	8002a20 <_Znwj>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	2106      	movs	r1, #6
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff faf8 	bl	8001dac <_ZN5MotorC1Eh>
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80027be:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 80027c0:	2014      	movs	r0, #20
 80027c2:	f000 f92d 	bl	8002a20 <_Znwj>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461c      	mov	r4, r3
 80027ca:	2108      	movs	r1, #8
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff faed 	bl	8001dac <_ZN5MotorC1Eh>
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80027d4:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 80027d6:	2014      	movs	r0, #20
 80027d8:	f000 f922 	bl	8002a20 <_Znwj>
 80027dc:	4603      	mov	r3, r0
 80027de:	461c      	mov	r4, r3
 80027e0:	210a      	movs	r1, #10
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fae2 	bl	8001dac <_ZN5MotorC1Eh>
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80027ea:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 80027ec:	2014      	movs	r0, #20
 80027ee:	f000 f917 	bl	8002a20 <_Znwj>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461c      	mov	r4, r3
 80027f6:	210c      	movs	r1, #12
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fad7 	bl	8001dac <_ZN5MotorC1Eh>
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002800:	601c      	str	r4, [r3, #0]
			getMotor(6)->DMADeltaTicksInvoke();
			for (int i = 0; i < 1000; i++)
				;
		}
	}
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	200000a0 	.word	0x200000a0
 8002810:	200000a4 	.word	0x200000a4
 8002814:	200000a8 	.word	0x200000a8
 8002818:	200000ac 	.word	0x200000ac
 800281c:	200000b0 	.word	0x200000b0
 8002820:	200000b4 	.word	0x200000b4

08002824 <_GLOBAL__sub_I_motor1>:
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
 8002828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff ff99 	bl	8002764 <_Z41__static_initialization_and_destruction_0ii>
 8002832:	bd80      	pop	{r7, pc}

08002834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002838:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800283a:	e003      	b.n	8002844 <LoopCopyDataInit>

0800283c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800283e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002840:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002842:	3104      	adds	r1, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002844:	480b      	ldr	r0, [pc, #44]	; (8002874 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8002848:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800284a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800284c:	d3f6      	bcc.n	800283c <CopyDataInit>
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8002850:	e002      	b.n	8002858 <LoopFillZerobss>

08002852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002854:	f842 3b04 	str.w	r3, [r2], #4

08002858 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800285a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800285c:	d3f9      	bcc.n	8002852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800285e:	f000 f841 	bl	80028e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002862:	f001 f939 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002866:	f7ff fe73 	bl	8002550 <main>
  bx lr
 800286a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800286c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002870:	08003fa0 	.word	0x08003fa0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002878:	20000080 	.word	0x20000080
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800287c:	20000080 	.word	0x20000080
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002880:	2000014c 	.word	0x2000014c

08002884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_IRQHandler>
	...

08002888 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002898:	e7fe      	b.n	8002898 <HardFault_Handler+0x4>
 800289a:	bf00      	nop

0800289c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80028a0:	e7fe      	b.n	80028a0 <MemManage_Handler+0x4>
 80028a2:	bf00      	nop

080028a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80028a8:	e7fe      	b.n	80028a8 <BusFault_Handler+0x4>
 80028aa:	bf00      	nop

080028ac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80028b0:	e7fe      	b.n	80028b0 <UsageFault_Handler+0x4>
 80028b2:	bf00      	nop

080028b4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <SystemInit+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <SystemInit+0x5c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <SystemInit+0x5c>)
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <SystemInit+0x5c>)
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <SystemInit+0x60>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <SystemInit+0x5c>)
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <SystemInit+0x5c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800290a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800290e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <SystemInit+0x5c>)
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <SystemInit+0x5c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800291c:	4a08      	ldr	r2, [pc, #32]	; (8002940 <SystemInit+0x5c>)
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <SystemInit+0x5c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002926:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SystemInit+0x5c>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800292e:	f000 f80d 	bl	800294c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SystemInit+0x64>)
 8002934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002938:	609a      	str	r2, [r3, #8]
#endif
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	88ffc00c 	.word	0x88ffc00c
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
  __IO uint32_t  MSIStatus = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  if ((RCC->CR & RCC_CR_MSIRDY) != RESET)
 8002956:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <SetSysClock+0xc8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <SetSysClock+0x1c>
  {
    MSIStatus = (uint32_t)0x01;
 8002962:	2301      	movs	r3, #1
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	e001      	b.n	800296c <SetSysClock+0x20>
  }
  else
  {
    MSIStatus = (uint32_t)0x00;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
  }
   if (MSIStatus == (uint32_t)0x01)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d14b      	bne.n	8002a0a <SetSysClock+0xbe>
   {
    /* Flash 0 wait state */
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <SetSysClock+0xcc>)
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <SetSysClock+0xcc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6013      	str	r3, [r2, #0]
    
    /* Disable Prefetch Buffer */
    FLASH->ACR &= ~FLASH_ACR_PRFTEN;
 800297e:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <SetSysClock+0xcc>)
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <SetSysClock+0xcc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 0302 	bic.w	r3, r3, #2
 8002988:	6013      	str	r3, [r2, #0]

    /* Disable 64-bit access */
    FLASH->ACR &= ~FLASH_ACR_ACC64;
 800298a:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <SetSysClock+0xcc>)
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <SetSysClock+0xcc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002996:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <SetSysClock+0xc8>)
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <SetSysClock+0xc8>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 2 (1.5 V) */
    PWR->CR = PWR_CR_VOS_1;
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <SetSysClock+0xd0>)
 80029a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029a8:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80029aa:	bf00      	nop
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <SetSysClock+0xd0>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <SetSysClock+0x60>
    {
    }
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <SetSysClock+0xc8>)
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <SetSysClock+0xc8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <SetSysClock+0xc8>)
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <SetSysClock+0xc8>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <SetSysClock+0xc8>)
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <SetSysClock+0xc8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	6093      	str	r3, [r2, #8]
  
    RCC->ICSCR &= (uint32_t)((uint32_t)~(RCC_ICSCR_MSIRANGE));
 80029d0:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <SetSysClock+0xc8>)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <SetSysClock+0xc8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029da:	6053      	str	r3, [r2, #4]
    RCC->ICSCR |= (uint32_t)RCC_ICSCR_MSIRANGE_5;
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <SetSysClock+0xc8>)
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <SetSysClock+0xc8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80029e6:	6053      	str	r3, [r2, #4]

    /* Select MSI as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SetSysClock+0xc8>)
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <SetSysClock+0xc8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <SetSysClock+0xc8>)
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <SetSysClock+0xc8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	6093      	str	r3, [r2, #8]

    /* Wait till MSI is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_MSI)
 80029fc:	bf00      	nop
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SetSysClock+0xc8>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <SetSysClock+0xb2>
  else
  {
    /* If MSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	40007000 	.word	0x40007000

08002a20 <_Znwj>:
 8002a20:	b510      	push	{r4, lr}
 8002a22:	2800      	cmp	r0, #0
 8002a24:	bf14      	ite	ne
 8002a26:	4604      	movne	r4, r0
 8002a28:	2401      	moveq	r4, #1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f001 f87a 	bl	8003b24 <malloc>
 8002a30:	b930      	cbnz	r0, 8002a40 <_Znwj+0x20>
 8002a32:	f000 f809 	bl	8002a48 <_ZSt15get_new_handlerv>
 8002a36:	b908      	cbnz	r0, 8002a3c <_Znwj+0x1c>
 8002a38:	f001 f847 	bl	8003aca <abort>
 8002a3c:	4780      	blx	r0
 8002a3e:	e7f4      	b.n	8002a2a <_Znwj+0xa>
 8002a40:	bd10      	pop	{r4, pc}

08002a42 <_ZdlPv>:
 8002a42:	f001 b877 	b.w	8003b34 <free>
	...

08002a48 <_ZSt15get_new_handlerv>:
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <_ZSt15get_new_handlerv+0xc>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	f3bf 8f5f 	dmb	sy
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000110 	.word	0x20000110

08002a58 <cos>:
 8002a58:	b530      	push	{r4, r5, lr}
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <cos+0x64>)
 8002a5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a60:	4293      	cmp	r3, r2
 8002a62:	b087      	sub	sp, #28
 8002a64:	dc02      	bgt.n	8002a6c <cos+0x14>
 8002a66:	2200      	movs	r2, #0
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e015      	b.n	8002a98 <cos+0x40>
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <cos+0x68>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	dd04      	ble.n	8002a7c <cos+0x24>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	f7fd fb87 	bl	8000188 <__aeabi_dsub>
 8002a7a:	e01d      	b.n	8002ab8 <cos+0x60>
 8002a7c:	aa02      	add	r2, sp, #8
 8002a7e:	f000 f85b 	bl	8002b38 <__ieee754_rem_pio2>
 8002a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a86:	f000 0403 	and.w	r4, r0, #3
 8002a8a:	2c01      	cmp	r4, #1
 8002a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a90:	d005      	beq.n	8002a9e <cos+0x46>
 8002a92:	2c02      	cmp	r4, #2
 8002a94:	d007      	beq.n	8002aa6 <cos+0x4e>
 8002a96:	b95c      	cbnz	r4, 8002ab0 <cos+0x58>
 8002a98:	f000 fa3e 	bl	8002f18 <__kernel_cos>
 8002a9c:	e00c      	b.n	8002ab8 <cos+0x60>
 8002a9e:	9400      	str	r4, [sp, #0]
 8002aa0:	f000 fe66 	bl	8003770 <__kernel_sin>
 8002aa4:	e001      	b.n	8002aaa <cos+0x52>
 8002aa6:	f000 fa37 	bl	8002f18 <__kernel_cos>
 8002aaa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002aae:	e003      	b.n	8002ab8 <cos+0x60>
 8002ab0:	2401      	movs	r4, #1
 8002ab2:	9400      	str	r4, [sp, #0]
 8002ab4:	f000 fe5c 	bl	8003770 <__kernel_sin>
 8002ab8:	b007      	add	sp, #28
 8002aba:	bd30      	pop	{r4, r5, pc}
 8002abc:	3fe921fb 	.word	0x3fe921fb
 8002ac0:	7fefffff 	.word	0x7fefffff

08002ac4 <sin>:
 8002ac4:	b530      	push	{r4, r5, lr}
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <sin+0x6c>)
 8002ac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002acc:	4293      	cmp	r3, r2
 8002ace:	b087      	sub	sp, #28
 8002ad0:	dc04      	bgt.n	8002adc <sin+0x18>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e017      	b.n	8002b0c <sin+0x48>
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <sin+0x70>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	dd04      	ble.n	8002aec <sin+0x28>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	f7fd fb4f 	bl	8000188 <__aeabi_dsub>
 8002aea:	e01e      	b.n	8002b2a <sin+0x66>
 8002aec:	aa02      	add	r2, sp, #8
 8002aee:	f000 f823 	bl	8002b38 <__ieee754_rem_pio2>
 8002af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002af6:	f000 0403 	and.w	r4, r0, #3
 8002afa:	2c01      	cmp	r4, #1
 8002afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b00:	d007      	beq.n	8002b12 <sin+0x4e>
 8002b02:	2c02      	cmp	r4, #2
 8002b04:	d008      	beq.n	8002b18 <sin+0x54>
 8002b06:	b964      	cbnz	r4, 8002b22 <sin+0x5e>
 8002b08:	2401      	movs	r4, #1
 8002b0a:	9400      	str	r4, [sp, #0]
 8002b0c:	f000 fe30 	bl	8003770 <__kernel_sin>
 8002b10:	e00b      	b.n	8002b2a <sin+0x66>
 8002b12:	f000 fa01 	bl	8002f18 <__kernel_cos>
 8002b16:	e008      	b.n	8002b2a <sin+0x66>
 8002b18:	2401      	movs	r4, #1
 8002b1a:	9400      	str	r4, [sp, #0]
 8002b1c:	f000 fe28 	bl	8003770 <__kernel_sin>
 8002b20:	e001      	b.n	8002b26 <sin+0x62>
 8002b22:	f000 f9f9 	bl	8002f18 <__kernel_cos>
 8002b26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002b2a:	b007      	add	sp, #28
 8002b2c:	bd30      	pop	{r4, r5, pc}
 8002b2e:	bf00      	nop
 8002b30:	3fe921fb 	.word	0x3fe921fb
 8002b34:	7fefffff 	.word	0x7fefffff

08002b38 <__ieee754_rem_pio2>:
 8002b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	4ac2      	ldr	r2, [pc, #776]	; (8002e48 <__ieee754_rem_pio2+0x310>)
 8002b40:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8002b44:	4592      	cmp	sl, r2
 8002b46:	b08d      	sub	sp, #52	; 0x34
 8002b48:	468e      	mov	lr, r1
 8002b4a:	460d      	mov	r5, r1
 8002b4c:	dc06      	bgt.n	8002b5c <__ieee754_rem_pio2+0x24>
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2300      	movs	r3, #0
 8002b52:	e9c4 0100 	strd	r0, r1, [r4]
 8002b56:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002b5a:	e157      	b.n	8002e0c <__ieee754_rem_pio2+0x2d4>
 8002b5c:	4abb      	ldr	r2, [pc, #748]	; (8002e4c <__ieee754_rem_pio2+0x314>)
 8002b5e:	4592      	cmp	sl, r2
 8002b60:	dc6e      	bgt.n	8002c40 <__ieee754_rem_pio2+0x108>
 8002b62:	a3ab      	add	r3, pc, #684	; (adr r3, 8002e10 <__ieee754_rem_pio2+0x2d8>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	4db9      	ldr	r5, [pc, #740]	; (8002e50 <__ieee754_rem_pio2+0x318>)
 8002b6c:	dd33      	ble.n	8002bd6 <__ieee754_rem_pio2+0x9e>
 8002b6e:	f7fd fb0b 	bl	8000188 <__aeabi_dsub>
 8002b72:	45aa      	cmp	sl, r5
 8002b74:	4606      	mov	r6, r0
 8002b76:	460f      	mov	r7, r1
 8002b78:	d010      	beq.n	8002b9c <__ieee754_rem_pio2+0x64>
 8002b7a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002e18 <__ieee754_rem_pio2+0x2e0>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd fb02 	bl	8000188 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4630      	mov	r0, r6
 8002b8a:	e9c4 2300 	strd	r2, r3, [r4]
 8002b8e:	4639      	mov	r1, r7
 8002b90:	f7fd fafa 	bl	8000188 <__aeabi_dsub>
 8002b94:	a3a0      	add	r3, pc, #640	; (adr r3, 8002e18 <__ieee754_rem_pio2+0x2e0>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	e016      	b.n	8002bca <__ieee754_rem_pio2+0x92>
 8002b9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8002e20 <__ieee754_rem_pio2+0x2e8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd faf1 	bl	8000188 <__aeabi_dsub>
 8002ba6:	a3a0      	add	r3, pc, #640	; (adr r3, 8002e28 <__ieee754_rem_pio2+0x2f0>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	4606      	mov	r6, r0
 8002bae:	460f      	mov	r7, r1
 8002bb0:	f7fd faea 	bl	8000188 <__aeabi_dsub>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4630      	mov	r0, r6
 8002bba:	e9c4 2300 	strd	r2, r3, [r4]
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	f7fd fae2 	bl	8000188 <__aeabi_dsub>
 8002bc4:	a398      	add	r3, pc, #608	; (adr r3, 8002e28 <__ieee754_rem_pio2+0x2f0>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fadd 	bl	8000188 <__aeabi_dsub>
 8002bce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	e196      	b.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002bd6:	f7fd fad9 	bl	800018c <__adddf3>
 8002bda:	45aa      	cmp	sl, r5
 8002bdc:	4606      	mov	r6, r0
 8002bde:	460f      	mov	r7, r1
 8002be0:	d010      	beq.n	8002c04 <__ieee754_rem_pio2+0xcc>
 8002be2:	a38d      	add	r3, pc, #564	; (adr r3, 8002e18 <__ieee754_rem_pio2+0x2e0>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fad0 	bl	800018c <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	e9c4 2300 	strd	r2, r3, [r4]
 8002bf6:	4639      	mov	r1, r7
 8002bf8:	f7fd fac6 	bl	8000188 <__aeabi_dsub>
 8002bfc:	a386      	add	r3, pc, #536	; (adr r3, 8002e18 <__ieee754_rem_pio2+0x2e0>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	e016      	b.n	8002c32 <__ieee754_rem_pio2+0xfa>
 8002c04:	a386      	add	r3, pc, #536	; (adr r3, 8002e20 <__ieee754_rem_pio2+0x2e8>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fabf 	bl	800018c <__adddf3>
 8002c0e:	a386      	add	r3, pc, #536	; (adr r3, 8002e28 <__ieee754_rem_pio2+0x2f0>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	4606      	mov	r6, r0
 8002c16:	460f      	mov	r7, r1
 8002c18:	f7fd fab8 	bl	800018c <__adddf3>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4630      	mov	r0, r6
 8002c22:	e9c4 2300 	strd	r2, r3, [r4]
 8002c26:	4639      	mov	r1, r7
 8002c28:	f7fd faae 	bl	8000188 <__aeabi_dsub>
 8002c2c:	a37e      	add	r3, pc, #504	; (adr r3, 8002e28 <__ieee754_rem_pio2+0x2f0>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd faab 	bl	800018c <__adddf3>
 8002c36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3e:	e161      	b.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002c40:	4a84      	ldr	r2, [pc, #528]	; (8002e54 <__ieee754_rem_pio2+0x31c>)
 8002c42:	4592      	cmp	sl, r2
 8002c44:	f300 80d7 	bgt.w	8002df6 <__ieee754_rem_pio2+0x2be>
 8002c48:	f000 fe44 	bl	80038d4 <fabs>
 8002c4c:	a378      	add	r3, pc, #480	; (adr r3, 8002e30 <__ieee754_rem_pio2+0x2f8>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	4606      	mov	r6, r0
 8002c54:	460f      	mov	r7, r1
 8002c56:	f7fd fc4b 	bl	80004f0 <__aeabi_dmul>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <__ieee754_rem_pio2+0x320>)
 8002c5e:	f7fd fa95 	bl	800018c <__adddf3>
 8002c62:	f7fd fedf 	bl	8000a24 <__aeabi_d2iz>
 8002c66:	4683      	mov	fp, r0
 8002c68:	f7fd fbdc 	bl	8000424 <__aeabi_i2d>
 8002c6c:	a368      	add	r3, pc, #416	; (adr r3, 8002e10 <__ieee754_rem_pio2+0x2d8>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c76:	f7fd fc3b 	bl	80004f0 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4630      	mov	r0, r6
 8002c80:	4639      	mov	r1, r7
 8002c82:	f7fd fa81 	bl	8000188 <__aeabi_dsub>
 8002c86:	a364      	add	r3, pc, #400	; (adr r3, 8002e18 <__ieee754_rem_pio2+0x2e0>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	4606      	mov	r6, r0
 8002c8e:	460f      	mov	r7, r1
 8002c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c94:	f7fd fc2c 	bl	80004f0 <__aeabi_dmul>
 8002c98:	f1bb 0f1f 	cmp.w	fp, #31
 8002c9c:	4680      	mov	r8, r0
 8002c9e:	4689      	mov	r9, r1
 8002ca0:	dc06      	bgt.n	8002cb0 <__ieee754_rem_pio2+0x178>
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <__ieee754_rem_pio2+0x324>)
 8002ca4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	459a      	cmp	sl, r3
 8002cae:	d176      	bne.n	8002d9e <__ieee754_rem_pio2+0x266>
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	4639      	mov	r1, r7
 8002cb8:	f7fd fa66 	bl	8000188 <__aeabi_dsub>
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8002cc4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002cc8:	ebc1 010a 	rsb	r1, r1, sl
 8002ccc:	2910      	cmp	r1, #16
 8002cce:	e9c4 2300 	strd	r2, r3, [r4]
 8002cd2:	dd6f      	ble.n	8002db4 <__ieee754_rem_pio2+0x27c>
 8002cd4:	a352      	add	r3, pc, #328	; (adr r3, 8002e20 <__ieee754_rem_pio2+0x2e8>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cde:	f7fd fc07 	bl	80004f0 <__aeabi_dmul>
 8002ce2:	4680      	mov	r8, r0
 8002ce4:	4689      	mov	r9, r1
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4630      	mov	r0, r6
 8002cec:	4639      	mov	r1, r7
 8002cee:	f7fd fa4b 	bl	8000188 <__aeabi_dsub>
 8002cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	f7fd fa43 	bl	8000188 <__aeabi_dsub>
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	f7fd fa3f 	bl	8000188 <__aeabi_dsub>
 8002d0a:	a347      	add	r3, pc, #284	; (adr r3, 8002e28 <__ieee754_rem_pio2+0x2f0>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	4606      	mov	r6, r0
 8002d12:	460f      	mov	r7, r1
 8002d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d18:	f7fd fbea 	bl	80004f0 <__aeabi_dmul>
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	463b      	mov	r3, r7
 8002d20:	f7fd fa32 	bl	8000188 <__aeabi_dsub>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4680      	mov	r8, r0
 8002d2a:	4689      	mov	r9, r1
 8002d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d30:	f7fd fa2a 	bl	8000188 <__aeabi_dsub>
 8002d34:	460b      	mov	r3, r1
 8002d36:	4602      	mov	r2, r0
 8002d38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002d3c:	ebc1 0a0a 	rsb	sl, r1, sl
 8002d40:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8002d44:	e9c4 2300 	strd	r2, r3, [r4]
 8002d48:	dd32      	ble.n	8002db0 <__ieee754_rem_pio2+0x278>
 8002d4a:	a33b      	add	r3, pc, #236	; (adr r3, 8002e38 <__ieee754_rem_pio2+0x300>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d54:	f7fd fbcc 	bl	80004f0 <__aeabi_dmul>
 8002d58:	4680      	mov	r8, r0
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d64:	f7fd fa10 	bl	8000188 <__aeabi_dsub>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	460f      	mov	r7, r1
 8002d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d74:	f7fd fa08 	bl	8000188 <__aeabi_dsub>
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	f7fd fa04 	bl	8000188 <__aeabi_dsub>
 8002d80:	a32f      	add	r3, pc, #188	; (adr r3, 8002e40 <__ieee754_rem_pio2+0x308>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	4680      	mov	r8, r0
 8002d88:	4689      	mov	r9, r1
 8002d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d8e:	f7fd fbaf 	bl	80004f0 <__aeabi_dmul>
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	f7fd f9f7 	bl	8000188 <__aeabi_dsub>
 8002d9a:	4680      	mov	r8, r0
 8002d9c:	4689      	mov	r9, r1
 8002d9e:	4642      	mov	r2, r8
 8002da0:	464b      	mov	r3, r9
 8002da2:	4630      	mov	r0, r6
 8002da4:	4639      	mov	r1, r7
 8002da6:	f7fd f9ef 	bl	8000188 <__aeabi_dsub>
 8002daa:	e9c4 0100 	strd	r0, r1, [r4]
 8002dae:	e001      	b.n	8002db4 <__ieee754_rem_pio2+0x27c>
 8002db0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	9a02      	ldr	r2, [sp, #8]
 8002dbe:	4653      	mov	r3, sl
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	4639      	mov	r1, r7
 8002dc4:	f7fd f9e0 	bl	8000188 <__aeabi_dsub>
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	f7fd f9dc 	bl	8000188 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002dda:	f280 8092 	bge.w	8002f02 <__ieee754_rem_pio2+0x3ca>
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8002dea:	60a0      	str	r0, [r4, #8]
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	60e1      	str	r1, [r4, #12]
 8002df0:	f1cb 0000 	rsb	r0, fp, #0
 8002df4:	e086      	b.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <__ieee754_rem_pio2+0x328>)
 8002df8:	4592      	cmp	sl, r2
 8002dfa:	dd33      	ble.n	8002e64 <__ieee754_rem_pio2+0x32c>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f7fd f9c2 	bl	8000188 <__aeabi_dsub>
 8002e04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002e08:	e9c4 0100 	strd	r0, r1, [r4]
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	e079      	b.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002e10:	54400000 	.word	0x54400000
 8002e14:	3ff921fb 	.word	0x3ff921fb
 8002e18:	1a626331 	.word	0x1a626331
 8002e1c:	3dd0b461 	.word	0x3dd0b461
 8002e20:	1a600000 	.word	0x1a600000
 8002e24:	3dd0b461 	.word	0x3dd0b461
 8002e28:	2e037073 	.word	0x2e037073
 8002e2c:	3ba3198a 	.word	0x3ba3198a
 8002e30:	6dc9c883 	.word	0x6dc9c883
 8002e34:	3fe45f30 	.word	0x3fe45f30
 8002e38:	2e000000 	.word	0x2e000000
 8002e3c:	3ba3198a 	.word	0x3ba3198a
 8002e40:	252049c1 	.word	0x252049c1
 8002e44:	397b839a 	.word	0x397b839a
 8002e48:	3fe921fb 	.word	0x3fe921fb
 8002e4c:	4002d97b 	.word	0x4002d97b
 8002e50:	3ff921fb 	.word	0x3ff921fb
 8002e54:	413921fb 	.word	0x413921fb
 8002e58:	3fe00000 	.word	0x3fe00000
 8002e5c:	08003db8 	.word	0x08003db8
 8002e60:	7fefffff 	.word	0x7fefffff
 8002e64:	ea4f 582a 	mov.w	r8, sl, asr #20
 8002e68:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 8002e6c:	ebaa 5108 	sub.w	r1, sl, r8, lsl #20
 8002e70:	460f      	mov	r7, r1
 8002e72:	4606      	mov	r6, r0
 8002e74:	f7fd fdd6 	bl	8000a24 <__aeabi_d2iz>
 8002e78:	f7fd fad4 	bl	8000424 <__aeabi_i2d>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4630      	mov	r0, r6
 8002e82:	4639      	mov	r1, r7
 8002e84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e88:	f7fd f97e 	bl	8000188 <__aeabi_dsub>
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <__ieee754_rem_pio2+0x3d4>)
 8002e90:	f7fd fb2e 	bl	80004f0 <__aeabi_dmul>
 8002e94:	460f      	mov	r7, r1
 8002e96:	4606      	mov	r6, r0
 8002e98:	f7fd fdc4 	bl	8000a24 <__aeabi_d2iz>
 8002e9c:	f7fd fac2 	bl	8000424 <__aeabi_i2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	4639      	mov	r1, r7
 8002ea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002eac:	f7fd f96c 	bl	8000188 <__aeabi_dsub>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <__ieee754_rem_pio2+0x3d4>)
 8002eb4:	f7fd fb1c 	bl	80004f0 <__aeabi_dmul>
 8002eb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002ebc:	af0c      	add	r7, sp, #48	; 0x30
 8002ebe:	2603      	movs	r6, #3
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e977 0102 	ldrd	r0, r1, [r7, #-8]!
 8002ec8:	f106 39ff 	add.w	r9, r6, #4294967295
 8002ecc:	f7fd fd78 	bl	80009c0 <__aeabi_dcmpeq>
 8002ed0:	b108      	cbz	r0, 8002ed6 <__ieee754_rem_pio2+0x39e>
 8002ed2:	464e      	mov	r6, r9
 8002ed4:	e7f4      	b.n	8002ec0 <__ieee754_rem_pio2+0x388>
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <__ieee754_rem_pio2+0x3d8>)
 8002ed8:	4642      	mov	r2, r8
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4633      	mov	r3, r6
 8002ee4:	a806      	add	r0, sp, #24
 8002ee6:	f000 f8f5 	bl	80030d4 <__kernel_rem_pio2>
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	da0a      	bge.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	4240      	negs	r0, r0
 8002ef2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	6063      	str	r3, [r4, #4]
 8002ef8:	68e3      	ldr	r3, [r4, #12]
 8002efa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002efe:	60e3      	str	r3, [r4, #12]
 8002f00:	e000      	b.n	8002f04 <__ieee754_rem_pio2+0x3cc>
 8002f02:	4658      	mov	r0, fp
 8002f04:	b00d      	add	sp, #52	; 0x34
 8002f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	41700000 	.word	0x41700000
 8002f10:	08003e38 	.word	0x08003e38
 8002f14:	00000000 	.word	0x00000000

08002f18 <__kernel_cos>:
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8002f20:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002f24:	b085      	sub	sp, #20
 8002f26:	4605      	mov	r5, r0
 8002f28:	460c      	mov	r4, r1
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	469b      	mov	fp, r3
 8002f2e:	da04      	bge.n	8002f3a <__kernel_cos+0x22>
 8002f30:	f7fd fd78 	bl	8000a24 <__aeabi_d2iz>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f000 80a6 	beq.w	8003086 <__kernel_cos+0x16e>
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4621      	mov	r1, r4
 8002f42:	f7fd fad5 	bl	80004f0 <__aeabi_dmul>
 8002f46:	a352      	add	r3, pc, #328	; (adr r3, 8003090 <__kernel_cos+0x178>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4689      	mov	r9, r1
 8002f50:	f7fd face 	bl	80004f0 <__aeabi_dmul>
 8002f54:	a350      	add	r3, pc, #320	; (adr r3, 8003098 <__kernel_cos+0x180>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd f917 	bl	800018c <__adddf3>
 8002f5e:	4642      	mov	r2, r8
 8002f60:	464b      	mov	r3, r9
 8002f62:	f7fd fac5 	bl	80004f0 <__aeabi_dmul>
 8002f66:	a34e      	add	r3, pc, #312	; (adr r3, 80030a0 <__kernel_cos+0x188>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd f90c 	bl	8000188 <__aeabi_dsub>
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	f7fd fabc 	bl	80004f0 <__aeabi_dmul>
 8002f78:	a34b      	add	r3, pc, #300	; (adr r3, 80030a8 <__kernel_cos+0x190>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd f905 	bl	800018c <__adddf3>
 8002f82:	4642      	mov	r2, r8
 8002f84:	464b      	mov	r3, r9
 8002f86:	f7fd fab3 	bl	80004f0 <__aeabi_dmul>
 8002f8a:	a349      	add	r3, pc, #292	; (adr r3, 80030b0 <__kernel_cos+0x198>)
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f7fd f8fa 	bl	8000188 <__aeabi_dsub>
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	f7fd faaa 	bl	80004f0 <__aeabi_dmul>
 8002f9c:	a346      	add	r3, pc, #280	; (adr r3, 80030b8 <__kernel_cos+0x1a0>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd f8f3 	bl	800018c <__adddf3>
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	4642      	mov	r2, r8
 8002faa:	f7fd faa1 	bl	80004f0 <__aeabi_dmul>
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <__kernel_cos+0x1a8>)
 8002fb0:	e9cd 0100 	strd	r0, r1, [sp]
 8002fb4:	429f      	cmp	r7, r3
 8002fb6:	dc26      	bgt.n	8003006 <__kernel_cos+0xee>
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <__kernel_cos+0x1ac>)
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	f7fd fa96 	bl	80004f0 <__aeabi_dmul>
 8002fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fc8:	4606      	mov	r6, r0
 8002fca:	460f      	mov	r7, r1
 8002fcc:	4640      	mov	r0, r8
 8002fce:	4649      	mov	r1, r9
 8002fd0:	f7fd fa8e 	bl	80004f0 <__aeabi_dmul>
 8002fd4:	4652      	mov	r2, sl
 8002fd6:	4680      	mov	r8, r0
 8002fd8:	4689      	mov	r9, r1
 8002fda:	465b      	mov	r3, fp
 8002fdc:	4628      	mov	r0, r5
 8002fde:	4621      	mov	r1, r4
 8002fe0:	f7fd fa86 	bl	80004f0 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4640      	mov	r0, r8
 8002fea:	4649      	mov	r1, r9
 8002fec:	f7fd f8cc 	bl	8000188 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	f7fd f8c6 	bl	8000188 <__aeabi_dsub>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	2000      	movs	r0, #0
 8003002:	4931      	ldr	r1, [pc, #196]	; (80030c8 <__kernel_cos+0x1b0>)
 8003004:	e03c      	b.n	8003080 <__kernel_cos+0x168>
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <__kernel_cos+0x1b4>)
 8003008:	2000      	movs	r0, #0
 800300a:	429f      	cmp	r7, r3
 800300c:	bfdf      	itttt	le
 800300e:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8003012:	2200      	movle	r2, #0
 8003014:	4616      	movle	r6, r2
 8003016:	461f      	movle	r7, r3
 8003018:	bfc4      	itt	gt
 800301a:	4f2d      	ldrgt	r7, [pc, #180]	; (80030d0 <__kernel_cos+0x1b8>)
 800301c:	2600      	movgt	r6, #0
 800301e:	4632      	mov	r2, r6
 8003020:	463b      	mov	r3, r7
 8003022:	4929      	ldr	r1, [pc, #164]	; (80030c8 <__kernel_cos+0x1b0>)
 8003024:	f7fd f8b0 	bl	8000188 <__aeabi_dsub>
 8003028:	2200      	movs	r2, #0
 800302a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800302e:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <__kernel_cos+0x1ac>)
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	f7fd fa5c 	bl	80004f0 <__aeabi_dmul>
 8003038:	4632      	mov	r2, r6
 800303a:	463b      	mov	r3, r7
 800303c:	f7fd f8a4 	bl	8000188 <__aeabi_dsub>
 8003040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003044:	4606      	mov	r6, r0
 8003046:	460f      	mov	r7, r1
 8003048:	4640      	mov	r0, r8
 800304a:	4649      	mov	r1, r9
 800304c:	f7fd fa50 	bl	80004f0 <__aeabi_dmul>
 8003050:	4652      	mov	r2, sl
 8003052:	4680      	mov	r8, r0
 8003054:	4689      	mov	r9, r1
 8003056:	465b      	mov	r3, fp
 8003058:	4628      	mov	r0, r5
 800305a:	4621      	mov	r1, r4
 800305c:	f7fd fa48 	bl	80004f0 <__aeabi_dmul>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4640      	mov	r0, r8
 8003066:	4649      	mov	r1, r9
 8003068:	f7fd f88e 	bl	8000188 <__aeabi_dsub>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4630      	mov	r0, r6
 8003072:	4639      	mov	r1, r7
 8003074:	f7fd f888 	bl	8000188 <__aeabi_dsub>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003080:	f7fd f882 	bl	8000188 <__aeabi_dsub>
 8003084:	e001      	b.n	800308a <__kernel_cos+0x172>
 8003086:	4910      	ldr	r1, [pc, #64]	; (80030c8 <__kernel_cos+0x1b0>)
 8003088:	2000      	movs	r0, #0
 800308a:	b005      	add	sp, #20
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003090:	be8838d4 	.word	0xbe8838d4
 8003094:	bda8fae9 	.word	0xbda8fae9
 8003098:	bdb4b1c4 	.word	0xbdb4b1c4
 800309c:	3e21ee9e 	.word	0x3e21ee9e
 80030a0:	809c52ad 	.word	0x809c52ad
 80030a4:	3e927e4f 	.word	0x3e927e4f
 80030a8:	19cb1590 	.word	0x19cb1590
 80030ac:	3efa01a0 	.word	0x3efa01a0
 80030b0:	16c15177 	.word	0x16c15177
 80030b4:	3f56c16c 	.word	0x3f56c16c
 80030b8:	5555554c 	.word	0x5555554c
 80030bc:	3fa55555 	.word	0x3fa55555
 80030c0:	3fd33332 	.word	0x3fd33332
 80030c4:	3fe00000 	.word	0x3fe00000
 80030c8:	3ff00000 	.word	0x3ff00000
 80030cc:	3fe90000 	.word	0x3fe90000
 80030d0:	3fd20000 	.word	0x3fd20000

080030d4 <__kernel_rem_pio2>:
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80030dc:	9307      	str	r3, [sp, #28]
 80030de:	9106      	str	r1, [sp, #24]
 80030e0:	4bb1      	ldr	r3, [pc, #708]	; (80033a8 <__kernel_rem_pio2+0x2d4>)
 80030e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80030e4:	2418      	movs	r4, #24
 80030e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030ea:	9009      	str	r0, [sp, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	9b07      	ldr	r3, [sp, #28]
 80030f0:	ae1e      	add	r6, sp, #120	; 0x78
 80030f2:	3b01      	subs	r3, #1
 80030f4:	9304      	str	r3, [sp, #16]
 80030f6:	1ed3      	subs	r3, r2, #3
 80030f8:	fb93 f4f4 	sdiv	r4, r3, r4
 80030fc:	f06f 0317 	mvn.w	r3, #23
 8003100:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003104:	fb04 3303 	mla	r3, r4, r3, r3
 8003108:	eb03 0a02 	add.w	sl, r3, r2
 800310c:	9b00      	ldr	r3, [sp, #0]
 800310e:	9a04      	ldr	r2, [sp, #16]
 8003110:	2500      	movs	r5, #0
 8003112:	eb03 0802 	add.w	r8, r3, r2
 8003116:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003118:	1aa7      	subs	r7, r4, r2
 800311a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800311e:	4545      	cmp	r5, r8
 8003120:	dc0c      	bgt.n	800313c <__kernel_rem_pio2+0x68>
 8003122:	42ef      	cmn	r7, r5
 8003124:	d404      	bmi.n	8003130 <__kernel_rem_pio2+0x5c>
 8003126:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800312a:	f7fd f97b 	bl	8000424 <__aeabi_i2d>
 800312e:	e001      	b.n	8003134 <__kernel_rem_pio2+0x60>
 8003130:	2000      	movs	r0, #0
 8003132:	2100      	movs	r1, #0
 8003134:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8003138:	3501      	adds	r5, #1
 800313a:	e7f0      	b.n	800311e <__kernel_rem_pio2+0x4a>
 800313c:	ab6e      	add	r3, sp, #440	; 0x1b8
 800313e:	9302      	str	r3, [sp, #8]
 8003140:	2600      	movs	r6, #0
 8003142:	9b00      	ldr	r3, [sp, #0]
 8003144:	429e      	cmp	r6, r3
 8003146:	dc25      	bgt.n	8003194 <__kernel_rem_pio2+0xc0>
 8003148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800314a:	f04f 0800 	mov.w	r8, #0
 800314e:	f1a3 0b08 	sub.w	fp, r3, #8
 8003152:	9b07      	ldr	r3, [sp, #28]
 8003154:	f04f 0900 	mov.w	r9, #0
 8003158:	199d      	adds	r5, r3, r6
 800315a:	ab20      	add	r3, sp, #128	; 0x80
 800315c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003160:	2700      	movs	r7, #0
 8003162:	9b04      	ldr	r3, [sp, #16]
 8003164:	429f      	cmp	r7, r3
 8003166:	dc0f      	bgt.n	8003188 <__kernel_rem_pio2+0xb4>
 8003168:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800316c:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
 8003170:	f7fd f9be 	bl	80004f0 <__aeabi_dmul>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd f806 	bl	800018c <__adddf3>
 8003180:	3701      	adds	r7, #1
 8003182:	4680      	mov	r8, r0
 8003184:	4689      	mov	r9, r1
 8003186:	e7ec      	b.n	8003162 <__kernel_rem_pio2+0x8e>
 8003188:	9b02      	ldr	r3, [sp, #8]
 800318a:	3601      	adds	r6, #1
 800318c:	e9e3 8902 	strd	r8, r9, [r3, #8]!
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	e7d6      	b.n	8003142 <__kernel_rem_pio2+0x6e>
 8003194:	9b00      	ldr	r3, [sp, #0]
 8003196:	aa0c      	add	r2, sp, #48	; 0x30
 8003198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800319c:	930a      	str	r3, [sp, #40]	; 0x28
 800319e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80031a0:	f8dd b000 	ldr.w	fp, [sp]
 80031a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80031a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80031aa:	ab98      	add	r3, sp, #608	; 0x260
 80031ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80031b0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80031b4:	f10b 5300 	add.w	r3, fp, #536870912	; 0x20000000
 80031b8:	3b01      	subs	r3, #1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	aa98      	add	r2, sp, #608	; 0x260
 80031be:	eb02 0903 	add.w	r9, r2, r3
 80031c2:	9308      	str	r3, [sp, #32]
 80031c4:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 80031c8:	f04f 0800 	mov.w	r8, #0
 80031cc:	ebc8 030b 	rsb	r3, r8, fp
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dd25      	ble.n	8003220 <__kernel_rem_pio2+0x14c>
 80031d4:	2200      	movs	r2, #0
 80031d6:	4b75      	ldr	r3, [pc, #468]	; (80033ac <__kernel_rem_pio2+0x2d8>)
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fd f988 	bl	80004f0 <__aeabi_dmul>
 80031e0:	f7fd fc20 	bl	8000a24 <__aeabi_d2iz>
 80031e4:	f7fd f91e 	bl	8000424 <__aeabi_i2d>
 80031e8:	2200      	movs	r2, #0
 80031ea:	4b71      	ldr	r3, [pc, #452]	; (80033b0 <__kernel_rem_pio2+0x2dc>)
 80031ec:	4606      	mov	r6, r0
 80031ee:	460f      	mov	r7, r1
 80031f0:	f7fd f97e 	bl	80004f0 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc ffc4 	bl	8000188 <__aeabi_dsub>
 8003200:	f7fd fc10 	bl	8000a24 <__aeabi_d2iz>
 8003204:	ab0c      	add	r3, sp, #48	; 0x30
 8003206:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800320a:	4639      	mov	r1, r7
 800320c:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8003210:	4630      	mov	r0, r6
 8003212:	f7fc ffbb 	bl	800018c <__adddf3>
 8003216:	f108 0801 	add.w	r8, r8, #1
 800321a:	4604      	mov	r4, r0
 800321c:	460d      	mov	r5, r1
 800321e:	e7d5      	b.n	80031cc <__kernel_rem_pio2+0xf8>
 8003220:	4652      	mov	r2, sl
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f000 fbdb 	bl	80039e0 <scalbn>
 800322a:	2200      	movs	r2, #0
 800322c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003230:	4604      	mov	r4, r0
 8003232:	460d      	mov	r5, r1
 8003234:	f7fd f95c 	bl	80004f0 <__aeabi_dmul>
 8003238:	f000 fb52 	bl	80038e0 <floor>
 800323c:	2200      	movs	r2, #0
 800323e:	4b5d      	ldr	r3, [pc, #372]	; (80033b4 <__kernel_rem_pio2+0x2e0>)
 8003240:	f7fd f956 	bl	80004f0 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4620      	mov	r0, r4
 800324a:	4629      	mov	r1, r5
 800324c:	f7fc ff9c 	bl	8000188 <__aeabi_dsub>
 8003250:	460d      	mov	r5, r1
 8003252:	4604      	mov	r4, r0
 8003254:	f7fd fbe6 	bl	8000a24 <__aeabi_d2iz>
 8003258:	9002      	str	r0, [sp, #8]
 800325a:	f7fd f8e3 	bl	8000424 <__aeabi_i2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fc ff8f 	bl	8000188 <__aeabi_dsub>
 800326a:	f1ba 0f00 	cmp.w	sl, #0
 800326e:	4606      	mov	r6, r0
 8003270:	460f      	mov	r7, r1
 8003272:	dd15      	ble.n	80032a0 <__kernel_rem_pio2+0x1cc>
 8003274:	f10b 31ff 	add.w	r1, fp, #4294967295
 8003278:	ab0c      	add	r3, sp, #48	; 0x30
 800327a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800327e:	f1ca 0018 	rsb	r0, sl, #24
 8003282:	9c02      	ldr	r4, [sp, #8]
 8003284:	fa42 f300 	asr.w	r3, r2, r0
 8003288:	441c      	add	r4, r3
 800328a:	4083      	lsls	r3, r0
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f1ca 0017 	rsb	r0, sl, #23
 8003292:	aa0c      	add	r2, sp, #48	; 0x30
 8003294:	9402      	str	r4, [sp, #8]
 8003296:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800329a:	fa43 f900 	asr.w	r9, r3, r0
 800329e:	e00f      	b.n	80032c0 <__kernel_rem_pio2+0x1ec>
 80032a0:	d107      	bne.n	80032b2 <__kernel_rem_pio2+0x1de>
 80032a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80032a6:	aa0c      	add	r2, sp, #48	; 0x30
 80032a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032ac:	ea4f 59e0 	mov.w	r9, r0, asr #23
 80032b0:	e006      	b.n	80032c0 <__kernel_rem_pio2+0x1ec>
 80032b2:	2200      	movs	r2, #0
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <__kernel_rem_pio2+0x2e4>)
 80032b6:	f7fd fba1 	bl	80009fc <__aeabi_dcmpge>
 80032ba:	b928      	cbnz	r0, 80032c8 <__kernel_rem_pio2+0x1f4>
 80032bc:	4681      	mov	r9, r0
 80032be:	e052      	b.n	8003366 <__kernel_rem_pio2+0x292>
 80032c0:	f1b9 0f00 	cmp.w	r9, #0
 80032c4:	dc02      	bgt.n	80032cc <__kernel_rem_pio2+0x1f8>
 80032c6:	e04e      	b.n	8003366 <__kernel_rem_pio2+0x292>
 80032c8:	f04f 0902 	mov.w	r9, #2
 80032cc:	2200      	movs	r2, #0
 80032ce:	4614      	mov	r4, r2
 80032d0:	9b02      	ldr	r3, [sp, #8]
 80032d2:	3301      	adds	r3, #1
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	4593      	cmp	fp, r2
 80032d8:	dd11      	ble.n	80032fe <__kernel_rem_pio2+0x22a>
 80032da:	ab0c      	add	r3, sp, #48	; 0x30
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	b91c      	cbnz	r4, 80032ea <__kernel_rem_pio2+0x216>
 80032e2:	b153      	cbz	r3, 80032fa <__kernel_rem_pio2+0x226>
 80032e4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80032e8:	e003      	b.n	80032f2 <__kernel_rem_pio2+0x21e>
 80032ea:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80032ee:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80032f2:	a90c      	add	r1, sp, #48	; 0x30
 80032f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80032f8:	2401      	movs	r4, #1
 80032fa:	3201      	adds	r2, #1
 80032fc:	e7eb      	b.n	80032d6 <__kernel_rem_pio2+0x202>
 80032fe:	f1ba 0f00 	cmp.w	sl, #0
 8003302:	dd17      	ble.n	8003334 <__kernel_rem_pio2+0x260>
 8003304:	f1ba 0f01 	cmp.w	sl, #1
 8003308:	d00a      	beq.n	8003320 <__kernel_rem_pio2+0x24c>
 800330a:	f1ba 0f02 	cmp.w	sl, #2
 800330e:	d111      	bne.n	8003334 <__kernel_rem_pio2+0x260>
 8003310:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003314:	ab0c      	add	r3, sp, #48	; 0x30
 8003316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800331e:	e006      	b.n	800332e <__kernel_rem_pio2+0x25a>
 8003320:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003324:	ab0c      	add	r3, sp, #48	; 0x30
 8003326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800332e:	a90c      	add	r1, sp, #48	; 0x30
 8003330:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003334:	f1b9 0f02 	cmp.w	r9, #2
 8003338:	d115      	bne.n	8003366 <__kernel_rem_pio2+0x292>
 800333a:	4632      	mov	r2, r6
 800333c:	463b      	mov	r3, r7
 800333e:	2000      	movs	r0, #0
 8003340:	491e      	ldr	r1, [pc, #120]	; (80033bc <__kernel_rem_pio2+0x2e8>)
 8003342:	f7fc ff21 	bl	8000188 <__aeabi_dsub>
 8003346:	4606      	mov	r6, r0
 8003348:	460f      	mov	r7, r1
 800334a:	b164      	cbz	r4, 8003366 <__kernel_rem_pio2+0x292>
 800334c:	4652      	mov	r2, sl
 800334e:	2000      	movs	r0, #0
 8003350:	491a      	ldr	r1, [pc, #104]	; (80033bc <__kernel_rem_pio2+0x2e8>)
 8003352:	f000 fb45 	bl	80039e0 <scalbn>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4630      	mov	r0, r6
 800335c:	4639      	mov	r1, r7
 800335e:	f7fc ff13 	bl	8000188 <__aeabi_dsub>
 8003362:	4606      	mov	r6, r0
 8003364:	460f      	mov	r7, r1
 8003366:	2200      	movs	r2, #0
 8003368:	2300      	movs	r3, #0
 800336a:	4630      	mov	r0, r6
 800336c:	4639      	mov	r1, r7
 800336e:	f7fd fb27 	bl	80009c0 <__aeabi_dcmpeq>
 8003372:	2800      	cmp	r0, #0
 8003374:	d072      	beq.n	800345c <__kernel_rem_pio2+0x388>
 8003376:	f10b 31ff 	add.w	r1, fp, #4294967295
 800337a:	460b      	mov	r3, r1
 800337c:	2200      	movs	r2, #0
 800337e:	9800      	ldr	r0, [sp, #0]
 8003380:	4283      	cmp	r3, r0
 8003382:	db05      	blt.n	8003390 <__kernel_rem_pio2+0x2bc>
 8003384:	a80c      	add	r0, sp, #48	; 0x30
 8003386:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800338a:	3b01      	subs	r3, #1
 800338c:	4302      	orrs	r2, r0
 800338e:	e7f6      	b.n	800337e <__kernel_rem_pio2+0x2aa>
 8003390:	2a00      	cmp	r2, #0
 8003392:	d157      	bne.n	8003444 <__kernel_rem_pio2+0x370>
 8003394:	2501      	movs	r5, #1
 8003396:	f06f 0203 	mvn.w	r2, #3
 800339a:	fb02 f305 	mul.w	r3, r2, r5
 800339e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033a0:	58cb      	ldr	r3, [r1, r3]
 80033a2:	b96b      	cbnz	r3, 80033c0 <__kernel_rem_pio2+0x2ec>
 80033a4:	3501      	adds	r5, #1
 80033a6:	e7f8      	b.n	800339a <__kernel_rem_pio2+0x2c6>
 80033a8:	08003f40 	.word	0x08003f40
 80033ac:	3e700000 	.word	0x3e700000
 80033b0:	41700000 	.word	0x41700000
 80033b4:	40200000 	.word	0x40200000
 80033b8:	3fe00000 	.word	0x3fe00000
 80033bc:	3ff00000 	.word	0x3ff00000
 80033c0:	9b08      	ldr	r3, [sp, #32]
 80033c2:	aa98      	add	r2, sp, #608	; 0x260
 80033c4:	4413      	add	r3, r2
 80033c6:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80033ca:	9b07      	ldr	r3, [sp, #28]
 80033cc:	f10b 0701 	add.w	r7, fp, #1
 80033d0:	eb03 040b 	add.w	r4, r3, fp
 80033d4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80033d8:	f5a4 74f4 	sub.w	r4, r4, #488	; 0x1e8
 80033dc:	445d      	add	r5, fp
 80033de:	42af      	cmp	r7, r5
 80033e0:	dc2e      	bgt.n	8003440 <__kernel_rem_pio2+0x36c>
 80033e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033e4:	f104 0b08 	add.w	fp, r4, #8
 80033e8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80033ec:	f7fd f81a 	bl	8000424 <__aeabi_i2d>
 80033f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f2:	2200      	movs	r2, #0
 80033f4:	f1a3 0908 	sub.w	r9, r3, #8
 80033f8:	2300      	movs	r3, #0
 80033fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003402:	f04f 0800 	mov.w	r8, #0
 8003406:	3410      	adds	r4, #16
 8003408:	9b04      	ldr	r3, [sp, #16]
 800340a:	4598      	cmp	r8, r3
 800340c:	dc10      	bgt.n	8003430 <__kernel_rem_pio2+0x35c>
 800340e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003412:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003416:	f7fd f86b 	bl	80004f0 <__aeabi_dmul>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003422:	f7fc feb3 	bl	800018c <__adddf3>
 8003426:	f108 0801 	add.w	r8, r8, #1
 800342a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800342e:	e7eb      	b.n	8003408 <__kernel_rem_pio2+0x334>
 8003430:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8003434:	3701      	adds	r7, #1
 8003436:	f846 3f08 	str.w	r3, [r6, #8]!
 800343a:	6074      	str	r4, [r6, #4]
 800343c:	465c      	mov	r4, fp
 800343e:	e7ce      	b.n	80033de <__kernel_rem_pio2+0x30a>
 8003440:	46ab      	mov	fp, r5
 8003442:	e6b2      	b.n	80031aa <__kernel_rem_pio2+0xd6>
 8003444:	468b      	mov	fp, r1
 8003446:	f1aa 0a18 	sub.w	sl, sl, #24
 800344a:	ab0c      	add	r3, sp, #48	; 0x30
 800344c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003450:	bbcb      	cbnz	r3, 80034c6 <__kernel_rem_pio2+0x3f2>
 8003452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003456:	f1aa 0a18 	sub.w	sl, sl, #24
 800345a:	e7f6      	b.n	800344a <__kernel_rem_pio2+0x376>
 800345c:	f1ca 0200 	rsb	r2, sl, #0
 8003460:	4630      	mov	r0, r6
 8003462:	4639      	mov	r1, r7
 8003464:	f000 fabc 	bl	80039e0 <scalbn>
 8003468:	2200      	movs	r2, #0
 800346a:	4bb0      	ldr	r3, [pc, #704]	; (800372c <__kernel_rem_pio2+0x658>)
 800346c:	4604      	mov	r4, r0
 800346e:	460d      	mov	r5, r1
 8003470:	f7fd fac4 	bl	80009fc <__aeabi_dcmpge>
 8003474:	b300      	cbz	r0, 80034b8 <__kernel_rem_pio2+0x3e4>
 8003476:	2200      	movs	r2, #0
 8003478:	4bad      	ldr	r3, [pc, #692]	; (8003730 <__kernel_rem_pio2+0x65c>)
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fd f837 	bl	80004f0 <__aeabi_dmul>
 8003482:	f7fd facf 	bl	8000a24 <__aeabi_d2iz>
 8003486:	4606      	mov	r6, r0
 8003488:	f7fc ffcc 	bl	8000424 <__aeabi_i2d>
 800348c:	2200      	movs	r2, #0
 800348e:	4ba7      	ldr	r3, [pc, #668]	; (800372c <__kernel_rem_pio2+0x658>)
 8003490:	f7fd f82e 	bl	80004f0 <__aeabi_dmul>
 8003494:	460b      	mov	r3, r1
 8003496:	4602      	mov	r2, r0
 8003498:	4629      	mov	r1, r5
 800349a:	4620      	mov	r0, r4
 800349c:	f7fc fe74 	bl	8000188 <__aeabi_dsub>
 80034a0:	f7fd fac0 	bl	8000a24 <__aeabi_d2iz>
 80034a4:	ab0c      	add	r3, sp, #48	; 0x30
 80034a6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80034aa:	f10b 0b01 	add.w	fp, fp, #1
 80034ae:	f10a 0a18 	add.w	sl, sl, #24
 80034b2:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80034b6:	e006      	b.n	80034c6 <__kernel_rem_pio2+0x3f2>
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fd fab2 	bl	8000a24 <__aeabi_d2iz>
 80034c0:	ab0c      	add	r3, sp, #48	; 0x30
 80034c2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80034c6:	4652      	mov	r2, sl
 80034c8:	2000      	movs	r0, #0
 80034ca:	499a      	ldr	r1, [pc, #616]	; (8003734 <__kernel_rem_pio2+0x660>)
 80034cc:	f000 fa88 	bl	80039e0 <scalbn>
 80034d0:	465d      	mov	r5, fp
 80034d2:	4606      	mov	r6, r0
 80034d4:	460f      	mov	r7, r1
 80034d6:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80034da:	ab98      	add	r3, sp, #608	; 0x260
 80034dc:	eb03 0804 	add.w	r8, r3, r4
 80034e0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	db14      	blt.n	8003512 <__kernel_rem_pio2+0x43e>
 80034e8:	ab0c      	add	r3, sp, #48	; 0x30
 80034ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80034ee:	f7fc ff99 	bl	8000424 <__aeabi_i2d>
 80034f2:	4632      	mov	r2, r6
 80034f4:	463b      	mov	r3, r7
 80034f6:	f7fc fffb 	bl	80004f0 <__aeabi_dmul>
 80034fa:	2200      	movs	r2, #0
 80034fc:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003500:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <__kernel_rem_pio2+0x65c>)
 8003502:	4630      	mov	r0, r6
 8003504:	4639      	mov	r1, r7
 8003506:	f7fc fff3 	bl	80004f0 <__aeabi_dmul>
 800350a:	3d01      	subs	r5, #1
 800350c:	4606      	mov	r6, r0
 800350e:	460f      	mov	r7, r1
 8003510:	e7e8      	b.n	80034e4 <__kernel_rem_pio2+0x410>
 8003512:	f10b 5800 	add.w	r8, fp, #536870912	; 0x20000000
 8003516:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800351a:	2500      	movs	r5, #0
 800351c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003520:	ebc5 030b 	rsb	r3, r5, fp
 8003524:	2b00      	cmp	r3, #0
 8003526:	db2b      	blt.n	8003580 <__kernel_rem_pio2+0x4ac>
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <__kernel_rem_pio2+0x664>)
 800352a:	ebc5 0708 	rsb	r7, r5, r8
 800352e:	9308      	str	r3, [sp, #32]
 8003530:	ab70      	add	r3, sp, #448	; 0x1c0
 8003532:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003536:	9307      	str	r3, [sp, #28]
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003540:	2600      	movs	r6, #0
 8003542:	9b00      	ldr	r3, [sp, #0]
 8003544:	429e      	cmp	r6, r3
 8003546:	dc15      	bgt.n	8003574 <__kernel_rem_pio2+0x4a0>
 8003548:	42ae      	cmp	r6, r5
 800354a:	dc13      	bgt.n	8003574 <__kernel_rem_pio2+0x4a0>
 800354c:	9907      	ldr	r1, [sp, #28]
 800354e:	9f08      	ldr	r7, [sp, #32]
 8003550:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003554:	9107      	str	r1, [sp, #28]
 8003556:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 800355a:	9708      	str	r7, [sp, #32]
 800355c:	f7fc ffc8 	bl	80004f0 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003568:	f7fc fe10 	bl	800018c <__adddf3>
 800356c:	3601      	adds	r6, #1
 800356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003572:	e7e6      	b.n	8003542 <__kernel_rem_pio2+0x46e>
 8003574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003578:	3501      	adds	r5, #1
 800357a:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 800357e:	e7cf      	b.n	8003520 <__kernel_rem_pio2+0x44c>
 8003580:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003582:	2b03      	cmp	r3, #3
 8003584:	f200 80eb 	bhi.w	800375e <__kernel_rem_pio2+0x68a>
 8003588:	e8df f003 	tbb	[pc, r3]
 800358c:	0208080f 	.word	0x0208080f
 8003590:	ab48      	add	r3, sp, #288	; 0x120
 8003592:	441c      	add	r4, r3
 8003594:	4625      	mov	r5, r4
 8003596:	46a2      	mov	sl, r4
 8003598:	46d8      	mov	r8, fp
 800359a:	e059      	b.n	8003650 <__kernel_rem_pio2+0x57c>
 800359c:	3408      	adds	r4, #8
 800359e:	ab48      	add	r3, sp, #288	; 0x120
 80035a0:	2700      	movs	r7, #0
 80035a2:	441c      	add	r4, r3
 80035a4:	465d      	mov	r5, fp
 80035a6:	463e      	mov	r6, r7
 80035a8:	e01e      	b.n	80035e8 <__kernel_rem_pio2+0x514>
 80035aa:	2600      	movs	r6, #0
 80035ac:	4635      	mov	r5, r6
 80035ae:	ab98      	add	r3, sp, #608	; 0x260
 80035b0:	441c      	add	r4, r3
 80035b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80035b6:	f1bb 0f00 	cmp.w	fp, #0
 80035ba:	db0a      	blt.n	80035d2 <__kernel_rem_pio2+0x4fe>
 80035bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80035c0:	4630      	mov	r0, r6
 80035c2:	4629      	mov	r1, r5
 80035c4:	f7fc fde2 	bl	800018c <__adddf3>
 80035c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035cc:	4606      	mov	r6, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	e7f1      	b.n	80035b6 <__kernel_rem_pio2+0x4e2>
 80035d2:	f1b9 0f00 	cmp.w	r9, #0
 80035d6:	d001      	beq.n	80035dc <__kernel_rem_pio2+0x508>
 80035d8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80035dc:	4632      	mov	r2, r6
 80035de:	462b      	mov	r3, r5
 80035e0:	9906      	ldr	r1, [sp, #24]
 80035e2:	e9c1 2300 	strd	r2, r3, [r1]
 80035e6:	e0ba      	b.n	800375e <__kernel_rem_pio2+0x68a>
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	db09      	blt.n	8003600 <__kernel_rem_pio2+0x52c>
 80035ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80035f0:	4638      	mov	r0, r7
 80035f2:	4631      	mov	r1, r6
 80035f4:	f7fc fdca 	bl	800018c <__adddf3>
 80035f8:	3d01      	subs	r5, #1
 80035fa:	4607      	mov	r7, r0
 80035fc:	460e      	mov	r6, r1
 80035fe:	e7f3      	b.n	80035e8 <__kernel_rem_pio2+0x514>
 8003600:	f1b9 0f00 	cmp.w	r9, #0
 8003604:	d002      	beq.n	800360c <__kernel_rem_pio2+0x538>
 8003606:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 800360a:	e000      	b.n	800360e <__kernel_rem_pio2+0x53a>
 800360c:	4631      	mov	r1, r6
 800360e:	460b      	mov	r3, r1
 8003610:	463a      	mov	r2, r7
 8003612:	9906      	ldr	r1, [sp, #24]
 8003614:	ad4a      	add	r5, sp, #296	; 0x128
 8003616:	e9c1 2300 	strd	r2, r3, [r1]
 800361a:	a948      	add	r1, sp, #288	; 0x120
 800361c:	463a      	mov	r2, r7
 800361e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003622:	4633      	mov	r3, r6
 8003624:	f7fc fdb0 	bl	8000188 <__aeabi_dsub>
 8003628:	2401      	movs	r4, #1
 800362a:	45a3      	cmp	fp, r4
 800362c:	db05      	blt.n	800363a <__kernel_rem_pio2+0x566>
 800362e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003632:	f7fc fdab 	bl	800018c <__adddf3>
 8003636:	3401      	adds	r4, #1
 8003638:	e7f7      	b.n	800362a <__kernel_rem_pio2+0x556>
 800363a:	f1b9 0f00 	cmp.w	r9, #0
 800363e:	d001      	beq.n	8003644 <__kernel_rem_pio2+0x570>
 8003640:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003644:	460b      	mov	r3, r1
 8003646:	4602      	mov	r2, r0
 8003648:	9906      	ldr	r1, [sp, #24]
 800364a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800364e:	e086      	b.n	800375e <__kernel_rem_pio2+0x68a>
 8003650:	f1b8 0f00 	cmp.w	r8, #0
 8003654:	f1aa 0a08 	sub.w	sl, sl, #8
 8003658:	dd1e      	ble.n	8003698 <__kernel_rem_pio2+0x5c4>
 800365a:	e9da 2300 	ldrd	r2, r3, [sl]
 800365e:	e9cd 2300 	strd	r2, r3, [sp]
 8003662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003666:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800366a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800366e:	f7fc fd8d 	bl	800018c <__adddf3>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4606      	mov	r6, r0
 8003678:	460f      	mov	r7, r1
 800367a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800367e:	f7fc fd83 	bl	8000188 <__aeabi_dsub>
 8003682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003686:	f7fc fd81 	bl	800018c <__adddf3>
 800368a:	f108 38ff 	add.w	r8, r8, #4294967295
 800368e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003692:	e9ca 6700 	strd	r6, r7, [sl]
 8003696:	e7db      	b.n	8003650 <__kernel_rem_pio2+0x57c>
 8003698:	46da      	mov	sl, fp
 800369a:	f1ba 0f01 	cmp.w	sl, #1
 800369e:	f1a5 0508 	sub.w	r5, r5, #8
 80036a2:	dd1e      	ble.n	80036e2 <__kernel_rem_pio2+0x60e>
 80036a4:	e9d5 6700 	ldrd	r6, r7, [r5]
 80036a8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80036ac:	4630      	mov	r0, r6
 80036ae:	4639      	mov	r1, r7
 80036b0:	e9cd 2300 	strd	r2, r3, [sp]
 80036b4:	f7fc fd6a 	bl	800018c <__adddf3>
 80036b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4630      	mov	r0, r6
 80036c2:	4639      	mov	r1, r7
 80036c4:	f7fc fd60 	bl	8000188 <__aeabi_dsub>
 80036c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036cc:	f7fc fd5e 	bl	800018c <__adddf3>
 80036d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036d8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80036dc:	e9c5 2300 	strd	r2, r3, [r5]
 80036e0:	e7db      	b.n	800369a <__kernel_rem_pio2+0x5c6>
 80036e2:	2600      	movs	r6, #0
 80036e4:	4635      	mov	r5, r6
 80036e6:	3408      	adds	r4, #8
 80036e8:	f1bb 0f01 	cmp.w	fp, #1
 80036ec:	dd0a      	ble.n	8003704 <__kernel_rem_pio2+0x630>
 80036ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80036f2:	4630      	mov	r0, r6
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc fd49 	bl	800018c <__adddf3>
 80036fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036fe:	4606      	mov	r6, r0
 8003700:	460d      	mov	r5, r1
 8003702:	e7f1      	b.n	80036e8 <__kernel_rem_pio2+0x614>
 8003704:	f1b9 0f00 	cmp.w	r9, #0
 8003708:	d118      	bne.n	800373c <__kernel_rem_pio2+0x668>
 800370a:	9a06      	ldr	r2, [sp, #24]
 800370c:	ab98      	add	r3, sp, #608	; 0x260
 800370e:	e973 0150 	ldrd	r0, r1, [r3, #-320]!	; 0x140
 8003712:	e9c2 0100 	strd	r0, r1, [r2]
 8003716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800371a:	9906      	ldr	r1, [sp, #24]
 800371c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003720:	4632      	mov	r2, r6
 8003722:	462b      	mov	r3, r5
 8003724:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003728:	e019      	b.n	800375e <__kernel_rem_pio2+0x68a>
 800372a:	bf00      	nop
 800372c:	41700000 	.word	0x41700000
 8003730:	3e700000 	.word	0x3e700000
 8003734:	3ff00000 	.word	0x3ff00000
 8003738:	08003f48 	.word	0x08003f48
 800373c:	9a06      	ldr	r2, [sp, #24]
 800373e:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8003740:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003748:	6116      	str	r6, [r2, #16]
 800374a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800374e:	6053      	str	r3, [r2, #4]
 8003750:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8003752:	6155      	str	r5, [r2, #20]
 8003754:	6093      	str	r3, [r2, #8]
 8003756:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003758:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800375c:	60d3      	str	r3, [r2, #12]
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	f003 0007 	and.w	r0, r3, #7
 8003764:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	0000      	movs	r0, r0
	...

08003770 <__kernel_sin>:
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	b085      	sub	sp, #20
 8003776:	e9cd 2300 	strd	r2, r3, [sp]
 800377a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800377e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003782:	4683      	mov	fp, r0
 8003784:	468a      	mov	sl, r1
 8003786:	da04      	bge.n	8003792 <__kernel_sin+0x22>
 8003788:	f7fd f94c 	bl	8000a24 <__aeabi_d2iz>
 800378c:	2800      	cmp	r0, #0
 800378e:	f000 8081 	beq.w	8003894 <__kernel_sin+0x124>
 8003792:	465a      	mov	r2, fp
 8003794:	4653      	mov	r3, sl
 8003796:	4658      	mov	r0, fp
 8003798:	4651      	mov	r1, sl
 800379a:	f7fc fea9 	bl	80004f0 <__aeabi_dmul>
 800379e:	4604      	mov	r4, r0
 80037a0:	460d      	mov	r5, r1
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4658      	mov	r0, fp
 80037a8:	4651      	mov	r1, sl
 80037aa:	f7fc fea1 	bl	80004f0 <__aeabi_dmul>
 80037ae:	a33c      	add	r3, pc, #240	; (adr r3, 80038a0 <__kernel_sin+0x130>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	4680      	mov	r8, r0
 80037b6:	4689      	mov	r9, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fe98 	bl	80004f0 <__aeabi_dmul>
 80037c0:	a339      	add	r3, pc, #228	; (adr r3, 80038a8 <__kernel_sin+0x138>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc fcdf 	bl	8000188 <__aeabi_dsub>
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f7fc fe8f 	bl	80004f0 <__aeabi_dmul>
 80037d2:	a337      	add	r3, pc, #220	; (adr r3, 80038b0 <__kernel_sin+0x140>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc fcd8 	bl	800018c <__adddf3>
 80037dc:	4622      	mov	r2, r4
 80037de:	462b      	mov	r3, r5
 80037e0:	f7fc fe86 	bl	80004f0 <__aeabi_dmul>
 80037e4:	a334      	add	r3, pc, #208	; (adr r3, 80038b8 <__kernel_sin+0x148>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc fccd 	bl	8000188 <__aeabi_dsub>
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	f7fc fe7d 	bl	80004f0 <__aeabi_dmul>
 80037f6:	a332      	add	r3, pc, #200	; (adr r3, 80038c0 <__kernel_sin+0x150>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc fcc6 	bl	800018c <__adddf3>
 8003800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003802:	4606      	mov	r6, r0
 8003804:	460f      	mov	r7, r1
 8003806:	b99b      	cbnz	r3, 8003830 <__kernel_sin+0xc0>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fe6e 	bl	80004f0 <__aeabi_dmul>
 8003814:	a32c      	add	r3, pc, #176	; (adr r3, 80038c8 <__kernel_sin+0x158>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f7fc fcb5 	bl	8000188 <__aeabi_dsub>
 800381e:	4642      	mov	r2, r8
 8003820:	464b      	mov	r3, r9
 8003822:	f7fc fe65 	bl	80004f0 <__aeabi_dmul>
 8003826:	465a      	mov	r2, fp
 8003828:	4653      	mov	r3, sl
 800382a:	f7fc fcaf 	bl	800018c <__adddf3>
 800382e:	e033      	b.n	8003898 <__kernel_sin+0x128>
 8003830:	2200      	movs	r2, #0
 8003832:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <__kernel_sin+0x160>)
 8003834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003838:	f7fc fe5a 	bl	80004f0 <__aeabi_dmul>
 800383c:	4632      	mov	r2, r6
 800383e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003842:	463b      	mov	r3, r7
 8003844:	4640      	mov	r0, r8
 8003846:	4649      	mov	r1, r9
 8003848:	f7fc fe52 	bl	80004f0 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003854:	f7fc fc98 	bl	8000188 <__aeabi_dsub>
 8003858:	4622      	mov	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	f7fc fe48 	bl	80004f0 <__aeabi_dmul>
 8003860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003864:	f7fc fc90 	bl	8000188 <__aeabi_dsub>
 8003868:	a317      	add	r3, pc, #92	; (adr r3, 80038c8 <__kernel_sin+0x158>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	4604      	mov	r4, r0
 8003870:	460d      	mov	r5, r1
 8003872:	4640      	mov	r0, r8
 8003874:	4649      	mov	r1, r9
 8003876:	f7fc fe3b 	bl	80004f0 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fc fc83 	bl	800018c <__adddf3>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4658      	mov	r0, fp
 800388c:	4651      	mov	r1, sl
 800388e:	f7fc fc7b 	bl	8000188 <__aeabi_dsub>
 8003892:	e001      	b.n	8003898 <__kernel_sin+0x128>
 8003894:	4658      	mov	r0, fp
 8003896:	4651      	mov	r1, sl
 8003898:	b005      	add	sp, #20
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	5acfd57c 	.word	0x5acfd57c
 80038a4:	3de5d93a 	.word	0x3de5d93a
 80038a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80038ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80038b0:	57b1fe7d 	.word	0x57b1fe7d
 80038b4:	3ec71de3 	.word	0x3ec71de3
 80038b8:	19c161d5 	.word	0x19c161d5
 80038bc:	3f2a01a0 	.word	0x3f2a01a0
 80038c0:	1110f8a6 	.word	0x1110f8a6
 80038c4:	3f811111 	.word	0x3f811111
 80038c8:	55555549 	.word	0x55555549
 80038cc:	3fc55555 	.word	0x3fc55555
 80038d0:	3fe00000 	.word	0x3fe00000

080038d4 <fabs>:
 80038d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80038d8:	4770      	bx	lr
 80038da:	0000      	movs	r0, r0
 80038dc:	0000      	movs	r0, r0
	...

080038e0 <floor>:
 80038e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80038e8:	f2a8 37ff 	subw	r7, r8, #1023	; 0x3ff
 80038ec:	2f13      	cmp	r7, #19
 80038ee:	4606      	mov	r6, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	460c      	mov	r4, r1
 80038f4:	4605      	mov	r5, r0
 80038f6:	dc33      	bgt.n	8003960 <floor+0x80>
 80038f8:	2f00      	cmp	r7, #0
 80038fa:	da15      	bge.n	8003928 <floor+0x48>
 80038fc:	a334      	add	r3, pc, #208	; (adr r3, 80039d0 <floor+0xf0>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc fc43 	bl	800018c <__adddf3>
 8003906:	2200      	movs	r2, #0
 8003908:	2300      	movs	r3, #0
 800390a:	f7fd f881 	bl	8000a10 <__aeabi_dcmpgt>
 800390e:	2800      	cmp	r0, #0
 8003910:	d057      	beq.n	80039c2 <floor+0xe2>
 8003912:	2c00      	cmp	r4, #0
 8003914:	da53      	bge.n	80039be <floor+0xde>
 8003916:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800391a:	4333      	orrs	r3, r6
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <floor+0xf8>)
 800391e:	f04f 0500 	mov.w	r5, #0
 8003922:	bf18      	it	ne
 8003924:	461c      	movne	r4, r3
 8003926:	e04c      	b.n	80039c2 <floor+0xe2>
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <floor+0xfc>)
 800392a:	fa42 f807 	asr.w	r8, r2, r7
 800392e:	ea01 0208 	and.w	r2, r1, r8
 8003932:	4302      	orrs	r2, r0
 8003934:	d048      	beq.n	80039c8 <floor+0xe8>
 8003936:	a326      	add	r3, pc, #152	; (adr r3, 80039d0 <floor+0xf0>)
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f7fc fc26 	bl	800018c <__adddf3>
 8003940:	2200      	movs	r2, #0
 8003942:	2300      	movs	r3, #0
 8003944:	f7fd f864 	bl	8000a10 <__aeabi_dcmpgt>
 8003948:	b3d8      	cbz	r0, 80039c2 <floor+0xe2>
 800394a:	2c00      	cmp	r4, #0
 800394c:	bfbe      	ittt	lt
 800394e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003952:	fa43 f707 	asrlt.w	r7, r3, r7
 8003956:	19e4      	addlt	r4, r4, r7
 8003958:	ea24 0408 	bic.w	r4, r4, r8
 800395c:	2500      	movs	r5, #0
 800395e:	e030      	b.n	80039c2 <floor+0xe2>
 8003960:	2f33      	cmp	r7, #51	; 0x33
 8003962:	dd07      	ble.n	8003974 <floor+0x94>
 8003964:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003968:	d12e      	bne.n	80039c8 <floor+0xe8>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	f7fc fc0d 	bl	800018c <__adddf3>
 8003972:	e02b      	b.n	80039cc <floor+0xec>
 8003974:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	fa22 f808 	lsr.w	r8, r2, r8
 8003980:	ea10 0f08 	tst.w	r0, r8
 8003984:	d020      	beq.n	80039c8 <floor+0xe8>
 8003986:	a312      	add	r3, pc, #72	; (adr r3, 80039d0 <floor+0xf0>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fc fbfe 	bl	800018c <__adddf3>
 8003990:	2200      	movs	r2, #0
 8003992:	2300      	movs	r3, #0
 8003994:	f7fd f83c 	bl	8000a10 <__aeabi_dcmpgt>
 8003998:	b198      	cbz	r0, 80039c2 <floor+0xe2>
 800399a:	2c00      	cmp	r4, #0
 800399c:	da0c      	bge.n	80039b8 <floor+0xd8>
 800399e:	2f14      	cmp	r7, #20
 80039a0:	d101      	bne.n	80039a6 <floor+0xc6>
 80039a2:	3401      	adds	r4, #1
 80039a4:	e008      	b.n	80039b8 <floor+0xd8>
 80039a6:	2301      	movs	r3, #1
 80039a8:	f1c7 0734 	rsb	r7, r7, #52	; 0x34
 80039ac:	fa03 f707 	lsl.w	r7, r3, r7
 80039b0:	443d      	add	r5, r7
 80039b2:	42ae      	cmp	r6, r5
 80039b4:	bf88      	it	hi
 80039b6:	18e4      	addhi	r4, r4, r3
 80039b8:	ea25 0508 	bic.w	r5, r5, r8
 80039bc:	e001      	b.n	80039c2 <floor+0xe2>
 80039be:	2500      	movs	r5, #0
 80039c0:	462c      	mov	r4, r5
 80039c2:	4623      	mov	r3, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	e000      	b.n	80039ca <floor+0xea>
 80039c8:	4630      	mov	r0, r6
 80039ca:	4619      	mov	r1, r3
 80039cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039d0:	8800759c 	.word	0x8800759c
 80039d4:	7e37e43c 	.word	0x7e37e43c
 80039d8:	bff00000 	.word	0xbff00000
 80039dc:	000fffff 	.word	0x000fffff

080039e0 <scalbn>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	4616      	mov	r6, r2
 80039e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80039e8:	4604      	mov	r4, r0
 80039ea:	460d      	mov	r5, r1
 80039ec:	460b      	mov	r3, r1
 80039ee:	b98a      	cbnz	r2, 8003a14 <scalbn+0x34>
 80039f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80039f4:	4303      	orrs	r3, r0
 80039f6:	d050      	beq.n	8003a9a <scalbn+0xba>
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <scalbn+0xd0>)
 80039fc:	f7fc fd78 	bl	80004f0 <__aeabi_dmul>
 8003a00:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <scalbn+0xd4>)
 8003a02:	4604      	mov	r4, r0
 8003a04:	4296      	cmp	r6, r2
 8003a06:	460d      	mov	r5, r1
 8003a08:	460b      	mov	r3, r1
 8003a0a:	db34      	blt.n	8003a76 <scalbn+0x96>
 8003a0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a10:	3a36      	subs	r2, #54	; 0x36
 8003a12:	e008      	b.n	8003a26 <scalbn+0x46>
 8003a14:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003a18:	42ba      	cmp	r2, r7
 8003a1a:	d104      	bne.n	8003a26 <scalbn+0x46>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	f7fc fbb4 	bl	800018c <__adddf3>
 8003a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a26:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003a2a:	4432      	add	r2, r6
 8003a2c:	428a      	cmp	r2, r1
 8003a2e:	dd02      	ble.n	8003a36 <scalbn+0x56>
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	e011      	b.n	8003a5a <scalbn+0x7a>
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	dd06      	ble.n	8003a48 <scalbn+0x68>
 8003a3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a46:	e028      	b.n	8003a9a <scalbn+0xba>
 8003a48:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003a4c:	da17      	bge.n	8003a7e <scalbn+0x9e>
 8003a4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003a52:	429e      	cmp	r6, r3
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	dd08      	ble.n	8003a6c <scalbn+0x8c>
 8003a5a:	a111      	add	r1, pc, #68	; (adr r1, 8003aa0 <scalbn+0xc0>)
 8003a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a60:	f000 f82c 	bl	8003abc <copysign>
 8003a64:	a30e      	add	r3, pc, #56	; (adr r3, 8003aa0 <scalbn+0xc0>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	e013      	b.n	8003a94 <scalbn+0xb4>
 8003a6c:	a10e      	add	r1, pc, #56	; (adr r1, 8003aa8 <scalbn+0xc8>)
 8003a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a72:	f000 f823 	bl	8003abc <copysign>
 8003a76:	a30c      	add	r3, pc, #48	; (adr r3, 8003aa8 <scalbn+0xc8>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e00a      	b.n	8003a94 <scalbn+0xb4>
 8003a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a82:	3236      	adds	r2, #54	; 0x36
 8003a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <scalbn+0xd8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	f7fc fd2c 	bl	80004f0 <__aeabi_dmul>
 8003a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa0:	8800759c 	.word	0x8800759c
 8003aa4:	7e37e43c 	.word	0x7e37e43c
 8003aa8:	c2f8f359 	.word	0xc2f8f359
 8003aac:	01a56e1f 	.word	0x01a56e1f
 8003ab0:	43500000 	.word	0x43500000
 8003ab4:	ffff3cb0 	.word	0xffff3cb0
 8003ab8:	3c900000 	.word	0x3c900000

08003abc <copysign>:
 8003abc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	4770      	bx	lr

08003aca <abort>:
 8003aca:	b508      	push	{r3, lr}
 8003acc:	2006      	movs	r0, #6
 8003ace:	f000 f91d 	bl	8003d0c <raise>
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 f956 	bl	8003d84 <_exit>

08003ad8 <__libc_init_array>:
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <__libc_init_array+0x3c>)
 8003ada:	b570      	push	{r4, r5, r6, lr}
 8003adc:	461e      	mov	r6, r3
 8003ade:	4c0e      	ldr	r4, [pc, #56]	; (8003b18 <__libc_init_array+0x40>)
 8003ae0:	2500      	movs	r5, #0
 8003ae2:	1ae4      	subs	r4, r4, r3
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a5      	cmp	r5, r4
 8003ae8:	d004      	beq.n	8003af4 <__libc_init_array+0x1c>
 8003aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aee:	4798      	blx	r3
 8003af0:	3501      	adds	r5, #1
 8003af2:	e7f8      	b.n	8003ae6 <__libc_init_array+0xe>
 8003af4:	f000 f948 	bl	8003d88 <_init>
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <__libc_init_array+0x44>)
 8003afa:	4c09      	ldr	r4, [pc, #36]	; (8003b20 <__libc_init_array+0x48>)
 8003afc:	461e      	mov	r6, r3
 8003afe:	1ae4      	subs	r4, r4, r3
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2500      	movs	r5, #0
 8003b04:	42a5      	cmp	r5, r4
 8003b06:	d004      	beq.n	8003b12 <__libc_init_array+0x3a>
 8003b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b0c:	4798      	blx	r3
 8003b0e:	3501      	adds	r5, #1
 8003b10:	e7f8      	b.n	8003b04 <__libc_init_array+0x2c>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	08003f94 	.word	0x08003f94
 8003b18:	08003f94 	.word	0x08003f94
 8003b1c:	08003f94 	.word	0x08003f94
 8003b20:	08003f9c 	.word	0x08003f9c

08003b24 <malloc>:
 8003b24:	4b02      	ldr	r3, [pc, #8]	; (8003b30 <malloc+0xc>)
 8003b26:	4601      	mov	r1, r0
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	f000 b857 	b.w	8003bdc <_malloc_r>
 8003b2e:	bf00      	nop
 8003b30:	2000007c 	.word	0x2000007c

08003b34 <free>:
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <free+0xc>)
 8003b36:	4601      	mov	r1, r0
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f000 b803 	b.w	8003b44 <_free_r>
 8003b3e:	bf00      	nop
 8003b40:	2000007c 	.word	0x2000007c

08003b44 <_free_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4605      	mov	r5, r0
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d044      	beq.n	8003bd6 <_free_r+0x92>
 8003b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b50:	1f0c      	subs	r4, r1, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfb8      	it	lt
 8003b56:	18e4      	addlt	r4, r4, r3
 8003b58:	f000 f8f4 	bl	8003d44 <__malloc_lock>
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <_free_r+0x94>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	4611      	mov	r1, r2
 8003b62:	b913      	cbnz	r3, 8003b6a <_free_r+0x26>
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	6014      	str	r4, [r2, #0]
 8003b68:	e030      	b.n	8003bcc <_free_r+0x88>
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	d90d      	bls.n	8003b8a <_free_r+0x46>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	18a0      	adds	r0, r4, r2
 8003b72:	4283      	cmp	r3, r0
 8003b74:	bf01      	itttt	eq
 8003b76:	6818      	ldreq	r0, [r3, #0]
 8003b78:	685b      	ldreq	r3, [r3, #4]
 8003b7a:	1812      	addeq	r2, r2, r0
 8003b7c:	6022      	streq	r2, [r4, #0]
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	600c      	str	r4, [r1, #0]
 8003b82:	e023      	b.n	8003bcc <_free_r+0x88>
 8003b84:	42a2      	cmp	r2, r4
 8003b86:	d803      	bhi.n	8003b90 <_free_r+0x4c>
 8003b88:	4613      	mov	r3, r2
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d1f9      	bne.n	8003b84 <_free_r+0x40>
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	1819      	adds	r1, r3, r0
 8003b94:	42a1      	cmp	r1, r4
 8003b96:	d10b      	bne.n	8003bb0 <_free_r+0x6c>
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	4401      	add	r1, r0
 8003b9c:	1858      	adds	r0, r3, r1
 8003b9e:	4282      	cmp	r2, r0
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	d113      	bne.n	8003bcc <_free_r+0x88>
 8003ba4:	6810      	ldr	r0, [r2, #0]
 8003ba6:	6852      	ldr	r2, [r2, #4]
 8003ba8:	4401      	add	r1, r0
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e00d      	b.n	8003bcc <_free_r+0x88>
 8003bb0:	d902      	bls.n	8003bb8 <_free_r+0x74>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	e009      	b.n	8003bcc <_free_r+0x88>
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	1860      	adds	r0, r4, r1
 8003bbc:	4282      	cmp	r2, r0
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6810      	ldreq	r0, [r2, #0]
 8003bc2:	6852      	ldreq	r2, [r2, #4]
 8003bc4:	1809      	addeq	r1, r1, r0
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	6062      	str	r2, [r4, #4]
 8003bca:	605c      	str	r4, [r3, #4]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd2:	f000 b8b8 	b.w	8003d46 <__malloc_unlock>
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	20000118 	.word	0x20000118

08003bdc <_malloc_r>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	1ccd      	adds	r5, r1, #3
 8003be0:	f025 0503 	bic.w	r5, r5, #3
 8003be4:	3508      	adds	r5, #8
 8003be6:	2d0c      	cmp	r5, #12
 8003be8:	bf38      	it	cc
 8003bea:	250c      	movcc	r5, #12
 8003bec:	2d00      	cmp	r5, #0
 8003bee:	4606      	mov	r6, r0
 8003bf0:	db01      	blt.n	8003bf6 <_malloc_r+0x1a>
 8003bf2:	42a9      	cmp	r1, r5
 8003bf4:	d902      	bls.n	8003bfc <_malloc_r+0x20>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	e046      	b.n	8003c8a <_malloc_r+0xae>
 8003bfc:	f000 f8a2 	bl	8003d44 <__malloc_lock>
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <_malloc_r+0xb4>)
 8003c02:	681c      	ldr	r4, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4621      	mov	r1, r4
 8003c08:	b1a1      	cbz	r1, 8003c34 <_malloc_r+0x58>
 8003c0a:	680b      	ldr	r3, [r1, #0]
 8003c0c:	1b5b      	subs	r3, r3, r5
 8003c0e:	d40e      	bmi.n	8003c2e <_malloc_r+0x52>
 8003c10:	2b0b      	cmp	r3, #11
 8003c12:	d903      	bls.n	8003c1c <_malloc_r+0x40>
 8003c14:	600b      	str	r3, [r1, #0]
 8003c16:	18cc      	adds	r4, r1, r3
 8003c18:	50cd      	str	r5, [r1, r3]
 8003c1a:	e01e      	b.n	8003c5a <_malloc_r+0x7e>
 8003c1c:	428c      	cmp	r4, r1
 8003c1e:	bf0b      	itete	eq
 8003c20:	6863      	ldreq	r3, [r4, #4]
 8003c22:	684b      	ldrne	r3, [r1, #4]
 8003c24:	6013      	streq	r3, [r2, #0]
 8003c26:	6063      	strne	r3, [r4, #4]
 8003c28:	bf18      	it	ne
 8003c2a:	460c      	movne	r4, r1
 8003c2c:	e015      	b.n	8003c5a <_malloc_r+0x7e>
 8003c2e:	460c      	mov	r4, r1
 8003c30:	6849      	ldr	r1, [r1, #4]
 8003c32:	e7e9      	b.n	8003c08 <_malloc_r+0x2c>
 8003c34:	4c17      	ldr	r4, [pc, #92]	; (8003c94 <_malloc_r+0xb8>)
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	b91b      	cbnz	r3, 8003c42 <_malloc_r+0x66>
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 f82c 	bl	8003c98 <_sbrk_r>
 8003c40:	6020      	str	r0, [r4, #0]
 8003c42:	4629      	mov	r1, r5
 8003c44:	4630      	mov	r0, r6
 8003c46:	f000 f827 	bl	8003c98 <_sbrk_r>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d018      	beq.n	8003c80 <_malloc_r+0xa4>
 8003c4e:	1cc4      	adds	r4, r0, #3
 8003c50:	f024 0403 	bic.w	r4, r4, #3
 8003c54:	42a0      	cmp	r0, r4
 8003c56:	d10d      	bne.n	8003c74 <_malloc_r+0x98>
 8003c58:	6025      	str	r5, [r4, #0]
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f000 f873 	bl	8003d46 <__malloc_unlock>
 8003c60:	f104 000b 	add.w	r0, r4, #11
 8003c64:	1d23      	adds	r3, r4, #4
 8003c66:	f020 0007 	bic.w	r0, r0, #7
 8003c6a:	1ac3      	subs	r3, r0, r3
 8003c6c:	d00e      	beq.n	8003c8c <_malloc_r+0xb0>
 8003c6e:	425a      	negs	r2, r3
 8003c70:	50e2      	str	r2, [r4, r3]
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	1a21      	subs	r1, r4, r0
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f80e 	bl	8003c98 <_sbrk_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d1eb      	bne.n	8003c58 <_malloc_r+0x7c>
 8003c80:	230c      	movs	r3, #12
 8003c82:	6033      	str	r3, [r6, #0]
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 f85e 	bl	8003d46 <__malloc_unlock>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000118 	.word	0x20000118
 8003c94:	20000114 	.word	0x20000114

08003c98 <_sbrk_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4c06      	ldr	r4, [pc, #24]	; (8003cb4 <_sbrk_r+0x1c>)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	f000 f860 	bl	8003d68 <_sbrk>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_sbrk_r+0x1a>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_sbrk_r+0x1a>
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	20000148 	.word	0x20000148

08003cb8 <_raise_r>:
 8003cb8:	291f      	cmp	r1, #31
 8003cba:	b538      	push	{r3, r4, r5, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	d904      	bls.n	8003ccc <_raise_r+0x14>
 8003cc2:	2316      	movs	r3, #22
 8003cc4:	6003      	str	r3, [r0, #0]
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cce:	b112      	cbz	r2, 8003cd6 <_raise_r+0x1e>
 8003cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cd4:	b94b      	cbnz	r3, 8003cea <_raise_r+0x32>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f000 f832 	bl	8003d40 <_getpid_r>
 8003cdc:	462a      	mov	r2, r5
 8003cde:	4601      	mov	r1, r0
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce6:	f000 b819 	b.w	8003d1c <_kill_r>
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d00c      	beq.n	8003d08 <_raise_r+0x50>
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	d103      	bne.n	8003cfa <_raise_r+0x42>
 8003cf2:	2316      	movs	r3, #22
 8003cf4:	6003      	str	r3, [r0, #0]
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
 8003cfa:	2400      	movs	r4, #0
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d02:	4798      	blx	r3
 8003d04:	4620      	mov	r0, r4
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	2000      	movs	r0, #0
 8003d0a:	bd38      	pop	{r3, r4, r5, pc}

08003d0c <raise>:
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <raise+0xc>)
 8003d0e:	4601      	mov	r1, r0
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f7ff bfd1 	b.w	8003cb8 <_raise_r>
 8003d16:	bf00      	nop
 8003d18:	2000007c 	.word	0x2000007c

08003d1c <_kill_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4c07      	ldr	r4, [pc, #28]	; (8003d3c <_kill_r+0x20>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4605      	mov	r5, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	f000 f815 	bl	8003d58 <_kill>
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	d102      	bne.n	8003d38 <_kill_r+0x1c>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	b103      	cbz	r3, 8003d38 <_kill_r+0x1c>
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000148 	.word	0x20000148

08003d40 <_getpid_r>:
 8003d40:	f000 b802 	b.w	8003d48 <_getpid>

08003d44 <__malloc_lock>:
 8003d44:	4770      	bx	lr

08003d46 <__malloc_unlock>:
 8003d46:	4770      	bx	lr

08003d48 <_getpid>:
 8003d48:	4b02      	ldr	r3, [pc, #8]	; (8003d54 <_getpid+0xc>)
 8003d4a:	2258      	movs	r2, #88	; 0x58
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d52:	4770      	bx	lr
 8003d54:	20000148 	.word	0x20000148

08003d58 <_kill>:
 8003d58:	4b02      	ldr	r3, [pc, #8]	; (8003d64 <_kill+0xc>)
 8003d5a:	2258      	movs	r2, #88	; 0x58
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	4770      	bx	lr
 8003d64:	20000148 	.word	0x20000148

08003d68 <_sbrk>:
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <_sbrk+0x14>)
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	b909      	cbnz	r1, 8003d74 <_sbrk+0xc>
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <_sbrk+0x18>)
 8003d72:	6019      	str	r1, [r3, #0]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	4402      	add	r2, r0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	4770      	bx	lr
 8003d7c:	2000011c 	.word	0x2000011c
 8003d80:	2000014c 	.word	0x2000014c

08003d84 <_exit>:
 8003d84:	e7fe      	b.n	8003d84 <_exit>
	...

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
