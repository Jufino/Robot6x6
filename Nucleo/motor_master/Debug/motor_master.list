
C:\Users\Juraj\Documents\GitHub\Robot6x6\Nucleo\motor_master\Debug\motor_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004658  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08004798  08004798  00014798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000080  08004a18  00020080  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  2000015c  08004a18  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000076fc  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001643  00000000  00000000  000277a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a08  00000000  00000000  00028de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  000297f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000034c4  00000000  00000000  0002a110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003019  00000000  00000000  0002d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000305ed  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002fb0  00000000  00000000  0003066c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  0003361c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00033658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08004780 	.word	0x08004780

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08004780 	.word	0x08004780

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	230f      	movs	r3, #15
 8000a86:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d038      	beq.n	8000b02 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <NVIC_Init+0xb8>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	f1c3 0304 	rsb	r3, r3, #4
 8000aa4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000aa6:	7b7a      	ldrb	r2, [r7, #13]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	789a      	ldrb	r2, [r3, #2]
 8000ac2:	7b7b      	ldrb	r3, [r7, #13]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <NVIC_Init+0xbc>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <NVIC_Init+0xbc>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000afc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b00:	e00f      	b.n	8000b22 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b02:	490b      	ldr	r1, [pc, #44]	; (8000b30 <NVIC_Init+0xbc>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	095b      	lsrs	r3, r3, #5
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	2201      	movs	r2, #1
 8000b18:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b1a:	f100 0320 	add.w	r3, r0, #32
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b44:	4013      	ands	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a43      	ldr	r2, [pc, #268]	; (8000c74 <DMA_DeInit+0x140>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000b6a:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <DMA_DeInit+0x144>)
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <DMA_DeInit+0x144>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f043 030f 	orr.w	r3, r3, #15
 8000b74:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b76:	e077      	b.n	8000c68 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <DMA_DeInit+0x148>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d106      	bne.n	8000b8e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000b80:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <DMA_DeInit+0x144>)
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <DMA_DeInit+0x144>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b8a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b8c:	e06c      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <DMA_DeInit+0x14c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000b96:	4a38      	ldr	r2, [pc, #224]	; (8000c78 <DMA_DeInit+0x144>)
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <DMA_DeInit+0x144>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000ba0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ba2:	e061      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a37      	ldr	r2, [pc, #220]	; (8000c84 <DMA_DeInit+0x150>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <DMA_DeInit+0x144>)
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <DMA_DeInit+0x144>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000bb6:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bb8:	e056      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <DMA_DeInit+0x154>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d106      	bne.n	8000bd0 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <DMA_DeInit+0x144>)
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <DMA_DeInit+0x144>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000bcc:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bce:	e04b      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <DMA_DeInit+0x158>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d106      	bne.n	8000be6 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000bd8:	4a27      	ldr	r2, [pc, #156]	; (8000c78 <DMA_DeInit+0x144>)
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <DMA_DeInit+0x144>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be2:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000be4:	e040      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <DMA_DeInit+0x15c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d106      	bne.n	8000bfc <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <DMA_DeInit+0x144>)
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <DMA_DeInit+0x144>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000bf8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bfa:	e035      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <DMA_DeInit+0x160>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <DMA_DeInit+0x164>)
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <DMA_DeInit+0x164>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f043 030f 	orr.w	r3, r3, #15
 8000c0e:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c10:	e02a      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <DMA_DeInit+0x168>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <DMA_DeInit+0x164>)
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <DMA_DeInit+0x164>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c24:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c26:	e01f      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <DMA_DeInit+0x16c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <DMA_DeInit+0x164>)
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <DMA_DeInit+0x164>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c3a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c3c:	e014      	b.n	8000c68 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <DMA_DeInit+0x170>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d106      	bne.n	8000c54 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <DMA_DeInit+0x164>)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <DMA_DeInit+0x164>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c50:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c52:	e009      	b.n	8000c68 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <DMA_DeInit+0x174>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d105      	bne.n	8000c68 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <DMA_DeInit+0x164>)
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <DMA_DeInit+0x164>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c66:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40026008 	.word	0x40026008
 8000c78:	40026000 	.word	0x40026000
 8000c7c:	4002601c 	.word	0x4002601c
 8000c80:	40026030 	.word	0x40026030
 8000c84:	40026044 	.word	0x40026044
 8000c88:	40026058 	.word	0x40026058
 8000c8c:	4002606c 	.word	0x4002606c
 8000c90:	40026080 	.word	0x40026080
 8000c94:	40026408 	.word	0x40026408
 8000c98:	40026400 	.word	0x40026400
 8000c9c:	4002641c 	.word	0x4002641c
 8000ca0:	40026430 	.word	0x40026430
 8000ca4:	40026444 	.word	0x40026444
 8000ca8:	40026458 	.word	0x40026458

08000cac <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cca:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000cda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ce6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000cf2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000d46:	e006      	b.n	8000d56 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000d50:	4013      	ands	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	4613      	mov	r3, r2
 8000d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000d9c:	e006      	b.n	8000dac <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
  }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <DMA_GetFlagStatus+0x48>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e002      	b.n	8000de0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <DMA_GetFlagStatus+0x4c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40026000 	.word	0x40026000
 8000e04:	40026400 	.word	0x40026400

08000e08 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <DMA_ClearFlag+0x2c>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000e20:	e002      	b.n	8000e28 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <DMA_ClearFlag+0x30>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6053      	str	r3, [r2, #4]
  }  
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40026000 	.word	0x40026000
 8000e38:	40026400 	.word	0x40026400

08000e3c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <EXTI_Init+0xe0>)
 8000e4a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	799b      	ldrb	r3, [r3, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d04f      	beq.n	8000ef4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e54:	4931      	ldr	r1, [pc, #196]	; (8000f1c <EXTI_Init+0xe0>)
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <EXTI_Init+0xe0>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e64:	492d      	ldr	r1, [pc, #180]	; (8000f1c <EXTI_Init+0xe0>)
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <EXTI_Init+0xe0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	6811      	ldr	r1, [r2, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e8e:	4923      	ldr	r1, [pc, #140]	; (8000f1c <EXTI_Init+0xe0>)
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <EXTI_Init+0xe0>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e9e:	491f      	ldr	r1, [pc, #124]	; (8000f1c <EXTI_Init+0xe0>)
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <EXTI_Init+0xe0>)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d10e      	bne.n	8000ed4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000eb6:	4919      	ldr	r1, [pc, #100]	; (8000f1c <EXTI_Init+0xe0>)
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <EXTI_Init+0xe0>)
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000ec4:	4915      	ldr	r1, [pc, #84]	; (8000f1c <EXTI_Init+0xe0>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <EXTI_Init+0xe0>)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ed2:	e01d      	b.n	8000f10 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <EXTI_Init+0xe0>)
 8000ed6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	6811      	ldr	r1, [r2, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ef2:	e00d      	b.n	8000f10 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	6811      	ldr	r1, [r2, #0]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
  }
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40010400 	.word	0x40010400

08000f20 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <EXTI_GetITStatus+0x44>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <EXTI_GetITStatus+0x44>)
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <EXTI_GetITStatus+0x32>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e001      	b.n	8000f56 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40010400 	.word	0x40010400

08000f68 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <EXTI_ClearITPendingBit+0x18>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6153      	str	r3, [r2, #20]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40010400 	.word	0x40010400

08000f84 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e07e      	b.n	800109e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d16d      	bne.n	8001098 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d003      	beq.n	8000ffa <GPIO_Init+0x76>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d136      	bne.n	8001068 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2103      	movs	r1, #3
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	4619      	mov	r1, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	b29a      	uxth	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	b29b      	uxth	r3, r3
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	4013      	ands	r3, r2
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	799b      	ldrb	r3, [r3, #6]
 8001052:	4619      	mov	r1, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	b29b      	uxth	r3, r3
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21b      	sxth	r3, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	b29b      	uxth	r3, r3
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2103      	movs	r1, #3
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	79db      	ldrb	r3, [r3, #7]
 8001088:	4619      	mov	r1, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	f67f af7d 	bls.w	8000fa0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010c8:	787a      	ldrb	r2, [r7, #1]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	210f      	movs	r1, #15
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	ea02 0103 	and.w	r1, r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f100 0208 	add.w	r2, r0, #8
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	b29b      	uxth	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <I2C_DeInit+0x44>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10a      	bne.n	8001166 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001150:	2101      	movs	r1, #1
 8001152:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001156:	f000 fbc3 	bl	80018e0 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800115a:	2100      	movs	r1, #0
 800115c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001160:	f000 fbbe 	bl	80018e0 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8001164:	e009      	b.n	800117a <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001166:	2101      	movs	r1, #1
 8001168:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800116c:	f000 fbb8 	bl	80018e0 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001170:	2100      	movs	r1, #0
 8001172:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001176:	f000 fbb3 	bl	80018e0 <RCC_APB1PeriphResetCmd>
  }
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40005400 	.word	0x40005400

08001188 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001196:	2300      	movs	r3, #0
 8001198:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800119a:	2304      	movs	r3, #4
 800119c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <I2C_Init+0x174>)
 80011a0:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	889b      	ldrh	r3, [r3, #4]
 80011a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fa5f 	bl	8001678 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <I2C_Init+0x178>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9b      	lsrs	r3, r3, #18
 80011c8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80011ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011ce:	4313      	orrs	r3, r2
 80011d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011d6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a44      	ldr	r2, [pc, #272]	; (8001304 <I2C_Init+0x17c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d815      	bhi.n	8001222 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001206:	2b03      	cmp	r3, #3
 8001208:	d801      	bhi.n	800120e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800120a:	2304      	movs	r3, #4
 800120c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800120e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001212:	4313      	orrs	r3, r2
 8001214:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001218:	3301      	adds	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	841a      	strh	r2, [r3, #32]
 8001220:	e040      	b.n	80012a4 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	88db      	ldrh	r3, [r3, #6]
 8001226:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800122a:	4293      	cmp	r3, r2
 800122c:	d109      	bne.n	8001242 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001240:	e00e      	b.n	8001260 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800126a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001276:	4313      	orrs	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800127e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001282:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <I2C_Init+0x180>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	1192      	asrs	r2, r2, #6
 8001296:	17db      	asrs	r3, r3, #31
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012a8:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012c2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	889a      	ldrh	r2, [r3, #4]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	895b      	ldrh	r3, [r3, #10]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012da:	4313      	orrs	r3, r2
 80012dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012e2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	899a      	ldrh	r2, [r3, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	811a      	strh	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	007a1200 	.word	0x007a1200
 8001300:	431bde83 	.word	0x431bde83
 8001304:	000186a0 	.word	0x000186a0
 8001308:	10624dd3 	.word	0x10624dd3

0800130c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d008      	beq.n	8001330 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800132e:	e007      	b.n	8001340 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
  }
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800136e:	e007      	b.n	8001380 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	801a      	strh	r2, [r3, #0]
  }
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80013ae:	e007      	b.n	80013c0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	801a      	strh	r2, [r3, #0]
  }
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80013ee:	e007      	b.n	8001400 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	801a      	strh	r2, [r3, #0]
  }
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
 8001418:	4613      	mov	r3, r2
 800141a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800141c:	78bb      	ldrb	r3, [r7, #2]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	70fb      	strb	r3, [r7, #3]
 800142a:	e003      	b.n	8001434 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	821a      	strh	r2, [r3, #16]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	821a      	strh	r2, [r3, #16]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	889b      	ldrh	r3, [r3, #4]
 800147e:	b29b      	uxth	r3, r3
 8001480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 800148a:	e007      	b.n	800149c <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	809a      	strh	r2, [r3, #4]
  }
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 80014ca:	e007      	b.n	80014dc <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	809a      	strh	r2, [r3, #4]
  }
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	b29a      	uxth	r2, r3
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4313      	orrs	r3, r2
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 800150e:	e009      	b.n	8001524 <I2C_ITConfig+0x3c>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	b29a      	uxth	r2, r3
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	43db      	mvns	r3, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	4013      	ands	r3, r2
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	809a      	strh	r2, [r3, #4]
  }
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8a9b      	ldrh	r3, [r3, #20]
 800154e:	b29b      	uxth	r3, r3
 8001550:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8b1b      	ldrh	r3, [r3, #24]
 8001556:	b29b      	uxth	r3, r3
 8001558:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4313      	orrs	r3, r2
 8001566:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800156a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	401a      	ands	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d102      	bne.n	800157e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001578:	2301      	movs	r3, #1
 800157a:	75fb      	strb	r3, [r7, #23]
 800157c:	e001      	b.n	8001582 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	0f1b      	lsrs	r3, r3, #28
 80015ae:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015b6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3314      	adds	r3, #20
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e005      	b.n	80015d2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3318      	adds	r3, #24
 80015d0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e001      	b.n	80015e8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	8892      	ldrh	r2, [r2, #4]
 800160e:	b292      	uxth	r2, r2
 8001610:	4013      	ands	r3, r2
 8001612:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001616:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800161e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8a9b      	ldrh	r3, [r3, #20]
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <I2C_GetITStatus+0x48>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e001      	b.n	8001640 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001660:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	b29b      	uxth	r3, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	829a      	strh	r2, [r3, #20]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001698:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d865      	bhi.n	8001774 <RCC_GetClocksFreq+0xfc>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <RCC_GetClocksFreq+0x38>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	08001775 	.word	0x08001775
 80016b8:	08001775 	.word	0x08001775
 80016bc:	08001775 	.word	0x08001775
 80016c0:	08001705 	.word	0x08001705
 80016c4:	08001775 	.word	0x08001775
 80016c8:	08001775 	.word	0x08001775
 80016cc:	08001775 	.word	0x08001775
 80016d0:	0800170d 	.word	0x0800170d
 80016d4:	08001775 	.word	0x08001775
 80016d8:	08001775 	.word	0x08001775
 80016dc:	08001775 	.word	0x08001775
 80016e0:	08001715 	.word	0x08001715
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016ec:	0b5b      	lsrs	r3, r3, #13
 80016ee:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3301      	adds	r3, #1
 80016f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
      break;
 8001702:	e047      	b.n	8001794 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a45      	ldr	r2, [pc, #276]	; (800181c <RCC_GetClocksFreq+0x1a4>)
 8001708:	601a      	str	r2, [r3, #0]
      break;
 800170a:	e043      	b.n	8001794 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a44      	ldr	r2, [pc, #272]	; (8001820 <RCC_GetClocksFreq+0x1a8>)
 8001710:	601a      	str	r2, [r3, #0]
      break;
 8001712:	e03f      	b.n	8001794 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800171c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001726:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <RCC_GetClocksFreq+0x1ac>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	0d9b      	lsrs	r3, r3, #22
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <RCC_GetClocksFreq+0x1a4>)
 8001750:	fb02 f203 	mul.w	r2, r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fbb2 f2f3 	udiv	r2, r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800175e:	e019      	b.n	8001794 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <RCC_GetClocksFreq+0x1a8>)
 8001764:	fb02 f203 	mul.w	r2, r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fbb2 f2f3 	udiv	r2, r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
      }
      break;
 8001772:	e00f      	b.n	8001794 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800177c:	0b5b      	lsrs	r3, r3, #13
 800177e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
      break;
 8001792:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <RCC_GetClocksFreq+0x1b0>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017c4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <RCC_GetClocksFreq+0x1b0>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	40da      	lsrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <RCC_GetClocksFreq+0x1a0>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017ec:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	0adb      	lsrs	r3, r3, #11
 80017f2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <RCC_GetClocksFreq+0x1b0>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	40da      	lsrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]
}
 800180c:	bf00      	nop
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	00f42400 	.word	0x00f42400
 8001820:	007a1200 	.word	0x007a1200
 8001824:	20000000 	.word	0x20000000
 8001828:	2000000c 	.word	0x2000000c

0800182c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800183e:	4909      	ldr	r1, [pc, #36]	; (8001864 <RCC_AHBPeriphClockCmd+0x38>)
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <RCC_AHBPeriphClockCmd+0x38>)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800184a:	e006      	b.n	800185a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800184c:	4905      	ldr	r1, [pc, #20]	; (8001864 <RCC_AHBPeriphClockCmd+0x38>)
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <RCC_AHBPeriphClockCmd+0x38>)
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	43db      	mvns	r3, r3
 8001856:	4013      	ands	r3, r2
 8001858:	61cb      	str	r3, [r1, #28]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40023800 	.word	0x40023800

08001868 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800187a:	4909      	ldr	r1, [pc, #36]	; (80018a0 <RCC_APB2PeriphClockCmd+0x38>)
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <RCC_APB2PeriphClockCmd+0x38>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001886:	e006      	b.n	8001896 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001888:	4905      	ldr	r1, [pc, #20]	; (80018a0 <RCC_APB2PeriphClockCmd+0x38>)
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <RCC_APB2PeriphClockCmd+0x38>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	43db      	mvns	r3, r3
 8001892:	4013      	ands	r3, r2
 8001894:	620b      	str	r3, [r1, #32]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40023800 	.word	0x40023800

080018a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018b6:	4909      	ldr	r1, [pc, #36]	; (80018dc <RCC_APB1PeriphClockCmd+0x38>)
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <RCC_APB1PeriphClockCmd+0x38>)
 80018ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80018c2:	e006      	b.n	80018d2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018c4:	4905      	ldr	r1, [pc, #20]	; (80018dc <RCC_APB1PeriphClockCmd+0x38>)
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <RCC_APB1PeriphClockCmd+0x38>)
 80018c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4013      	ands	r3, r2
 80018d0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40023800 	.word	0x40023800

080018e0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018f2:	4909      	ldr	r1, [pc, #36]	; (8001918 <RCC_APB1PeriphResetCmd+0x38>)
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <RCC_APB1PeriphResetCmd+0x38>)
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80018fe:	e006      	b.n	800190e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001900:	4905      	ldr	r1, [pc, #20]	; (8001918 <RCC_APB1PeriphResetCmd+0x38>)
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <RCC_APB1PeriphResetCmd+0x38>)
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	43db      	mvns	r3, r3
 800190a:	4013      	ands	r3, r2
 800190c:	618b      	str	r3, [r1, #24]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40023800 	.word	0x40023800

0800191c <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800191c:	b490      	push	{r4, r7}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <SYSCFG_EXTILineConfig+0x80>)
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <SYSCFG_EXTILineConfig+0x80>)
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3302      	adds	r3, #2
 8001954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	1c83      	adds	r3, r0, #2
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <SYSCFG_EXTILineConfig+0x80>)
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461c      	mov	r4, r3
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <SYSCFG_EXTILineConfig+0x80>)
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	3302      	adds	r3, #2
 8001978:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800197c:	79f9      	ldrb	r1, [r7, #7]
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	431a      	orrs	r2, r3
 800198c:	1ca3      	adds	r3, r4, #2
 800198e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bc90      	pop	{r4, r7}
 800199a:	4770      	bx	lr
 800199c:	40010000 	.word	0x40010000

080019a0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ba:	d00b      	beq.n	80019d4 <TIM_TimeBaseInit+0x34>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <TIM_TimeBaseInit+0x90>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <TIM_TimeBaseInit+0x34>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <TIM_TimeBaseInit+0x94>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d003      	beq.n	80019d4 <TIM_TimeBaseInit+0x34>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <TIM_TimeBaseInit+0x98>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d108      	bne.n	80019e6 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019da:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	885a      	ldrh	r2, [r3, #2]
 80019e0:	89fb      	ldrh	r3, [r7, #14]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <TIM_TimeBaseInit+0x9c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00c      	beq.n	8001a08 <TIM_TimeBaseInit+0x68>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <TIM_TimeBaseInit+0xa0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d008      	beq.n	8001a08 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	891a      	ldrh	r2, [r3, #8]
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	89fa      	ldrh	r2, [r7, #14]
 8001a0c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	829a      	strh	r2, [r3, #20]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800
 8001a38:	40000c00 	.word	0x40000c00
 8001a3c:	40001000 	.word	0x40001000
 8001a40:	40001400 	.word	0x40001400

08001a44 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001a66:	e007      	b.n	8001a78 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	801a      	strh	r2, [r3, #0]
  }
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	899b      	ldrh	r3, [r3, #12]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001aaa:	e009      	b.n	8001ac0 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	899b      	ldrh	r3, [r3, #12]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	819a      	strh	r2, [r3, #12]
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	81bb      	strh	r3, [r7, #12]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8a1b      	ldrh	r3, [r3, #16]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	4013      	ands	r3, r2
 8001aee:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	899b      	ldrh	r3, [r3, #12]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	4013      	ands	r3, r2
 8001afa:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001afc:	89bb      	ldrh	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <TIM_GetITStatus+0x42>
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	821a      	strh	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <I2C2_initDMA>:
#define I2C_READ_TIMEOUT 10000
uint32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C2_initDMA(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001b46:	2101      	movs	r1, #1
 8001b48:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b4c:	f7ff fe6e 	bl	800182c <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 8001b50:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <I2C2_initDMA+0x84>)
 8001b52:	f7fe ffef 	bl	8000b34 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <I2C2_initDMA+0x88>)
 8001b58:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <I2C2_initDMA+0x8c>)
 8001b5c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 8001b70:	2302      	movs	r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 8001b84:	463b      	mov	r3, r7
 8001b86:	4619      	mov	r1, r3
 8001b88:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <I2C2_initDMA+0x84>)
 8001b8a:	f7ff f88f 	bl	8000cac <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2102      	movs	r1, #2
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <I2C2_initDMA+0x84>)
 8001b94:	f7ff f8f2 	bl	8000d7c <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 8001b98:	230f      	movs	r3, #15
 8001b9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 8001bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ff5d 	bl	8000a74 <NVIC_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	3730      	adds	r7, #48	; 0x30
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40026058 	.word	0x40026058
 8001bc8:	40005810 	.word	0x40005810
 8001bcc:	20000130 	.word	0x20000130

08001bd0 <I2C2_getDeviceAddress>:

uint8_t I2C2_getDeviceAddress(void) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return deviceAddrUseI2c;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <I2C2_getDeviceAddress+0x10>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	2000009c 	.word	0x2000009c

08001be4 <I2C2_clearDeviceAddress>:

void I2C2_clearDeviceAddress(void) {
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <I2C2_clearDeviceAddress+0x14>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000009c 	.word	0x2000009c

08001bfc <I2C2_getRxBuffer>:

uint32_t I2C2_getRxBuffer(int index) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <I2C2_getRxBuffer+0x1c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000130 	.word	0x20000130

08001c1c <I2C2_getReadRegister>:

uint8_t I2C2_getReadRegister(void) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	return readReg;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <I2C2_getReadRegister+0x10>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	2000009d 	.word	0x2000009d

08001c30 <I2C2_clearReadRegister>:

void I2C2_clearReadRegister(void) {
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	readReg = 0;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <I2C2_clearReadRegister+0x14>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000009d 	.word	0x2000009d

08001c48 <I2C2_Init>:


void I2C2_Init(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fdeb 	bl	800182c <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001c56:	2101      	movs	r1, #1
 8001c58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001c5c:	f7ff fe22 	bl	80018a4 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 8001c60:	2204      	movs	r2, #4
 8001c62:	210a      	movs	r1, #10
 8001c64:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <I2C2_Init+0x98>)
 8001c66:	f7ff fa23 	bl	80010b0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	210b      	movs	r1, #11
 8001c6e:	481c      	ldr	r0, [pc, #112]	; (8001ce0 <I2C2_Init+0x98>)
 8001c70:	f7ff fa1e 	bl	80010b0 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c78:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001c86:	2303      	movs	r3, #3
 8001c88:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <I2C2_Init+0x98>)
 8001c92:	f7ff f977 	bl	8000f84 <GPIO_Init>

	I2C_DeInit(I2C2);
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <I2C2_Init+0x9c>)
 8001c98:	f7ff fa52 	bl	8001140 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca4:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb4:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <I2C2_Init+0xa0>)
 8001cb8:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <I2C2_Init+0x9c>)
 8001cc0:	f7ff fa62 	bl	8001188 <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <I2C2_Init+0x9c>)
 8001cc8:	f7ff fb20 	bl	800130c <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <I2C2_Init+0x9c>)
 8001cd0:	f7ff fb7c 	bl	80013cc <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8001cd4:	f7ff ff34 	bl	8001b40 <I2C2_initDMA>
}
 8001cd8:	bf00      	nop
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	00061a80 	.word	0x00061a80

08001cec <I2C2_BytesWrite>:

void I2C2_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,uint8_t writeAddr) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6039      	str	r1, [r7, #0]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	71bb      	strb	r3, [r7, #6]
 8001d00:	4613      	mov	r3, r2
 8001d02:	717b      	strb	r3, [r7, #5]
	I2C_GenerateSTART(I2C2, ENABLE);
 8001d04:	2101      	movs	r1, #1
 8001d06:	4825      	ldr	r0, [pc, #148]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d08:	f7ff fb20 	bl	800134c <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001d0c:	bf00      	nop
 8001d0e:	4924      	ldr	r1, [pc, #144]	; (8001da0 <I2C2_BytesWrite+0xb4>)
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d12:	f7ff fc0d 	bl	8001530 <I2C_CheckEvent>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f8      	beq.n	8001d0e <I2C2_BytesWrite+0x22>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	481e      	ldr	r0, [pc, #120]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d24:	f7ff fb72 	bl	800140c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001d28:	bf00      	nop
 8001d2a:	491e      	ldr	r1, [pc, #120]	; (8001da4 <I2C2_BytesWrite+0xb8>)
 8001d2c:	481b      	ldr	r0, [pc, #108]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d2e:	f7ff fbff 	bl	8001530 <I2C_CheckEvent>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f8      	beq.n	8001d2a <I2C2_BytesWrite+0x3e>
		;
	I2C_SendData(I2C2, writeAddr);
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4817      	ldr	r0, [pc, #92]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d3e:	f7ff fb83 	bl	8001448 <I2C_SendData>
	for (int i = 0; i < length; i++) {
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e014      	b.n	8001d72 <I2C2_BytesWrite+0x86>
		I2C_SendData(I2C2, pBuffer[i]);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d54:	f7ff fb78 	bl	8001448 <I2C_SendData>
		for (int x = 0; x < 1000; x++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	e002      	b.n	8001d64 <I2C2_BytesWrite+0x78>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6a:	dbf8      	blt.n	8001d5e <I2C2_BytesWrite+0x72>
		;
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;
	I2C_SendData(I2C2, writeAddr);
	for (int i = 0; i < length; i++) {
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	79ba      	ldrb	r2, [r7, #6]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dce6      	bgt.n	8001d48 <I2C2_BytesWrite+0x5c>
		I2C_SendData(I2C2, pBuffer[i]);
		for (int x = 0; x < 1000; x++)
			;
	}
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001d7a:	bf00      	nop
 8001d7c:	490a      	ldr	r1, [pc, #40]	; (8001da8 <I2C2_BytesWrite+0xbc>)
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d80:	f7ff fbd6 	bl	8001530 <I2C_CheckEvent>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f8      	beq.n	8001d7c <I2C2_BytesWrite+0x90>
		;
	I2C_GenerateSTOP(I2C2, ENABLE);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <I2C2_BytesWrite+0xb0>)
 8001d8e:	f7ff fafd 	bl	800138c <I2C_GenerateSTOP>

}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	00030001 	.word	0x00030001
 8001da4:	00070082 	.word	0x00070082
 8001da8:	00070084 	.word	0x00070084

08001dac <I2C2_DMA_Read>:

void I2C2_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,uint8_t numberBytesReceive) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	460b      	mov	r3, r1
 8001db8:	71bb      	strb	r3, [r7, #6]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	717b      	strb	r3, [r7, #5]
	//int timeout_var = 0;
	while (deviceAddrUseI2c != 0);
 8001dbe:	bf00      	nop
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <I2C2_DMA_Read+0xf8>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1fb      	bne.n	8001dc0 <I2C2_DMA_Read+0x14>
	deviceAddrUseI2c = slaveAddr;
 8001dc8:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <I2C2_DMA_Read+0xf8>)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	7013      	strb	r3, [r2, #0]
	readReg = readAddr;
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <I2C2_DMA_Read+0xfc>)
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	7013      	strb	r3, [r2, #0]

	/* Disable DMA channel*/
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4835      	ldr	r0, [pc, #212]	; (8001eac <I2C2_DMA_Read+0x100>)
 8001dd8:	f7fe ffa6 	bl	8000d28 <DMA_Cmd>

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);
 8001ddc:	797b      	ldrb	r3, [r7, #5]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	4832      	ldr	r0, [pc, #200]	; (8001eac <I2C2_DMA_Read+0x100>)
 8001de4:	f7fe ffbc 	bl	8000d60 <DMA_SetCurrDataCounter>

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY))
 8001de8:	bf00      	nop
 8001dea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001dee:	4830      	ldr	r0, [pc, #192]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001df0:	f7ff fbce 	bl	8001590 <I2C_GetFlagStatus>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f7      	bne.n	8001dea <I2C2_DMA_Read+0x3e>
		;

	/* Enable DMA NACK automatic generation */
	I2C_DMALastTransferCmd(I2C2, ENABLE); //Note this one, very important
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	482c      	ldr	r0, [pc, #176]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001dfe:	f7ff fb53 	bl	80014a8 <I2C_DMALastTransferCmd>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);
 8001e02:	2101      	movs	r1, #1
 8001e04:	482a      	ldr	r0, [pc, #168]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e06:	f7ff faa1 	bl	800134c <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001e0a:	bf00      	nop
 8001e0c:	4929      	ldr	r1, [pc, #164]	; (8001eb4 <I2C2_DMA_Read+0x108>)
 8001e0e:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e10:	f7ff fb8e 	bl	8001530 <I2C_CheckEvent>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f8      	beq.n	8001e0c <I2C2_DMA_Read+0x60>
		;

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e22:	f7ff faf3 	bl	800140c <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 8001e26:	bf00      	nop
 8001e28:	4923      	ldr	r1, [pc, #140]	; (8001eb8 <I2C2_DMA_Read+0x10c>)
 8001e2a:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e2c:	f7ff fb80 	bl	8001530 <I2C_CheckEvent>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f8      	beq.n	8001e28 <I2C2_DMA_Read+0x7c>
	I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(I2C2, ENABLE);
 8001e36:	2101      	movs	r1, #1
 8001e38:	481d      	ldr	r0, [pc, #116]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e3a:	f7ff fa67 	bl	800130c <I2C_Cmd>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	4619      	mov	r1, r3
 8001e42:	481b      	ldr	r0, [pc, #108]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e44:	f7ff fb00 	bl	8001448 <I2C_SendData>

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001e48:	bf00      	nop
 8001e4a:	491c      	ldr	r1, [pc, #112]	; (8001ebc <I2C2_DMA_Read+0x110>)
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e4e:	f7ff fb6f 	bl	8001530 <I2C_CheckEvent>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f8      	beq.n	8001e4a <I2C2_DMA_Read+0x9e>
		;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e5c:	f7ff fa76 	bl	800134c <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001e60:	bf00      	nop
 8001e62:	4914      	ldr	r1, [pc, #80]	; (8001eb4 <I2C2_DMA_Read+0x108>)
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e66:	f7ff fb63 	bl	8001530 <I2C_CheckEvent>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f8      	beq.n	8001e62 <I2C2_DMA_Read+0xb6>
		;

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e78:	f7ff fac8 	bl	800140c <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8001e7c:	bf00      	nop
 8001e7e:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <I2C2_DMA_Read+0x114>)
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e82:	f7ff fb55 	bl	8001530 <I2C_CheckEvent>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f8      	beq.n	8001e7e <I2C2_DMA_Read+0xd2>
		;

	/* Start DMA to receive data from I2C */
	DMA_Cmd(DMA1_Channel5, ENABLE);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <I2C2_DMA_Read+0x100>)
 8001e90:	f7fe ff4a 	bl	8000d28 <DMA_Cmd>
	I2C_DMACmd(I2C2, ENABLE);
 8001e94:	2101      	movs	r1, #1
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <I2C2_DMA_Read+0x104>)
 8001e98:	f7ff fae6 	bl	8001468 <I2C_DMACmd>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000009c 	.word	0x2000009c
 8001ea8:	2000009d 	.word	0x2000009d
 8001eac:	40026058 	.word	0x40026058
 8001eb0:	40005800 	.word	0x40005800
 8001eb4:	00030001 	.word	0x00030001
 8001eb8:	00070082 	.word	0x00070082
 8001ebc:	00070084 	.word	0x00070084
 8001ec0:	00030002 	.word	0x00030002

08001ec4 <I2C1_Init>:
#include <I2CSlaveLib/I2CSlaveLib.h>

void I2C1_Init(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7ff fcad 	bl	800182c <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ed8:	f7ff fce4 	bl	80018a4 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8001edc:	2204      	movs	r2, #4
 8001ede:	2108      	movs	r1, #8
 8001ee0:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <I2C1_Init+0xe4>)
 8001ee2:	f7ff f8e5 	bl	80010b0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	2109      	movs	r1, #9
 8001eea:	482f      	ldr	r0, [pc, #188]	; (8001fa8 <I2C1_Init+0xe4>)
 8001eec:	f7ff f8e0 	bl	80010b0 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001f02:	2303      	movs	r3, #3
 8001f04:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4826      	ldr	r0, [pc, #152]	; (8001fa8 <I2C1_Init+0xe4>)
 8001f0e:	f7ff f839 	bl	8000f84 <GPIO_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
 8001f12:	231f      	movs	r3, #31
 8001f14:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fda5 	bl	8000a74 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fd99 	bl	8000a74 <NVIC_Init>

	I2C_DeInit(I2C1);
 8001f42:	481a      	ldr	r0, [pc, #104]	; (8001fac <I2C1_Init+0xe8>)
 8001f44:	f7ff f8fc 	bl	8001140 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8001f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f50:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = slave_address<<1;
 8001f52:	2322      	movs	r3, #34	; 0x22
 8001f54:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5a:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f60:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <I2C1_Init+0xec>)
 8001f64:	60bb      	str	r3, [r7, #8]

	I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6c:	480f      	ldr	r0, [pc, #60]	; (8001fac <I2C1_Init+0xe8>)
 8001f6e:	f7ff fabb 	bl	80014e8 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <I2C1_Init+0xe8>)
 8001f7a:	f7ff fab5 	bl	80014e8 <I2C_ITConfig>
	I2C_ITConfig(I2C1, I2C_IT_ERR, ENABLE);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <I2C1_Init+0xe8>)
 8001f86:	f7ff faaf 	bl	80014e8 <I2C_ITConfig>

	I2C_Init(I2C1, &I2C_InitStructure);
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <I2C1_Init+0xe8>)
 8001f92:	f7ff f8f9 	bl	8001188 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8001f96:	2101      	movs	r1, #1
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <I2C1_Init+0xe8>)
 8001f9a:	f7ff f9b7 	bl	800130c <I2C_Cmd>

}
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	00061a80 	.word	0x00061a80

08001fb4 <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <_ZN5MotorC1Eh+0x44>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	749a      	strb	r2, [r3, #18]
	this->motorAddr = motorAddr;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	81da      	strh	r2, [r3, #14]
}
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	080047a0 	.word	0x080047a0

08001ffc <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <_ZN5MotorD1Ev+0x24>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]

}
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <_ZN5MotorD1Ev+0x1a>
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 fa10 	bl	8003436 <_ZdlPv>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	080047a0 	.word	0x080047a0

08002024 <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

}
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe5 	bl	8001ffc <_ZN5MotorD1Ev>
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 f9ff 	bl	8003436 <_ZdlPv>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	0000      	movs	r0, r0
	...

08002048 <_ZN5Motor13setSpeedMotorEd>:
//------------------------------------------------------------------
void Motor::setSpeedMotor(double mmPerSec) {
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t speedRaw =
			(mmPerSec * (numberTicksOfWheel / (M_PI * wheelDiameter)))
 8002054:	a310      	add	r3, pc, #64	; (adr r3, 8002098 <_ZN5Motor13setSpeedMotorEd+0x50>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205e:	f7fe fa47 	bl	80004f0 <__aeabi_dmul>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	4618      	mov	r0, r3
 8002068:	4621      	mov	r1, r4
					/ periodSpeedRegulator;
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <_ZN5Motor13setSpeedMotorEd+0x58>)
 8002070:	f7fe fb68 	bl	8000744 <__aeabi_ddiv>
 8002074:	4603      	mov	r3, r0
 8002076:	460c      	mov	r4, r1
 8002078:	4618      	mov	r0, r3
 800207a:	4621      	mov	r1, r4
 800207c:	f7fe fcd2 	bl	8000a24 <__aeabi_d2iz>
 8002080:	4603      	mov	r3, r0
 8002082:	82fb      	strh	r3, [r7, #22]
	setSpeedRawMotor(speedRaw);
 8002084:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002088:	4619      	mov	r1, r3
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f80a 	bl	80020a4 <_ZN5Motor16setSpeedRawMotorEs>
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	16375352 	.word	0x16375352
 800209c:	3fdc6d02 	.word	0x3fdc6d02
 80020a0:	3fd00000 	.word	0x3fd00000

080020a4 <_ZN5Motor16setSpeedRawMotorEs>:
	setSpeedRawMotor(
			(int16_t) ((anglePerSec * (numberTicksOfWheel / 360))
					/ periodSpeedRegulator));
}
//------------------------------------------------------------------
void Motor::setSpeedRawMotor(int16_t data) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[2];
	tmp[1] = data & 0xFF;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	737b      	strb	r3, [r7, #13]
	tmp[0] = (data >> 8) & 0xFF;
 80020b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020ba:	121b      	asrs	r3, r3, #8
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	733b      	strb	r3, [r7, #12]
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETSPEEDREG);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7918      	ldrb	r0, [r3, #4]
 80020c4:	f107 010c 	add.w	r1, r7, #12
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	2202      	movs	r2, #2
 80020cc:	f7ff fe0e 	bl	8001cec <I2C2_BytesWrite>
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>:
	tmp[1] = data & 0xFF;
	tmp[0] = (data >> 8) & 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETPWMREG);
}
//------------------------------------------------------------------
void Motor::DMADeltaTicksInvoke(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	I2C2_DMA_Read(this->motorAddr, GETDELTATICKSREG, 2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	2103      	movs	r1, #3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe5f 	bl	8001dac <I2C2_DMA_Read>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop

080020f8 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETSPEEDREG, 2);
}
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <_ZN5Motor8getTicksEv>:
//------------------------------------------------------------------
long Motor::getTicks(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	while (I2C2_getReadRegister() == GETDELTATICKSREG)
 8002124:	f7ff fd7a 	bl	8001c1c <I2C2_getReadRegister>
 8002128:	4603      	mov	r3, r0
 800212a:	2b03      	cmp	r3, #3
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d000      	beq.n	800213a <_ZN5Motor8getTicksEv+0x1e>
 8002138:	e7f4      	b.n	8002124 <_ZN5Motor8getTicksEv+0x8>
		;
	return this->ticks;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop

08002148 <_ZN5Motor11getDistanceEv>:
//------------------------------------------------------------------
double Motor::getDistance(void) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	return (double) getTicks() * ((wheelDiameter * M_PI) / (numberTicksOfWheel));
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffe3 	bl	800211c <_ZN5Motor8getTicksEv>
 8002156:	4603      	mov	r3, r0
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f963 	bl	8000424 <__aeabi_i2d>
 800215e:	a306      	add	r3, pc, #24	; (adr r3, 8002178 <_ZN5Motor11getDistanceEv+0x30>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe f9c4 	bl	80004f0 <__aeabi_dmul>
 8002168:	4603      	mov	r3, r0
 800216a:	460c      	mov	r4, r1
}
 800216c:	4618      	mov	r0, r3
 800216e:	4621      	mov	r1, r4
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	2f974273 	.word	0x2f974273
 800217c:	40020305 	.word	0x40020305

08002180 <_ZN5Motor11setSpeedRawEs>:
//------------------------------------------------------------------
void Motor::setSpeedRaw(int16_t speedRaw) {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
	this->speedRaw = speedRaw;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	819a      	strh	r2, [r3, #12]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <_ZN5Motor13setVoltageRawEt>:
	return getSpeedRaw()
			* ((wheelDiameter * M_PI)
					/ (periodSpeedRegulator * numberTicksOfWheel));
}
//------------------------------------------------------------------
void Motor::setVoltageRaw(uint16_t voltageRaw) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
	this->voltageRaw = voltageRaw;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	81da      	strh	r2, [r3, #14]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <_ZN5Motor10setCurrentEt>:
	while (I2C2_getReadRegister() == GETVOLTAGEREG)
		;
	return (double) this->voltageRaw * (25 / 1023);
}
//------------------------------------------------------------------
void Motor::setCurrent(uint16_t current) {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
	this->current = current;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	821a      	strh	r2, [r3, #16]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_ZN5Motor12setTestValueEh>:
//------------------------------------------------------------------
void Motor::DMATestInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETWHO_I_AM, 1);
}
//------------------------------------------------------------------
void Motor::setTestValue(uint8_t value) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
	this->test = value == this->motorAddr;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	749a      	strb	r2, [r3, #18]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <_Z8getMotori>:
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	switch (i) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	2b05      	cmp	r3, #5
 800220e:	d821      	bhi.n	8002254 <_Z8getMotori+0x54>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <_Z8getMotori+0x18>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002231 	.word	0x08002231
 800221c:	08002237 	.word	0x08002237
 8002220:	0800223d 	.word	0x0800223d
 8002224:	08002243 	.word	0x08002243
 8002228:	08002249 	.word	0x08002249
 800222c:	0800224f 	.word	0x0800224f
	case 1:
		return motor1;
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <_Z8getMotori+0x60>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	e00e      	b.n	8002254 <_Z8getMotori+0x54>
	case 2:
		return motor2;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <_Z8getMotori+0x64>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e00b      	b.n	8002254 <_Z8getMotori+0x54>
	case 3:
		return motor3;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <_Z8getMotori+0x68>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e008      	b.n	8002254 <_Z8getMotori+0x54>
	case 4:
		return motor4;
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <_Z8getMotori+0x6c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e005      	b.n	8002254 <_Z8getMotori+0x54>
	case 5:
		return motor5;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <_Z8getMotori+0x70>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e002      	b.n	8002254 <_Z8getMotori+0x54>
	case 6:
		return motor6;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <_Z8getMotori+0x74>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e7ff      	b.n	8002254 <_Z8getMotori+0x54>
	}
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200000a0 	.word	0x200000a0
 8002264:	200000a4 	.word	0x200000a4
 8002268:	200000a8 	.word	0x200000a8
 800226c:	200000ac 	.word	0x200000ac
 8002270:	200000b0 	.word	0x200000b0
 8002274:	200000b4 	.word	0x200000b4

08002278 <_Z6speedLd>:

enum Direction {
	FORWARD, BACKWARD, ROTATE_CLOCKWISE, ROTATE_ANTICLOCKWISE, STOP
};

void speedL(double speed) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	e9c7 0100 	strd	r0, r1, [r7]
	getMotor(1)->setSpeedMotor(speed);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff ffbc 	bl	8002200 <_Z8getMotori>
 8002288:	4601      	mov	r1, r0
 800228a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228e:	4608      	mov	r0, r1
 8002290:	f7ff feda 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
	getMotor(2)->setSpeedMotor(speed);
 8002294:	2002      	movs	r0, #2
 8002296:	f7ff ffb3 	bl	8002200 <_Z8getMotori>
 800229a:	4601      	mov	r1, r0
 800229c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a0:	4608      	mov	r0, r1
 80022a2:	f7ff fed1 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
	getMotor(3)->setSpeedMotor(speed);
 80022a6:	2003      	movs	r0, #3
 80022a8:	f7ff ffaa 	bl	8002200 <_Z8getMotori>
 80022ac:	4601      	mov	r1, r0
 80022ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022b2:	4608      	mov	r0, r1
 80022b4:	f7ff fec8 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_Z6speedRd>:
void speedR(double speed) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	e9c7 0100 	strd	r0, r1, [r7]
	getMotor(4)->setSpeedMotor(speed);
 80022ca:	2004      	movs	r0, #4
 80022cc:	f7ff ff98 	bl	8002200 <_Z8getMotori>
 80022d0:	4601      	mov	r1, r0
 80022d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d6:	4608      	mov	r0, r1
 80022d8:	f7ff feb6 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
	getMotor(5)->setSpeedMotor(speed);
 80022dc:	2005      	movs	r0, #5
 80022de:	f7ff ff8f 	bl	8002200 <_Z8getMotori>
 80022e2:	4601      	mov	r1, r0
 80022e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e8:	4608      	mov	r0, r1
 80022ea:	f7ff fead 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
	getMotor(6)->setSpeedMotor(speed);
 80022ee:	2006      	movs	r0, #6
 80022f0:	f7ff ff86 	bl	8002200 <_Z8getMotori>
 80022f4:	4601      	mov	r1, r0
 80022f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fa:	4608      	mov	r0, r1
 80022fc:	f7ff fea4 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_Z11goDirection9Directiond>:
void goDirection(Direction dir, double speed) {
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	4601      	mov	r1, r0
 8002310:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002314:	460b      	mov	r3, r1
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (dir) {
 800231a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231e:	2b04      	cmp	r3, #4
 8002320:	d853      	bhi.n	80023ca <_Z11goDirection9Directiond+0xc2>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <_Z11goDirection9Directiond+0x20>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	0800233d 	.word	0x0800233d
 800232c:	0800234f 	.word	0x0800234f
 8002330:	08002379 	.word	0x08002379
 8002334:	08002397 	.word	0x08002397
 8002338:	080023b1 	.word	0x080023b1
	case FORWARD:
		speedL(speed);
 800233c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002340:	f7ff ff9a 	bl	8002278 <_Z6speedLd>
		speedR(speed);
 8002344:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002348:	f7ff ffba 	bl	80022c0 <_Z6speedRd>
		break;
 800234c:	e03d      	b.n	80023ca <_Z11goDirection9Directiond+0xc2>
	case BACKWARD:
		speedL(-speed);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800235e:	f7ff ff8b 	bl	8002278 <_Z6speedLd>
		speedR(-speed);
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002372:	f7ff ffa5 	bl	80022c0 <_Z6speedRd>
		break;
 8002376:	e028      	b.n	80023ca <_Z11goDirection9Directiond+0xc2>
	case ROTATE_CLOCKWISE:
		speedL(speed);
 8002378:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800237c:	f7ff ff7c 	bl	8002278 <_Z6speedLd>
		speedR(-speed);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002390:	f7ff ff96 	bl	80022c0 <_Z6speedRd>
		break;
 8002394:	e019      	b.n	80023ca <_Z11goDirection9Directiond+0xc2>
	case ROTATE_ANTICLOCKWISE:
		speedL(-speed);
 8002396:	69bc      	ldr	r4, [r7, #24]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7ff ff69 	bl	8002278 <_Z6speedLd>
		speedR(speed);
 80023a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023aa:	f7ff ff89 	bl	80022c0 <_Z6speedRd>
		break;
 80023ae:	e00c      	b.n	80023ca <_Z11goDirection9Directiond+0xc2>
	case STOP:
		speedL(0);
 80023b0:	f04f 0000 	mov.w	r0, #0
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f7ff ff5e 	bl	8002278 <_Z6speedLd>
		speedR(0);
 80023bc:	f04f 0000 	mov.w	r0, #0
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	f7ff ff7c 	bl	80022c0 <_Z6speedRd>
		break;
 80023c8:	bf00      	nop
	}

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdb0      	pop	{r4, r5, r7, pc}
 80023d2:	bf00      	nop

080023d4 <I2C1_ER_IRQHandler>:

extern "C" void I2C1_ER_IRQHandler(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF)) {
 80023d8:	4908      	ldr	r1, [pc, #32]	; (80023fc <I2C1_ER_IRQHandler+0x28>)
 80023da:	4809      	ldr	r0, [pc, #36]	; (8002400 <I2C1_ER_IRQHandler+0x2c>)
 80023dc:	f7ff f90a 	bl	80015f4 <I2C_GetITStatus>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <I2C1_ER_IRQHandler+0x24>
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 80023f0:	4902      	ldr	r1, [pc, #8]	; (80023fc <I2C1_ER_IRQHandler+0x28>)
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <I2C1_ER_IRQHandler+0x2c>)
 80023f4:	f7ff f92a 	bl	800164c <I2C_ClearITPendingBit>
	}
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	01000400 	.word	0x01000400
 8002400:	40005400 	.word	0x40005400

08002404 <_Z15longToI2CBufferl>:
uint8_t i2c_indexSendBuffer = 0;
uint8_t i2c_sendBuffer[I2C_MAX_SEND_BUFFER];
bool i2c1_recv_reg_done = false;
bool buttons[3];

void longToI2CBuffer(long number) {
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	dc10      	bgt.n	8002438 <_Z15longToI2CBufferl+0x34>
		i2c_sendBuffer[i] = (number >> ((3 - i) * 8)) & 0xFF;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1c3 0303 	rsb	r3, r3, #3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	fa42 f303 	asr.w	r3, r2, r3
 8002424:	b2d9      	uxtb	r1, r3
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <_Z15longToI2CBufferl+0x40>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	460a      	mov	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
uint8_t i2c_sendBuffer[I2C_MAX_SEND_BUFFER];
bool i2c1_recv_reg_done = false;
bool buttons[3];

void longToI2CBuffer(long number) {
	for (int i = 0; i < 4; i++) {
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e7eb      	b.n	8002410 <_Z15longToI2CBufferl+0xc>
		i2c_sendBuffer[i] = (number >> ((3 - i) * 8)) & 0xFF;
	}
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	200000e0 	.word	0x200000e0

08002448 <I2C1_EV_IRQHandler>:
	for (int i = 0; i < 2; i++) {
		i2c_sendBuffer[i] = (number >> ((1 - i) * 8)) & 0xFF;
	}
}

extern "C" void I2C1_EV_IRQHandler() {
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	af00      	add	r7, sp, #0
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 800244c:	4bbc      	ldr	r3, [pc, #752]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 800244e:	8a9b      	ldrh	r3, [r3, #20]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <I2C1_EV_IRQHandler+0x26>
		I2C1->SR1;
 8002464:	4bb6      	ldr	r3, [pc, #728]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 8002466:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->SR2;
 8002468:	4bb5      	ldr	r3, [pc, #724]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 800246a:	8b1b      	ldrh	r3, [r3, #24]
	}
}

extern "C" void I2C1_EV_IRQHandler() {
	//ev1
	while ((I2C_SR1_ADDR & I2C1->SR1) == I2C_SR1_ADDR) {
 800246c:	e7ee      	b.n	800244c <I2C1_EV_IRQHandler+0x4>
		I2C1->SR1;
		I2C1->SR2;
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 800246e:	4bb4      	ldr	r3, [pc, #720]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 8002470:	8a9b      	ldrh	r3, [r3, #20]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8185 	beq.w	8002792 <I2C1_EV_IRQHandler+0x34a>
		if (!i2c1_recv_reg_done) {
 8002488:	4bae      	ldr	r3, [pc, #696]	; (8002744 <I2C1_EV_IRQHandler+0x2fc>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d079      	beq.n	800258a <I2C1_EV_IRQHandler+0x142>
			i2c1_reg = I2C1->DR;
 8002496:	4baa      	ldr	r3, [pc, #680]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 8002498:	8a1b      	ldrh	r3, [r3, #16]
 800249a:	b29a      	uxth	r2, r3
 800249c:	4baa      	ldr	r3, [pc, #680]	; (8002748 <I2C1_EV_IRQHandler+0x300>)
 800249e:	801a      	strh	r2, [r3, #0]
			i2c1_recv_reg_done = true;
 80024a0:	4ba8      	ldr	r3, [pc, #672]	; (8002744 <I2C1_EV_IRQHandler+0x2fc>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
			i2c1_val = 0;
 80024a6:	4ba9      	ldr	r3, [pc, #676]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	801a      	strh	r2, [r3, #0]
			numberOfRecvValues = 0;
 80024ac:	4ba8      	ldr	r3, [pc, #672]	; (8002750 <I2C1_EV_IRQHandler+0x308>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	801a      	strh	r2, [r3, #0]
			i2c_indexSendBuffer = 0;
 80024b2:	4ba8      	ldr	r3, [pc, #672]	; (8002754 <I2C1_EV_IRQHandler+0x30c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
			switch (i2c1_reg) {
 80024b8:	4ba3      	ldr	r3, [pc, #652]	; (8002748 <I2C1_EV_IRQHandler+0x300>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	3b64      	subs	r3, #100	; 0x64
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d8d5      	bhi.n	800246e <I2C1_EV_IRQHandler+0x26>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <I2C1_EV_IRQHandler+0x80>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024ef 	.word	0x080024ef
 80024d0:	08002505 	.word	0x08002505
 80024d4:	0800252b 	.word	0x0800252b
			case 100:
				longToI2CBuffer(x);
 80024d8:	4b9f      	ldr	r3, [pc, #636]	; (8002758 <I2C1_EV_IRQHandler+0x310>)
 80024da:	cb18      	ldmia	r3, {r3, r4}
 80024dc:	4618      	mov	r0, r3
 80024de:	4621      	mov	r1, r4
 80024e0:	f7fe faa0 	bl	8000a24 <__aeabi_d2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff8c 	bl	8002404 <_Z15longToI2CBufferl>
				break;
 80024ec:	e150      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
			case 101:
				longToI2CBuffer(y);
 80024ee:	4b9b      	ldr	r3, [pc, #620]	; (800275c <I2C1_EV_IRQHandler+0x314>)
 80024f0:	cb18      	ldmia	r3, {r3, r4}
 80024f2:	4618      	mov	r0, r3
 80024f4:	4621      	mov	r1, r4
 80024f6:	f7fe fa95 	bl	8000a24 <__aeabi_d2iz>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff81 	bl	8002404 <_Z15longToI2CBufferl>
				break;
 8002502:	e145      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
			case 102:
				longToI2CBuffer(angle * 1000);
 8002504:	4b96      	ldr	r3, [pc, #600]	; (8002760 <I2C1_EV_IRQHandler+0x318>)
 8002506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b95      	ldr	r3, [pc, #596]	; (8002764 <I2C1_EV_IRQHandler+0x31c>)
 8002510:	f7fd ffee 	bl	80004f0 <__aeabi_dmul>
 8002514:	4603      	mov	r3, r0
 8002516:	460c      	mov	r4, r1
 8002518:	4618      	mov	r0, r3
 800251a:	4621      	mov	r1, r4
 800251c:	f7fe fa82 	bl	8000a24 <__aeabi_d2iz>
 8002520:	4603      	mov	r3, r0
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff6e 	bl	8002404 <_Z15longToI2CBufferl>
				break;
 8002528:	e132      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
			case 103:
				i2c_sendBuffer[0] = 0;
 800252a:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
				i2c_sendBuffer[1] = 0;
 8002530:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
				i2c_sendBuffer[2] = 0;
 8002536:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 8002538:	2200      	movs	r2, #0
 800253a:	709a      	strb	r2, [r3, #2]
				i2c_sendBuffer[3] = 0;
 800253c:	4b8a      	ldr	r3, [pc, #552]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 800253e:	2200      	movs	r2, #0
 8002540:	70da      	strb	r2, [r3, #3]
				if(buttons[0]) i2c_sendBuffer[0] |= 1;
 8002542:	4b8a      	ldr	r3, [pc, #552]	; (800276c <I2C1_EV_IRQHandler+0x324>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <I2C1_EV_IRQHandler+0x110>
 800254a:	4b87      	ldr	r3, [pc, #540]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b84      	ldr	r3, [pc, #528]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 8002556:	701a      	strb	r2, [r3, #0]
				if(buttons[1]) i2c_sendBuffer[0] |= 2;
 8002558:	4b84      	ldr	r3, [pc, #528]	; (800276c <I2C1_EV_IRQHandler+0x324>)
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <I2C1_EV_IRQHandler+0x126>
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 800256c:	701a      	strb	r2, [r3, #0]
				if(buttons[2]) i2c_sendBuffer[0] |= 4;
 800256e:	4b7f      	ldr	r3, [pc, #508]	; (800276c <I2C1_EV_IRQHandler+0x324>)
 8002570:	789b      	ldrb	r3, [r3, #2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 810b 	beq.w	800278e <I2C1_EV_IRQHandler+0x346>
 8002578:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b79      	ldr	r3, [pc, #484]	; (8002768 <I2C1_EV_IRQHandler+0x320>)
 8002584:	701a      	strb	r2, [r3, #0]
				break;
 8002586:	bf00      	nop
 8002588:	e101      	b.n	800278e <I2C1_EV_IRQHandler+0x346>
			}

		} else {
			i2c1_val = (i2c1_val << 8) | I2C1->DR;
 800258a:	4b70      	ldr	r3, [pc, #448]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 800258c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <I2C1_EV_IRQHandler+0x2f8>)
 8002596:	8a1b      	ldrh	r3, [r3, #16]
 8002598:	b29b      	uxth	r3, r3
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21a      	sxth	r2, r3
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 80025a2:	801a      	strh	r2, [r3, #0]
			numberOfRecvValues++;
 80025a4:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <I2C1_EV_IRQHandler+0x308>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <I2C1_EV_IRQHandler+0x308>)
 80025ae:	801a      	strh	r2, [r3, #0]
			if (numberOfRecvValues == 2) {
 80025b0:	4b67      	ldr	r3, [pc, #412]	; (8002750 <I2C1_EV_IRQHandler+0x308>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	f47f af5a 	bne.w	800246e <I2C1_EV_IRQHandler+0x26>
				switch (i2c1_reg) {
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <I2C1_EV_IRQHandler+0x300>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	2b0a      	cmp	r3, #10
 80025c2:	f63f af54 	bhi.w	800246e <I2C1_EV_IRQHandler+0x26>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <I2C1_EV_IRQHandler+0x184>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025f9 	.word	0x080025f9
 80025d0:	0800261d 	.word	0x0800261d
 80025d4:	08002641 	.word	0x08002641
 80025d8:	08002665 	.word	0x08002665
 80025dc:	08002689 	.word	0x08002689
 80025e0:	080026ad 	.word	0x080026ad
 80025e4:	080026d1 	.word	0x080026d1
 80025e8:	080026ed 	.word	0x080026ed
 80025ec:	08002709 	.word	0x08002709
 80025f0:	08002725 	.word	0x08002725
 80025f4:	08002771 	.word	0x08002771
				case 1:
					getMotor(1)->setSpeedMotor((double) i2c1_val);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff fe01 	bl	8002200 <_Z8getMotori>
 80025fe:	4605      	mov	r5, r0
 8002600:	4b52      	ldr	r3, [pc, #328]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 8002602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff0c 	bl	8000424 <__aeabi_i2d>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	461a      	mov	r2, r3
 8002612:	4623      	mov	r3, r4
 8002614:	4628      	mov	r0, r5
 8002616:	f7ff fd17 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 800261a:	e0b9      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 2:
					getMotor(2)->setSpeedMotor((double) i2c1_val);
 800261c:	2002      	movs	r0, #2
 800261e:	f7ff fdef 	bl	8002200 <_Z8getMotori>
 8002622:	4605      	mov	r5, r0
 8002624:	4b49      	ldr	r3, [pc, #292]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 8002626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fefa 	bl	8000424 <__aeabi_i2d>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	4628      	mov	r0, r5
 800263a:	f7ff fd05 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 800263e:	e0a7      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 3:
					getMotor(3)->setSpeedMotor((double) i2c1_val);
 8002640:	2003      	movs	r0, #3
 8002642:	f7ff fddd 	bl	8002200 <_Z8getMotori>
 8002646:	4605      	mov	r5, r0
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 800264a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fee8 	bl	8000424 <__aeabi_i2d>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	4628      	mov	r0, r5
 800265e:	f7ff fcf3 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002662:	e095      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 4:
					getMotor(4)->setSpeedMotor((double) i2c1_val);
 8002664:	2004      	movs	r0, #4
 8002666:	f7ff fdcb 	bl	8002200 <_Z8getMotori>
 800266a:	4605      	mov	r5, r0
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd fed6 	bl	8000424 <__aeabi_i2d>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	461a      	mov	r2, r3
 800267e:	4623      	mov	r3, r4
 8002680:	4628      	mov	r0, r5
 8002682:	f7ff fce1 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 8002686:	e083      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 5:
					getMotor(5)->setSpeedMotor((double) i2c1_val);
 8002688:	2005      	movs	r0, #5
 800268a:	f7ff fdb9 	bl	8002200 <_Z8getMotori>
 800268e:	4605      	mov	r5, r0
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 8002692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fec4 	bl	8000424 <__aeabi_i2d>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff fccf 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 80026aa:	e071      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 6:
					getMotor(6)->setSpeedMotor((double) i2c1_val);
 80026ac:	2006      	movs	r0, #6
 80026ae:	f7ff fda7 	bl	8002200 <_Z8getMotori>
 80026b2:	4605      	mov	r5, r0
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 80026b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feb2 	bl	8000424 <__aeabi_i2d>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	4628      	mov	r0, r5
 80026ca:	f7ff fcbd 	bl	8002048 <_ZN5Motor13setSpeedMotorEd>
					break;
 80026ce:	e05f      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 7:
					goDirection(FORWARD, (double) i2c1_val);
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 80026d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd fea4 	bl	8000424 <__aeabi_i2d>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fe0f 	bl	8002308 <_Z11goDirection9Directiond>
					break;
 80026ea:	e051      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 8:
					goDirection(BACKWARD, (double) i2c1_val);
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 80026ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fe96 	bl	8000424 <__aeabi_i2d>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff fe01 	bl	8002308 <_Z11goDirection9Directiond>
					break;
 8002706:	e043      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 9:
					goDirection(ROTATE_CLOCKWISE, (double) i2c1_val);
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fe88 	bl	8000424 <__aeabi_i2d>
 8002714:	4603      	mov	r3, r0
 8002716:	460c      	mov	r4, r1
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	2002      	movs	r0, #2
 800271e:	f7ff fdf3 	bl	8002308 <_Z11goDirection9Directiond>
					break;
 8002722:	e035      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				case 10:
					goDirection(ROTATE_ANTICLOCKWISE, (double) i2c1_val);
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <I2C1_EV_IRQHandler+0x304>)
 8002726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fe7a 	bl	8000424 <__aeabi_i2d>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	2003      	movs	r0, #3
 800273a:	f7ff fde5 	bl	8002308 <_Z11goDirection9Directiond>
					break;
 800273e:	e027      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
 8002740:	40005400 	.word	0x40005400
 8002744:	200000e4 	.word	0x200000e4
 8002748:	200000d8 	.word	0x200000d8
 800274c:	200000dc 	.word	0x200000dc
 8002750:	200000da 	.word	0x200000da
 8002754:	200000de 	.word	0x200000de
 8002758:	200000c0 	.word	0x200000c0
 800275c:	200000c8 	.word	0x200000c8
 8002760:	200000d0 	.word	0x200000d0
 8002764:	408f4000 	.word	0x408f4000
 8002768:	200000e0 	.word	0x200000e0
 800276c:	200000e8 	.word	0x200000e8
				case 11:
					goDirection(STOP, (double) i2c1_val);
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <I2C1_EV_IRQHandler+0x3d0>)
 8002772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fe54 	bl	8000424 <__aeabi_i2d>
 800277c:	4603      	mov	r3, r0
 800277e:	460c      	mov	r4, r1
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	2004      	movs	r0, #4
 8002786:	f7ff fdbf 	bl	8002308 <_Z11goDirection9Directiond>
					break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <I2C1_EV_IRQHandler+0x348>
				i2c_sendBuffer[2] = 0;
				i2c_sendBuffer[3] = 0;
				if(buttons[0]) i2c_sendBuffer[0] |= 1;
				if(buttons[1]) i2c_sendBuffer[0] |= 2;
				if(buttons[2]) i2c_sendBuffer[0] |= 4;
				break;
 800278e:	bf00      	nop
		I2C1->SR1;
		I2C1->SR2;
	}

	//ev2
	while ((I2C_SR1_RXNE & I2C1->SR1) == I2C_SR1_RXNE) {
 8002790:	e66d      	b.n	800246e <I2C1_EV_IRQHandler+0x26>
		}

	}

//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 8002794:	8a9b      	ldrh	r3, [r3, #20]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <I2C1_EV_IRQHandler+0x396>
		if (i2c_indexSendBuffer < I2C_MAX_SEND_BUFFER) {
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <I2C1_EV_IRQHandler+0x3d8>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d80c      	bhi.n	80027cc <I2C1_EV_IRQHandler+0x384>
			I2C1->DR = i2c_sendBuffer[i2c_indexSendBuffer++];
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <I2C1_EV_IRQHandler+0x3d8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	b2c8      	uxtb	r0, r1
 80027bc:	4918      	ldr	r1, [pc, #96]	; (8002820 <I2C1_EV_IRQHandler+0x3d8>)
 80027be:	7008      	strb	r0, [r1, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <I2C1_EV_IRQHandler+0x3dc>)
 80027c4:	5c5b      	ldrb	r3, [r3, r1]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8213      	strh	r3, [r2, #16]
 80027ca:	e7e2      	b.n	8002792 <I2C1_EV_IRQHandler+0x34a>
		} else {
			I2C1->SR1 |= I2C_SR1_AF;
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 80027d0:	8a9b      	ldrh	r3, [r3, #20]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d8:	b29b      	uxth	r3, r3
 80027da:	8293      	strh	r3, [r2, #20]
		}

	}

//ev3
	while ((I2C_SR1_TXE & I2C1->SR1) == I2C_SR1_TXE) {
 80027dc:	e7d9      	b.n	8002792 <I2C1_EV_IRQHandler+0x34a>
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}

//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 80027e0:	8a9b      	ldrh	r3, [r3, #20]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C1_EV_IRQHandler+0x3ca>
		i2c1_recv_reg_done = false;
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <I2C1_EV_IRQHandler+0x3e0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
		I2C1->SR1;
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 80027fe:	8a9b      	ldrh	r3, [r3, #20]
		I2C1->CR1 |= 0x1;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <I2C1_EV_IRQHandler+0x3d4>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	8013      	strh	r3, [r2, #0]
			I2C1->SR1 |= I2C_SR1_AF;
		}
	}

//ev4
	while ((I2C1->SR1 & I2C_SR1_STOPF) == I2C_SR1_STOPF) {
 8002810:	e7e5      	b.n	80027de <I2C1_EV_IRQHandler+0x396>
		i2c1_recv_reg_done = false;
		I2C1->SR1;
		I2C1->CR1 |= 0x1;
	}
}
 8002812:	bf00      	nop
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	200000dc 	.word	0x200000dc
 800281c:	40005400 	.word	0x40005400
 8002820:	200000de 	.word	0x200000de
 8002824:	200000e0 	.word	0x200000e0
 8002828:	200000e4 	.word	0x200000e4

0800282c <_Z26getAverageOfSimilaryValuesddd>:

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b08b      	sub	sp, #44	; 0x2c
 8002830:	af00      	add	r7, sp, #0
 8002832:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002836:	e9c7 2300 	strd	r2, r3, [r7]
	double diff1 = fabs(val1 - val2);
 800283a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002842:	f7fd fca1 	bl	8000188 <__aeabi_dsub>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	461a      	mov	r2, r3
 800284c:	623a      	str	r2, [r7, #32]
 800284e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
	double diff2 = fabs(val2 - val3);
 8002854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800285c:	f7fd fc94 	bl	8000188 <__aeabi_dsub>
 8002860:	4603      	mov	r3, r0
 8002862:	460c      	mov	r4, r1
 8002864:	461a      	mov	r2, r3
 8002866:	61ba      	str	r2, [r7, #24]
 8002868:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800286c:	61fb      	str	r3, [r7, #28]
	double diff3 = fabs(val1 - val3);
 800286e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002876:	f7fd fc87 	bl	8000188 <__aeabi_dsub>
 800287a:	4603      	mov	r3, r0
 800287c:	460c      	mov	r4, r1
 800287e:	461a      	mov	r2, r3
 8002880:	613a      	str	r2, [r7, #16]
 8002882:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002886:	617b      	str	r3, [r7, #20]
	if (diff1 < diff2 && diff1 < diff3) {
 8002888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002890:	f7fe f8a0 	bl	80009d4 <__aeabi_dcmplt>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01b      	beq.n	80028d2 <_Z26getAverageOfSimilaryValuesddd+0xa6>
 800289a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800289e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028a2:	f7fe f897 	bl	80009d4 <__aeabi_dcmplt>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d012      	beq.n	80028d2 <_Z26getAverageOfSimilaryValuesddd+0xa6>
		return (val1 + val2) / 2;
 80028ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b4:	f7fd fc6a 	bl	800018c <__adddf3>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	4618      	mov	r0, r3
 80028be:	4621      	mov	r1, r4
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028c8:	f7fd ff3c 	bl	8000744 <__aeabi_ddiv>
 80028cc:	4603      	mov	r3, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	e036      	b.n	8002940 <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else if (diff2 < diff1 && diff2 < diff3) {
 80028d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028da:	f7fe f87b 	bl	80009d4 <__aeabi_dcmplt>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <_Z26getAverageOfSimilaryValuesddd+0xf0>
 80028e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ec:	f7fe f872 	bl	80009d4 <__aeabi_dcmplt>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <_Z26getAverageOfSimilaryValuesddd+0xf0>
		return (val2 + val3) / 2;
 80028f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028fe:	f7fd fc45 	bl	800018c <__adddf3>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	4618      	mov	r0, r3
 8002908:	4621      	mov	r1, r4
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002912:	f7fd ff17 	bl	8000744 <__aeabi_ddiv>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	e011      	b.n	8002940 <_Z26getAverageOfSimilaryValuesddd+0x114>
	} else
		return (val1 + val3) / 2;
 800291c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002924:	f7fd fc32 	bl	800018c <__adddf3>
 8002928:	4603      	mov	r3, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4618      	mov	r0, r3
 800292e:	4621      	mov	r1, r4
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002938:	f7fd ff04 	bl	8000744 <__aeabi_ddiv>
 800293c:	4603      	mov	r3, r0
 800293e:	460c      	mov	r4, r1
}
 8002940:	4618      	mov	r0, r3
 8002942:	4621      	mov	r1, r4
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop

0800294c <DMA1_Channel5_IRQHandler>:

extern "C" void DMA1_Channel5_IRQHandler(void) {
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 8002952:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002956:	f7fe fa2f 	bl	8000db8 <DMA_GetFlagStatus>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8117 	beq.w	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 800296c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002970:	f7fe fa4a 	bl	8000e08 <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 8002974:	2100      	movs	r1, #0
 8002976:	488b      	ldr	r0, [pc, #556]	; (8002ba4 <DMA1_Channel5_IRQHandler+0x258>)
 8002978:	f7fe fd76 	bl	8001468 <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 800297c:	2101      	movs	r1, #1
 800297e:	4889      	ldr	r0, [pc, #548]	; (8002ba4 <DMA1_Channel5_IRQHandler+0x258>)
 8002980:	f7fe fd04 	bl	800138c <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 8002984:	2100      	movs	r1, #0
 8002986:	4888      	ldr	r0, [pc, #544]	; (8002ba8 <DMA1_Channel5_IRQHandler+0x25c>)
 8002988:	f7fe f9ce 	bl	8000d28 <DMA_Cmd>

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
 800298c:	f7ff f946 	bl	8001c1c <I2C2_getReadRegister>
 8002990:	4603      	mov	r3, r0
 8002992:	2b03      	cmp	r3, #3
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d029      	beq.n	80029f4 <DMA1_Channel5_IRQHandler+0xa8>
			for (int i = 1; i <= numberOfMotors; i++) {
 80029a0:	2301      	movs	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	f300 80f7 	bgt.w	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <DMA1_Channel5_IRQHandler+0x260>)
 80029b2:	5cd4      	ldrb	r4, [r2, r3]
 80029b4:	f7ff f90c 	bl	8001bd0 <I2C2_getDeviceAddress>
 80029b8:	4603      	mov	r3, r0
 80029ba:	429c      	cmp	r4, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d011      	beq.n	80029ec <DMA1_Channel5_IRQHandler+0xa0>
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
 80029c8:	6978      	ldr	r0, [r7, #20]
 80029ca:	f7ff fc19 	bl	8002200 <_Z8getMotori>
 80029ce:	4604      	mov	r4, r0
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff f913 	bl	8001bfc <I2C2_getRxBuffer>
 80029d6:	4603      	mov	r3, r0
 80029d8:	b21b      	sxth	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff fb8b 	bl	80020f8 <_ZN5Motor13addDeltaTicksEs>
					I2C2_clearReadRegister();
 80029e2:	f7ff f925 	bl	8001c30 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 80029e6:	f7ff f8fd 	bl	8001be4 <I2C2_clearDeviceAddress>
					break;
 80029ea:	e0d6      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e7d7      	b.n	80029a4 <DMA1_Channel5_IRQHandler+0x58>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
 80029f4:	f7ff f912 	bl	8001c1c <I2C2_getReadRegister>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d029      	beq.n	8002a5c <DMA1_Channel5_IRQHandler+0x110>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002a08:	2301      	movs	r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	f300 80c3 	bgt.w	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	4a64      	ldr	r2, [pc, #400]	; (8002bac <DMA1_Channel5_IRQHandler+0x260>)
 8002a1a:	5cd4      	ldrb	r4, [r2, r3]
 8002a1c:	f7ff f8d8 	bl	8001bd0 <I2C2_getDeviceAddress>
 8002a20:	4603      	mov	r3, r0
 8002a22:	429c      	cmp	r4, r3
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <DMA1_Channel5_IRQHandler+0x108>
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
 8002a30:	6938      	ldr	r0, [r7, #16]
 8002a32:	f7ff fbe5 	bl	8002200 <_Z8getMotori>
 8002a36:	4604      	mov	r4, r0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff f8df 	bl	8001bfc <I2C2_getRxBuffer>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff fba9 	bl	800219c <_ZN5Motor13setVoltageRawEt>
					I2C2_clearReadRegister();
 8002a4a:	f7ff f8f1 	bl	8001c30 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002a4e:	f7ff f8c9 	bl	8001be4 <I2C2_clearDeviceAddress>
					break;
 8002a52:	e0a2      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3301      	adds	r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e7d7      	b.n	8002a0c <DMA1_Channel5_IRQHandler+0xc0>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
 8002a5c:	f7ff f8de 	bl	8001c1c <I2C2_getReadRegister>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d029      	beq.n	8002ac4 <DMA1_Channel5_IRQHandler+0x178>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002a70:	2301      	movs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	f300 808f 	bgt.w	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <DMA1_Channel5_IRQHandler+0x260>)
 8002a82:	5cd4      	ldrb	r4, [r2, r3]
 8002a84:	f7ff f8a4 	bl	8001bd0 <I2C2_getDeviceAddress>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	429c      	cmp	r4, r3
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <DMA1_Channel5_IRQHandler+0x170>
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fbb1 	bl	8002200 <_Z8getMotori>
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff f8ab 	bl	8001bfc <I2C2_getRxBuffer>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7ff fb83 	bl	80021b8 <_ZN5Motor10setCurrentEt>
					I2C2_clearReadRegister();
 8002ab2:	f7ff f8bd 	bl	8001c30 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002ab6:	f7ff f895 	bl	8001be4 <I2C2_clearDeviceAddress>
					break;
 8002aba:	e06e      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e7d7      	b.n	8002a74 <DMA1_Channel5_IRQHandler+0x128>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
 8002ac4:	f7ff f8aa 	bl	8001c1c <I2C2_getReadRegister>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d028      	beq.n	8002b2a <DMA1_Channel5_IRQHandler+0x1de>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	dc5b      	bgt.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	4a31      	ldr	r2, [pc, #196]	; (8002bac <DMA1_Channel5_IRQHandler+0x260>)
 8002ae8:	5cd4      	ldrb	r4, [r2, r3]
 8002aea:	f7ff f871 	bl	8001bd0 <I2C2_getDeviceAddress>
 8002aee:	4603      	mov	r3, r0
 8002af0:	429c      	cmp	r4, r3
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d011      	beq.n	8002b22 <DMA1_Channel5_IRQHandler+0x1d6>
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f7ff fb7e 	bl	8002200 <_Z8getMotori>
 8002b04:	4604      	mov	r4, r0
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff f878 	bl	8001bfc <I2C2_getRxBuffer>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7ff fb34 	bl	8002180 <_ZN5Motor11setSpeedRawEs>
					I2C2_clearReadRegister();
 8002b18:	f7ff f88a 	bl	8001c30 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002b1c:	f7ff f862 	bl	8001be4 <I2C2_clearDeviceAddress>
					break;
 8002b20:	e03b      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	e7d8      	b.n	8002adc <DMA1_Channel5_IRQHandler+0x190>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETWHO_I_AM) {
 8002b2a:	f7ff f877 	bl	8001c1c <I2C2_getReadRegister>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2bff      	cmp	r3, #255	; 0xff
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <DMA1_Channel5_IRQHandler+0x244>
			for (int i = 1; i <= numberOfMotors; i++) {
 8002b3e:	2301      	movs	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	dc28      	bgt.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	4a17      	ldr	r2, [pc, #92]	; (8002bac <DMA1_Channel5_IRQHandler+0x260>)
 8002b4e:	5cd4      	ldrb	r4, [r2, r3]
 8002b50:	f7ff f83e 	bl	8001bd0 <I2C2_getDeviceAddress>
 8002b54:	4603      	mov	r3, r0
 8002b56:	429c      	cmp	r4, r3
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <DMA1_Channel5_IRQHandler+0x23c>
					getMotor(i)->setTestValue((int8_t) I2C2_getRxBuffer(0));
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fb4b 	bl	8002200 <_Z8getMotori>
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7ff f845 	bl	8001bfc <I2C2_getRxBuffer>
 8002b72:	4603      	mov	r3, r0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4619      	mov	r1, r3
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff fb2b 	bl	80021d4 <_ZN5Motor12setTestValueEh>
					I2C2_clearReadRegister();
 8002b7e:	f7ff f857 	bl	8001c30 <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8002b82:	f7ff f82f 	bl	8001be4 <I2C2_clearDeviceAddress>
					break;
 8002b86:	e008      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETWHO_I_AM) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	e7d8      	b.n	8002b42 <DMA1_Channel5_IRQHandler+0x1f6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else {
			I2C2_clearReadRegister();
 8002b90:	f7ff f84e 	bl	8001c30 <I2C2_clearReadRegister>
			I2C2_clearDeviceAddress();
 8002b94:	f7ff f826 	bl	8001be4 <I2C2_clearDeviceAddress>
		}

	}
}
 8002b98:	e7ff      	b.n	8002b9a <DMA1_Channel5_IRQHandler+0x24e>
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40005800 	.word	0x40005800
 8002ba8:	40026058 	.word	0x40026058
 8002bac:	080047a8 	.word	0x080047a8

08002bb0 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler() {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bba:	f7fe ff87 	bl	8001acc <TIM_GetITStatus>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <TIM2_IRQHandler+0x2e>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bd4:	f7fe ffa4 	bl	8001b20 <TIM_ClearITPendingBit>
		timePosition = true;
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <TIM2_IRQHandler+0x34>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
	}
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200000b8 	.word	0x200000b8

08002be8 <_Z9Leds_Initv>:

void Leds_Init() {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7fe fe1b 	bl	800182c <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15
			| GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_12;
 8002bf6:	f24f 0306 	movw	r3, #61446	; 0xf006
 8002bfa:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c00:	2300      	movs	r3, #0
 8002c02:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <_Z9Leds_Initv+0x38>)
 8002c12:	f7fe f9b7 	bl	8000f84 <GPIO_Init>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020400 	.word	0x40020400

08002c24 <_Z6setLedcbb>:

void setLed(char index,bool green,bool red){
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	71bb      	strb	r3, [r7, #6]
 8002c32:	4613      	mov	r3, r2
 8002c34:	717b      	strb	r3, [r7, #5]
	switch(index){
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d01d      	beq.n	8002c78 <_Z6setLedcbb+0x54>
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d032      	beq.n	8002ca6 <_Z6setLedcbb+0x82>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d000      	beq.n	8002c46 <_Z6setLedcbb+0x22>
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
	}
}
 8002c44:	e046      	b.n	8002cd4 <_Z6setLedcbb+0xb0>
}

void setLed(char index,bool green,bool red){
	switch(index){
	case 0:
		if(green)
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <_Z6setLedcbb+0x32>
			GPIOB->BSRRL = GPIO_Pin_14;
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c52:	831a      	strh	r2, [r3, #24]
 8002c54:	e003      	b.n	8002c5e <_Z6setLedcbb+0x3a>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c5c:	835a      	strh	r2, [r3, #26]
		if(red)
 8002c5e:	797b      	ldrb	r3, [r7, #5]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <_Z6setLedcbb+0x4a>
			GPIOB->BSRRL = GPIO_Pin_13;
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_13;
		break;
 8002c6c:	e032      	b.n	8002cd4 <_Z6setLedcbb+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_14;
		if(red)
			GPIOB->BSRRL = GPIO_Pin_13;
		else
			GPIOB->BSRRH = GPIO_Pin_13;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c74:	835a      	strh	r2, [r3, #26]
		break;
 8002c76:	e02d      	b.n	8002cd4 <_Z6setLedcbb+0xb0>
	case 1:
		if(green)
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <_Z6setLedcbb+0x64>
			GPIOB->BSRRL = GPIO_Pin_15;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c84:	831a      	strh	r2, [r3, #24]
 8002c86:	e003      	b.n	8002c90 <_Z6setLedcbb+0x6c>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c8e:	835a      	strh	r2, [r3, #26]
		if(red)
 8002c90:	797b      	ldrb	r3, [r7, #5]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <_Z6setLedcbb+0x7a>
			GPIOB->BSRRL = GPIO_Pin_1;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_1;
		break;
 8002c9c:	e01a      	b.n	8002cd4 <_Z6setLedcbb+0xb0>
		else
			GPIOB->BSRRH = GPIO_Pin_15;
		if(red)
			GPIOB->BSRRL = GPIO_Pin_1;
		else
			GPIOB->BSRRH = GPIO_Pin_1;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	835a      	strh	r2, [r3, #26]
		break;
 8002ca4:	e016      	b.n	8002cd4 <_Z6setLedcbb+0xb0>
	case 2:
		if(green)
 8002ca6:	79bb      	ldrb	r3, [r7, #6]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <_Z6setLedcbb+0x90>
			GPIOB->BSRRL = GPIO_Pin_2;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002cae:	2204      	movs	r2, #4
 8002cb0:	831a      	strh	r2, [r3, #24]
 8002cb2:	e002      	b.n	8002cba <_Z6setLedcbb+0x96>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	835a      	strh	r2, [r3, #26]
		if(red)
 8002cba:	797b      	ldrb	r3, [r7, #5]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <_Z6setLedcbb+0xa6>
			GPIOB->BSRRL = GPIO_Pin_12;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc6:	831a      	strh	r2, [r3, #24]
		else
			GPIOB->BSRRH = GPIO_Pin_12;
		break;
 8002cc8:	e003      	b.n	8002cd2 <_Z6setLedcbb+0xae>
		else
			GPIOB->BSRRH = GPIO_Pin_2;
		if(red)
			GPIOB->BSRRL = GPIO_Pin_12;
		else
			GPIOB->BSRRH = GPIO_Pin_12;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <_Z6setLedcbb+0xbc>)
 8002ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd0:	835a      	strh	r2, [r3, #26]
		break;
 8002cd2:	bf00      	nop
	}
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler(void) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line6) != RESET) {
 8002ce8:	2040      	movs	r0, #64	; 0x40
 8002cea:	f7fe f919 	bl	8000f20 <EXTI_GetITStatus>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <EXTI9_5_IRQHandler+0x38>
		buttons[0] = !(GPIOC->IDR & GPIO_Pin_6) && GPIO_Pin_6;
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <EXTI9_5_IRQHandler+0xac>)
 8002d00:	8a1b      	ldrh	r3, [r3, #16]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <EXTI9_5_IRQHandler+0x2c>
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	e000      	b.n	8002d12 <EXTI9_5_IRQHandler+0x2e>
 8002d10:	2200      	movs	r2, #0
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <EXTI9_5_IRQHandler+0xb0>)
 8002d14:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 8002d16:	2040      	movs	r0, #64	; 0x40
 8002d18:	f7fe f926 	bl	8000f68 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line8) != RESET) {
 8002d1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d20:	f7fe f8fe 	bl	8000f20 <EXTI_GetITStatus>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <EXTI9_5_IRQHandler+0x70>
		buttons[1] = !(GPIOC->IDR & GPIO_Pin_8) && GPIO_Pin_8;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <EXTI9_5_IRQHandler+0xac>)
 8002d36:	8a1b      	ldrh	r3, [r3, #16]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <EXTI9_5_IRQHandler+0x62>
 8002d42:	2201      	movs	r2, #1
 8002d44:	e000      	b.n	8002d48 <EXTI9_5_IRQHandler+0x64>
 8002d46:	2200      	movs	r2, #0
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <EXTI9_5_IRQHandler+0xb0>)
 8002d4a:	705a      	strb	r2, [r3, #1]
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002d4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d50:	f7fe f90a 	bl	8000f68 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(EXTI_Line9) != RESET) {
 8002d54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d58:	f7fe f8e2 	bl	8000f20 <EXTI_GetITStatus>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <EXTI9_5_IRQHandler+0xa8>
		buttons[2] = !(GPIOC->IDR & GPIO_Pin_9) && GPIO_Pin_9;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <EXTI9_5_IRQHandler+0xac>)
 8002d6e:	8a1b      	ldrh	r3, [r3, #16]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <EXTI9_5_IRQHandler+0x9a>
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	e000      	b.n	8002d80 <EXTI9_5_IRQHandler+0x9c>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <EXTI9_5_IRQHandler+0xb0>)
 8002d82:	709a      	strb	r2, [r3, #2]
		EXTI_ClearITPendingBit(EXTI_Line9);
 8002d84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d88:	f7fe f8ee 	bl	8000f68 <EXTI_ClearITPendingBit>
	}

}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40020800 	.word	0x40020800
 8002d94:	200000e8 	.word	0x200000e8

08002d98 <_Z12Buttons_Initv>:

void Buttons_Init() {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2004      	movs	r0, #4
 8002da2:	f7fe fd43 	bl	800182c <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002da6:	2101      	movs	r1, #1
 8002da8:	2001      	movs	r0, #1
 8002daa:	f7fe fd5d 	bl	8001868 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_9;
 8002dae:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002db2:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002db4:	2300      	movs	r3, #0
 8002db6:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	481d      	ldr	r0, [pc, #116]	; (8002e40 <_Z12Buttons_Initv+0xa8>)
 8002dcc:	f7fe f8da 	bl	8000f84 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 8002dd0:	2106      	movs	r1, #6
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7fe fda2 	bl	800191c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
 8002dd8:	2108      	movs	r1, #8
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7fe fd9e 	bl	800191c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
 8002de0:	2109      	movs	r1, #9
 8002de2:	2002      	movs	r0, #2
 8002de4:	f7fe fd9a 	bl	800191c <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line6;
 8002de8:	2340      	movs	r3, #64	; 0x40
 8002dea:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002dec:	2300      	movs	r3, #0
 8002dee:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002df0:	2310      	movs	r3, #16
 8002df2:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002df4:	2301      	movs	r3, #1
 8002df6:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f81e 	bl	8000e3c <EXTI_Init>

	EXTI_InitStructure.EXTI_Line = EXTI_Line8;
 8002e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e04:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f817 	bl	8000e3c <EXTI_Init>
	EXTI_InitStructure.EXTI_Line = EXTI_Line9;
 8002e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e12:	607b      	str	r3, [r7, #4]
	EXTI_Init(&EXTI_InitStructure);
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f810 	bl	8000e3c <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8002e1c:	2317      	movs	r3, #23
 8002e1e:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fe1f 	bl	8000a74 <NVIC_Init>

}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40020800 	.word	0x40020800

08002e44 <_Z15InitializeTimerv>:

void InitializeTimer() {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7fe fd29 	bl	80018a4 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //nastavit 40 hz
	timerInitStructure.TIM_Prescaler = 999;
 8002e52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002e56:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 49;
 8002e5c:	2331      	movs	r3, #49	; 0x31
 8002e5e:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002e60:	2300      	movs	r3, #0
 8002e62:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e6c:	f7fe fd98 	bl	80019a0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8002e70:	2101      	movs	r1, #1
 8002e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e76:	f7fe fde5 	bl	8001a44 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e82:	f7fe fdff 	bl	8001a84 <TIM_ITConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002e86:	231c      	movs	r3, #28
 8002e88:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8002e96:	463b      	mov	r3, r7
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fdeb 	bl	8000a74 <NVIC_Init>
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop

08002ea8 <main>:

double lastDistance[6];
int main(void) {
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	b099      	sub	sp, #100	; 0x64
 8002eac:	af02      	add	r7, sp, #8
	Leds_Init();
 8002eae:	f7ff fe9b 	bl	8002be8 <_Z9Leds_Initv>
	Buttons_Init();
 8002eb2:	f7ff ff71 	bl	8002d98 <_Z12Buttons_Initv>
	I2C2_Init();
 8002eb6:	f7fe fec7 	bl	8001c48 <I2C2_Init>
	I2C1_Init();
 8002eba:	f7ff f803 	bl	8001ec4 <I2C1_Init>
	InitializeTimer();
 8002ebe:	f7ff ffc1 	bl	8002e44 <_Z15InitializeTimerv>
	setLed(1,true,true);
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7ff feac 	bl	8002c24 <_Z6setLedcbb>
	while (1) {
		if (timePosition) {
 8002ecc:	4b9c      	ldr	r3, [pc, #624]	; (8003140 <main+0x298>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80f9 	beq.w	80030ca <main+0x222>
			double speeds[6];
			for (int i = 0; i < 6; i++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	657b      	str	r3, [r7, #84]	; 0x54
 8002edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	dc2c      	bgt.n	8002f3c <main+0x94>
				speeds[i] = (getMotor(i)->getDistance() - lastDistance[i]);
 8002ee2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002ee4:	f7ff f98c 	bl	8002200 <_Z8getMotori>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f92c 	bl	8002148 <_ZN5Motor11getDistanceEv>
 8002ef0:	4a94      	ldr	r2, [pc, #592]	; (8003144 <main+0x29c>)
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	cb18      	ldmia	r3, {r3, r4}
 8002efa:	461a      	mov	r2, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	f7fd f943 	bl	8000188 <__aeabi_dsub>
 8002f02:	4603      	mov	r3, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f08:	00d2      	lsls	r2, r2, #3
 8002f0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002f0e:	440a      	add	r2, r1
 8002f10:	3a58      	subs	r2, #88	; 0x58
 8002f12:	e882 0018 	stmia.w	r2, {r3, r4}
				lastDistance[i] = getMotor(i)->getDistance();
 8002f16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f18:	f7ff f972 	bl	8002200 <_Z8getMotori>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f912 	bl	8002148 <_ZN5Motor11getDistanceEv>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4986      	ldr	r1, [pc, #536]	; (8003144 <main+0x29c>)
 8002f2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f2c:	00d2      	lsls	r2, r2, #3
 8002f2e:	440a      	add	r2, r1
 8002f30:	e882 0018 	stmia.w	r2, {r3, r4}
	InitializeTimer();
	setLed(1,true,true);
	while (1) {
		if (timePosition) {
			double speeds[6];
			for (int i = 0; i < 6; i++) {
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	3301      	adds	r3, #1
 8002f38:	657b      	str	r3, [r7, #84]	; 0x54
 8002f3a:	e7cf      	b.n	8002edc <main+0x34>
				speeds[i] = (getMotor(i)->getDistance() - lastDistance[i]);
				lastDistance[i] = getMotor(i)->getDistance();
			}

			double vL = getAverageOfSimilaryValues(speeds[1], speeds[2],
 8002f3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f40:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002f44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
					speeds[3]);
 8002f48:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002f4c:	462a      	mov	r2, r5
 8002f4e:	4633      	mov	r3, r6
 8002f50:	f7ff fc6c 	bl	800282c <_Z26getAverageOfSimilaryValuesddd>
 8002f54:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			double vR = getAverageOfSimilaryValues(speeds[4], speeds[5],
 8002f58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f5c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002f60:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
					speeds[6]);
 8002f64:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002f68:	462a      	mov	r2, r5
 8002f6a:	4633      	mov	r3, r6
 8002f6c:	f7ff fc5e 	bl	800282c <_Z26getAverageOfSimilaryValuesddd>
 8002f70:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			double vT = (vL + vR) / 2;
 8002f74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f78:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f7c:	f7fd f906 	bl	800018c <__adddf3>
 8002f80:	4603      	mov	r3, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	4618      	mov	r0, r3
 8002f86:	4621      	mov	r1, r4
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f90:	f7fd fbd8 	bl	8000744 <__aeabi_ddiv>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			double omegaT = (vR - vL) / lengthBetweenLeftAndRightWheel;
 8002f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002fa4:	f7fd f8f0 	bl	8000188 <__aeabi_dsub>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4618      	mov	r0, r3
 8002fae:	4621      	mov	r1, r4
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <main+0x2a0>)
 8002fb6:	f7fd fbc5 	bl	8000744 <__aeabi_ddiv>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			angle += omegaT;
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <main+0x2a4>)
 8002fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fcc:	f7fd f8de 	bl	800018c <__adddf3>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	; (800314c <main+0x2a4>)
 8002fd6:	e882 0018 	stmia.w	r2, {r3, r4}
			if (angle > 2 * M_PI)
 8002fda:	4b5c      	ldr	r3, [pc, #368]	; (800314c <main+0x2a4>)
 8002fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	a354      	add	r3, pc, #336	; (adr r3, 8003138 <main+0x290>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fd11 	bl	8000a10 <__aeabi_dcmpgt>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <main+0x150>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	b2e3      	uxtb	r3, r4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <main+0x172>
				angle -= 2 * M_PI;
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <main+0x2a4>)
 8003000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003004:	a34c      	add	r3, pc, #304	; (adr r3, 8003138 <main+0x290>)
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f7fd f8bd 	bl	8000188 <__aeabi_dsub>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	4a4e      	ldr	r2, [pc, #312]	; (800314c <main+0x2a4>)
 8003014:	e882 0018 	stmia.w	r2, {r3, r4}
 8003018:	e01f      	b.n	800305a <main+0x1b2>
			else if (angle < 0)
 800301a:	4b4c      	ldr	r3, [pc, #304]	; (800314c <main+0x2a4>)
 800301c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003020:	2301      	movs	r3, #1
 8003022:	461c      	mov	r4, r3
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	f7fd fcd2 	bl	80009d4 <__aeabi_dcmplt>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <main+0x192>
 8003036:	2300      	movs	r3, #0
 8003038:	461c      	mov	r4, r3
 800303a:	b2e3      	uxtb	r3, r4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <main+0x1b2>
				angle += 2 * M_PI;
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <main+0x2a4>)
 8003042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003046:	a33c      	add	r3, pc, #240	; (adr r3, 8003138 <main+0x290>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd f89e 	bl	800018c <__adddf3>
 8003050:	4603      	mov	r3, r0
 8003052:	460c      	mov	r4, r1
 8003054:	4a3d      	ldr	r2, [pc, #244]	; (800314c <main+0x2a4>)
 8003056:	e882 0018 	stmia.w	r2, {r3, r4}
			x += vT * cos(angle);
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <main+0x2a4>)
 800305c:	cb18      	ldmia	r3, {r3, r4}
 800305e:	4618      	mov	r0, r3
 8003060:	4621      	mov	r1, r4
 8003062:	f000 f9f3 	bl	800344c <cos>
 8003066:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800306a:	f7fd fa41 	bl	80004f0 <__aeabi_dmul>
 800306e:	4603      	mov	r3, r0
 8003070:	460c      	mov	r4, r1
 8003072:	4625      	mov	r5, r4
 8003074:	461c      	mov	r4, r3
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <main+0x2a8>)
 8003078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800307c:	4622      	mov	r2, r4
 800307e:	462b      	mov	r3, r5
 8003080:	f7fd f884 	bl	800018c <__adddf3>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	4a31      	ldr	r2, [pc, #196]	; (8003150 <main+0x2a8>)
 800308a:	e882 0018 	stmia.w	r2, {r3, r4}
			y += vT * sin(angle);
 800308e:	4b2f      	ldr	r3, [pc, #188]	; (800314c <main+0x2a4>)
 8003090:	cb18      	ldmia	r3, {r3, r4}
 8003092:	4618      	mov	r0, r3
 8003094:	4621      	mov	r1, r4
 8003096:	f000 fa0f 	bl	80034b8 <sin>
 800309a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800309e:	f7fd fa27 	bl	80004f0 <__aeabi_dmul>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	4625      	mov	r5, r4
 80030a8:	461c      	mov	r4, r3
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <main+0x2ac>)
 80030ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b0:	4622      	mov	r2, r4
 80030b2:	462b      	mov	r3, r5
 80030b4:	f7fd f86a 	bl	800018c <__adddf3>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <main+0x2ac>)
 80030be:	e882 0018 	stmia.w	r2, {r3, r4}
			timePosition = false;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <main+0x298>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e700      	b.n	8002ecc <main+0x24>
		} else {
			getMotor(1)->DMADeltaTicksInvoke();
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff f898 	bl	8002200 <_Z8getMotori>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f800 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(2)->DMADeltaTicksInvoke();
 80030d8:	2002      	movs	r0, #2
 80030da:	f7ff f891 	bl	8002200 <_Z8getMotori>
 80030de:	4603      	mov	r3, r0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fff9 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(3)->DMADeltaTicksInvoke();
 80030e6:	2003      	movs	r0, #3
 80030e8:	f7ff f88a 	bl	8002200 <_Z8getMotori>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fff2 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(4)->DMADeltaTicksInvoke();
 80030f4:	2004      	movs	r0, #4
 80030f6:	f7ff f883 	bl	8002200 <_Z8getMotori>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe ffeb 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(5)->DMADeltaTicksInvoke();
 8003102:	2005      	movs	r0, #5
 8003104:	f7ff f87c 	bl	8002200 <_Z8getMotori>
 8003108:	4603      	mov	r3, r0
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe ffe4 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			getMotor(6)->DMADeltaTicksInvoke();
 8003110:	2006      	movs	r0, #6
 8003112:	f7ff f875 	bl	8002200 <_Z8getMotori>
 8003116:	4603      	mov	r3, r0
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe ffdd 	bl	80020d8 <_ZN5Motor19DMADeltaTicksInvokeEv>
			for (int i = 0; i < 1000; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003128:	f6bf aed0 	bge.w	8002ecc <main+0x24>
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	3301      	adds	r3, #1
 8003130:	653b      	str	r3, [r7, #80]	; 0x50
 8003132:	e7f6      	b.n	8003122 <main+0x27a>
 8003134:	f3af 8000 	nop.w
 8003138:	54442d18 	.word	0x54442d18
 800313c:	401921fb 	.word	0x401921fb
 8003140:	200000b8 	.word	0x200000b8
 8003144:	200000f0 	.word	0x200000f0
 8003148:	406f4000 	.word	0x406f4000
 800314c:	200000d0 	.word	0x200000d0
 8003150:	200000c0 	.word	0x200000c0
 8003154:	200000c8 	.word	0x200000c8

08003158 <_Z41__static_initialization_and_destruction_0ii>:
				;
		}
	}
}
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d146      	bne.n	80031f6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800316e:	4293      	cmp	r3, r2
 8003170:	d141      	bne.n	80031f6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
#include <math.h>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
 8003172:	2014      	movs	r0, #20
 8003174:	f000 f94e 	bl	8003414 <_Znwj>
 8003178:	4603      	mov	r3, r0
 800317a:	461c      	mov	r4, r3
 800317c:	2102      	movs	r1, #2
 800317e:	4620      	mov	r0, r4
 8003180:	f7fe ff18 	bl	8001fb4 <_ZN5MotorC1Eh>
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003186:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 8003188:	2014      	movs	r0, #20
 800318a:	f000 f943 	bl	8003414 <_Znwj>
 800318e:	4603      	mov	r3, r0
 8003190:	461c      	mov	r4, r3
 8003192:	2104      	movs	r1, #4
 8003194:	4620      	mov	r0, r4
 8003196:	f7fe ff0d 	bl	8001fb4 <_ZN5MotorC1Eh>
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800319c:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 800319e:	2014      	movs	r0, #20
 80031a0:	f000 f938 	bl	8003414 <_Znwj>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461c      	mov	r4, r3
 80031a8:	2106      	movs	r1, #6
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7fe ff02 	bl	8001fb4 <_ZN5MotorC1Eh>
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80031b2:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 80031b4:	2014      	movs	r0, #20
 80031b6:	f000 f92d 	bl	8003414 <_Znwj>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461c      	mov	r4, r3
 80031be:	2108      	movs	r1, #8
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7fe fef7 	bl	8001fb4 <_ZN5MotorC1Eh>
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80031c8:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 80031ca:	2014      	movs	r0, #20
 80031cc:	f000 f922 	bl	8003414 <_Znwj>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461c      	mov	r4, r3
 80031d4:	210a      	movs	r1, #10
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7fe feec 	bl	8001fb4 <_ZN5MotorC1Eh>
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80031de:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 80031e0:	2014      	movs	r0, #20
 80031e2:	f000 f917 	bl	8003414 <_Znwj>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461c      	mov	r4, r3
 80031ea:	210c      	movs	r1, #12
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7fe fee1 	bl	8001fb4 <_ZN5MotorC1Eh>
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80031f4:	601c      	str	r4, [r3, #0]
			getMotor(6)->DMADeltaTicksInvoke();
			for (int i = 0; i < 1000; i++)
				;
		}
	}
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	bf00      	nop
 8003200:	200000a0 	.word	0x200000a0
 8003204:	200000a4 	.word	0x200000a4
 8003208:	200000a8 	.word	0x200000a8
 800320c:	200000ac 	.word	0x200000ac
 8003210:	200000b0 	.word	0x200000b0
 8003214:	200000b4 	.word	0x200000b4

08003218 <_GLOBAL__sub_I_motor1>:
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
 800321c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff ff99 	bl	8003158 <_Z41__static_initialization_and_destruction_0ii>
 8003226:	bd80      	pop	{r7, pc}

08003228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800322c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800322e:	e003      	b.n	8003238 <LoopCopyDataInit>

08003230 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8003232:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003234:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003236:	3104      	adds	r1, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003238:	480b      	ldr	r0, [pc, #44]	; (8003268 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 800323c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800323e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003240:	d3f6      	bcc.n	8003230 <CopyDataInit>
  ldr r2, =_sbss
 8003242:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8003244:	e002      	b.n	800324c <LoopFillZerobss>

08003246 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003248:	f842 3b04 	str.w	r3, [r2], #4

0800324c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800324e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003250:	d3f9      	bcc.n	8003246 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003252:	f000 f841 	bl	80032d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003256:	f001 f93b 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800325a:	f7ff fe25 	bl	8002ea8 <main>
  bx lr
 800325e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003260:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8003264:	08004998 	.word	0x08004998
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800326c:	20000080 	.word	0x20000080
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003270:	20000080 	.word	0x20000080
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003274:	2000015c 	.word	0x2000015c

08003278 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC1_IRQHandler>
	...

0800327c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800328c:	e7fe      	b.n	800328c <HardFault_Handler+0x4>
 800328e:	bf00      	nop

08003290 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003294:	e7fe      	b.n	8003294 <MemManage_Handler+0x4>
 8003296:	bf00      	nop

08003298 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800329c:	e7fe      	b.n	800329c <BusFault_Handler+0x4>
 800329e:	bf00      	nop

080032a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80032a4:	e7fe      	b.n	80032a4 <UsageFault_Handler+0x4>
 80032a6:	bf00      	nop

080032a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <SystemInit+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <SystemInit+0x5c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80032e8:	4912      	ldr	r1, [pc, #72]	; (8003334 <SystemInit+0x5c>)
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <SystemInit+0x5c>)
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <SystemInit+0x60>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <SystemInit+0x5c>)
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <SystemInit+0x5c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80032fe:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8003302:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <SystemInit+0x5c>)
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <SystemInit+0x5c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <SystemInit+0x5c>)
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <SystemInit+0x5c>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800331a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SystemInit+0x5c>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8003322:	f000 f80d 	bl	8003340 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <SystemInit+0x64>)
 8003328:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332c:	609a      	str	r2, [r3, #8]
#endif
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	88ffc00c 	.word	0x88ffc00c
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
  __IO uint32_t  MSIStatus = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  if ((RCC->CR & RCC_CR_MSIRDY) != RESET)
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <SetSysClock+0xc8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <SetSysClock+0x1c>
  {
    MSIStatus = (uint32_t)0x01;
 8003356:	2301      	movs	r3, #1
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	e001      	b.n	8003360 <SetSysClock+0x20>
  }
  else
  {
    MSIStatus = (uint32_t)0x00;
 800335c:	2300      	movs	r3, #0
 800335e:	607b      	str	r3, [r7, #4]
  }
   if (MSIStatus == (uint32_t)0x01)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d14b      	bne.n	80033fe <SetSysClock+0xbe>
   {
    /* Flash 0 wait state */
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8003366:	4a29      	ldr	r2, [pc, #164]	; (800340c <SetSysClock+0xcc>)
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <SetSysClock+0xcc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6013      	str	r3, [r2, #0]
    
    /* Disable Prefetch Buffer */
    FLASH->ACR &= ~FLASH_ACR_PRFTEN;
 8003372:	4a26      	ldr	r2, [pc, #152]	; (800340c <SetSysClock+0xcc>)
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <SetSysClock+0xcc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0302 	bic.w	r3, r3, #2
 800337c:	6013      	str	r3, [r2, #0]

    /* Disable 64-bit access */
    FLASH->ACR &= ~FLASH_ACR_ACC64;
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <SetSysClock+0xcc>)
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <SetSysClock+0xcc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <SetSysClock+0xc8>)
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <SetSysClock+0xc8>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 2 (1.5 V) */
    PWR->CR = PWR_CR_VOS_1;
 8003396:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <SetSysClock+0xd0>)
 8003398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800339c:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800339e:	bf00      	nop
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <SetSysClock+0xd0>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <SetSysClock+0x60>
    {
    }
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <SetSysClock+0xc8>)
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <SetSysClock+0xc8>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <SetSysClock+0xc8>)
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <SetSysClock+0xc8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80033bc:	4a12      	ldr	r2, [pc, #72]	; (8003408 <SetSysClock+0xc8>)
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <SetSysClock+0xc8>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	6093      	str	r3, [r2, #8]
  
    RCC->ICSCR &= (uint32_t)((uint32_t)~(RCC_ICSCR_MSIRANGE));
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <SetSysClock+0xc8>)
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <SetSysClock+0xc8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80033ce:	6053      	str	r3, [r2, #4]
    RCC->ICSCR |= (uint32_t)RCC_ICSCR_MSIRANGE_5;
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <SetSysClock+0xc8>)
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <SetSysClock+0xc8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80033da:	6053      	str	r3, [r2, #4]

    /* Select MSI as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <SetSysClock+0xc8>)
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <SetSysClock+0xc8>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <SetSysClock+0xc8>)
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <SetSysClock+0xc8>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	6093      	str	r3, [r2, #8]

    /* Wait till MSI is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_MSI)
 80033f0:	bf00      	nop
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SetSysClock+0xc8>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <SetSysClock+0xb2>
  else
  {
    /* If MSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40023800 	.word	0x40023800
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40007000 	.word	0x40007000

08003414 <_Znwj>:
 8003414:	b510      	push	{r4, lr}
 8003416:	2800      	cmp	r0, #0
 8003418:	bf14      	ite	ne
 800341a:	4604      	movne	r4, r0
 800341c:	2401      	moveq	r4, #1
 800341e:	4620      	mov	r0, r4
 8003420:	f001 f87c 	bl	800451c <malloc>
 8003424:	b930      	cbnz	r0, 8003434 <_Znwj+0x20>
 8003426:	f000 f809 	bl	800343c <_ZSt15get_new_handlerv>
 800342a:	b908      	cbnz	r0, 8003430 <_Znwj+0x1c>
 800342c:	f001 f849 	bl	80044c2 <abort>
 8003430:	4780      	blx	r0
 8003432:	e7f4      	b.n	800341e <_Znwj+0xa>
 8003434:	bd10      	pop	{r4, pc}

08003436 <_ZdlPv>:
 8003436:	f001 b879 	b.w	800452c <free>
	...

0800343c <_ZSt15get_new_handlerv>:
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <_ZSt15get_new_handlerv+0xc>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	f3bf 8f5f 	dmb	sy
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000120 	.word	0x20000120

0800344c <cos>:
 800344c:	b530      	push	{r4, r5, lr}
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <cos+0x64>)
 8003450:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003454:	4293      	cmp	r3, r2
 8003456:	b087      	sub	sp, #28
 8003458:	dc02      	bgt.n	8003460 <cos+0x14>
 800345a:	2200      	movs	r2, #0
 800345c:	2300      	movs	r3, #0
 800345e:	e015      	b.n	800348c <cos+0x40>
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <cos+0x68>)
 8003462:	4293      	cmp	r3, r2
 8003464:	dd04      	ble.n	8003470 <cos+0x24>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	f7fc fe8d 	bl	8000188 <__aeabi_dsub>
 800346e:	e01d      	b.n	80034ac <cos+0x60>
 8003470:	aa02      	add	r2, sp, #8
 8003472:	f000 f85d 	bl	8003530 <__ieee754_rem_pio2>
 8003476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800347a:	f000 0403 	and.w	r4, r0, #3
 800347e:	2c01      	cmp	r4, #1
 8003480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003484:	d005      	beq.n	8003492 <cos+0x46>
 8003486:	2c02      	cmp	r4, #2
 8003488:	d007      	beq.n	800349a <cos+0x4e>
 800348a:	b95c      	cbnz	r4, 80034a4 <cos+0x58>
 800348c:	f000 fa40 	bl	8003910 <__kernel_cos>
 8003490:	e00c      	b.n	80034ac <cos+0x60>
 8003492:	9400      	str	r4, [sp, #0]
 8003494:	f000 fe68 	bl	8004168 <__kernel_sin>
 8003498:	e001      	b.n	800349e <cos+0x52>
 800349a:	f000 fa39 	bl	8003910 <__kernel_cos>
 800349e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80034a2:	e003      	b.n	80034ac <cos+0x60>
 80034a4:	2401      	movs	r4, #1
 80034a6:	9400      	str	r4, [sp, #0]
 80034a8:	f000 fe5e 	bl	8004168 <__kernel_sin>
 80034ac:	b007      	add	sp, #28
 80034ae:	bd30      	pop	{r4, r5, pc}
 80034b0:	3fe921fb 	.word	0x3fe921fb
 80034b4:	7fefffff 	.word	0x7fefffff

080034b8 <sin>:
 80034b8:	b530      	push	{r4, r5, lr}
 80034ba:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <sin+0x6c>)
 80034bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80034c0:	4293      	cmp	r3, r2
 80034c2:	b087      	sub	sp, #28
 80034c4:	dc04      	bgt.n	80034d0 <sin+0x18>
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2300      	movs	r3, #0
 80034ce:	e017      	b.n	8003500 <sin+0x48>
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <sin+0x70>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	dd04      	ble.n	80034e0 <sin+0x28>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	f7fc fe55 	bl	8000188 <__aeabi_dsub>
 80034de:	e01e      	b.n	800351e <sin+0x66>
 80034e0:	aa02      	add	r2, sp, #8
 80034e2:	f000 f825 	bl	8003530 <__ieee754_rem_pio2>
 80034e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034ea:	f000 0403 	and.w	r4, r0, #3
 80034ee:	2c01      	cmp	r4, #1
 80034f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034f4:	d007      	beq.n	8003506 <sin+0x4e>
 80034f6:	2c02      	cmp	r4, #2
 80034f8:	d008      	beq.n	800350c <sin+0x54>
 80034fa:	b964      	cbnz	r4, 8003516 <sin+0x5e>
 80034fc:	2401      	movs	r4, #1
 80034fe:	9400      	str	r4, [sp, #0]
 8003500:	f000 fe32 	bl	8004168 <__kernel_sin>
 8003504:	e00b      	b.n	800351e <sin+0x66>
 8003506:	f000 fa03 	bl	8003910 <__kernel_cos>
 800350a:	e008      	b.n	800351e <sin+0x66>
 800350c:	2401      	movs	r4, #1
 800350e:	9400      	str	r4, [sp, #0]
 8003510:	f000 fe2a 	bl	8004168 <__kernel_sin>
 8003514:	e001      	b.n	800351a <sin+0x62>
 8003516:	f000 f9fb 	bl	8003910 <__kernel_cos>
 800351a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800351e:	b007      	add	sp, #28
 8003520:	bd30      	pop	{r4, r5, pc}
 8003522:	bf00      	nop
 8003524:	3fe921fb 	.word	0x3fe921fb
 8003528:	7fefffff 	.word	0x7fefffff
 800352c:	00000000 	.word	0x00000000

08003530 <__ieee754_rem_pio2>:
 8003530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003534:	4614      	mov	r4, r2
 8003536:	4ac2      	ldr	r2, [pc, #776]	; (8003840 <__ieee754_rem_pio2+0x310>)
 8003538:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800353c:	4592      	cmp	sl, r2
 800353e:	b08d      	sub	sp, #52	; 0x34
 8003540:	468e      	mov	lr, r1
 8003542:	460d      	mov	r5, r1
 8003544:	dc06      	bgt.n	8003554 <__ieee754_rem_pio2+0x24>
 8003546:	2200      	movs	r2, #0
 8003548:	2300      	movs	r3, #0
 800354a:	e9c4 0100 	strd	r0, r1, [r4]
 800354e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003552:	e157      	b.n	8003804 <__ieee754_rem_pio2+0x2d4>
 8003554:	4abb      	ldr	r2, [pc, #748]	; (8003844 <__ieee754_rem_pio2+0x314>)
 8003556:	4592      	cmp	sl, r2
 8003558:	dc6e      	bgt.n	8003638 <__ieee754_rem_pio2+0x108>
 800355a:	a3ab      	add	r3, pc, #684	; (adr r3, 8003808 <__ieee754_rem_pio2+0x2d8>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	2900      	cmp	r1, #0
 8003562:	4db9      	ldr	r5, [pc, #740]	; (8003848 <__ieee754_rem_pio2+0x318>)
 8003564:	dd33      	ble.n	80035ce <__ieee754_rem_pio2+0x9e>
 8003566:	f7fc fe0f 	bl	8000188 <__aeabi_dsub>
 800356a:	45aa      	cmp	sl, r5
 800356c:	4606      	mov	r6, r0
 800356e:	460f      	mov	r7, r1
 8003570:	d010      	beq.n	8003594 <__ieee754_rem_pio2+0x64>
 8003572:	a3a7      	add	r3, pc, #668	; (adr r3, 8003810 <__ieee754_rem_pio2+0x2e0>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fc fe06 	bl	8000188 <__aeabi_dsub>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4630      	mov	r0, r6
 8003582:	e9c4 2300 	strd	r2, r3, [r4]
 8003586:	4639      	mov	r1, r7
 8003588:	f7fc fdfe 	bl	8000188 <__aeabi_dsub>
 800358c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003810 <__ieee754_rem_pio2+0x2e0>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	e016      	b.n	80035c2 <__ieee754_rem_pio2+0x92>
 8003594:	a3a0      	add	r3, pc, #640	; (adr r3, 8003818 <__ieee754_rem_pio2+0x2e8>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fc fdf5 	bl	8000188 <__aeabi_dsub>
 800359e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003820 <__ieee754_rem_pio2+0x2f0>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	4606      	mov	r6, r0
 80035a6:	460f      	mov	r7, r1
 80035a8:	f7fc fdee 	bl	8000188 <__aeabi_dsub>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4630      	mov	r0, r6
 80035b2:	e9c4 2300 	strd	r2, r3, [r4]
 80035b6:	4639      	mov	r1, r7
 80035b8:	f7fc fde6 	bl	8000188 <__aeabi_dsub>
 80035bc:	a398      	add	r3, pc, #608	; (adr r3, 8003820 <__ieee754_rem_pio2+0x2f0>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc fde1 	bl	8000188 <__aeabi_dsub>
 80035c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035ca:	2001      	movs	r0, #1
 80035cc:	e196      	b.n	80038fc <__ieee754_rem_pio2+0x3cc>
 80035ce:	f7fc fddd 	bl	800018c <__adddf3>
 80035d2:	45aa      	cmp	sl, r5
 80035d4:	4606      	mov	r6, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	d010      	beq.n	80035fc <__ieee754_rem_pio2+0xcc>
 80035da:	a38d      	add	r3, pc, #564	; (adr r3, 8003810 <__ieee754_rem_pio2+0x2e0>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fc fdd4 	bl	800018c <__adddf3>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4630      	mov	r0, r6
 80035ea:	e9c4 2300 	strd	r2, r3, [r4]
 80035ee:	4639      	mov	r1, r7
 80035f0:	f7fc fdca 	bl	8000188 <__aeabi_dsub>
 80035f4:	a386      	add	r3, pc, #536	; (adr r3, 8003810 <__ieee754_rem_pio2+0x2e0>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	e016      	b.n	800362a <__ieee754_rem_pio2+0xfa>
 80035fc:	a386      	add	r3, pc, #536	; (adr r3, 8003818 <__ieee754_rem_pio2+0x2e8>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc fdc3 	bl	800018c <__adddf3>
 8003606:	a386      	add	r3, pc, #536	; (adr r3, 8003820 <__ieee754_rem_pio2+0x2f0>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	4606      	mov	r6, r0
 800360e:	460f      	mov	r7, r1
 8003610:	f7fc fdbc 	bl	800018c <__adddf3>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4630      	mov	r0, r6
 800361a:	e9c4 2300 	strd	r2, r3, [r4]
 800361e:	4639      	mov	r1, r7
 8003620:	f7fc fdb2 	bl	8000188 <__aeabi_dsub>
 8003624:	a37e      	add	r3, pc, #504	; (adr r3, 8003820 <__ieee754_rem_pio2+0x2f0>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc fdaf 	bl	800018c <__adddf3>
 800362e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003632:	f04f 30ff 	mov.w	r0, #4294967295
 8003636:	e161      	b.n	80038fc <__ieee754_rem_pio2+0x3cc>
 8003638:	4a84      	ldr	r2, [pc, #528]	; (800384c <__ieee754_rem_pio2+0x31c>)
 800363a:	4592      	cmp	sl, r2
 800363c:	f300 80d7 	bgt.w	80037ee <__ieee754_rem_pio2+0x2be>
 8003640:	f000 fe44 	bl	80042cc <fabs>
 8003644:	a378      	add	r3, pc, #480	; (adr r3, 8003828 <__ieee754_rem_pio2+0x2f8>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	4606      	mov	r6, r0
 800364c:	460f      	mov	r7, r1
 800364e:	f7fc ff4f 	bl	80004f0 <__aeabi_dmul>
 8003652:	2200      	movs	r2, #0
 8003654:	4b7e      	ldr	r3, [pc, #504]	; (8003850 <__ieee754_rem_pio2+0x320>)
 8003656:	f7fc fd99 	bl	800018c <__adddf3>
 800365a:	f7fd f9e3 	bl	8000a24 <__aeabi_d2iz>
 800365e:	4683      	mov	fp, r0
 8003660:	f7fc fee0 	bl	8000424 <__aeabi_i2d>
 8003664:	a368      	add	r3, pc, #416	; (adr r3, 8003808 <__ieee754_rem_pio2+0x2d8>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800366e:	f7fc ff3f 	bl	80004f0 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4630      	mov	r0, r6
 8003678:	4639      	mov	r1, r7
 800367a:	f7fc fd85 	bl	8000188 <__aeabi_dsub>
 800367e:	a364      	add	r3, pc, #400	; (adr r3, 8003810 <__ieee754_rem_pio2+0x2e0>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	4606      	mov	r6, r0
 8003686:	460f      	mov	r7, r1
 8003688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800368c:	f7fc ff30 	bl	80004f0 <__aeabi_dmul>
 8003690:	f1bb 0f1f 	cmp.w	fp, #31
 8003694:	4680      	mov	r8, r0
 8003696:	4689      	mov	r9, r1
 8003698:	dc06      	bgt.n	80036a8 <__ieee754_rem_pio2+0x178>
 800369a:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <__ieee754_rem_pio2+0x324>)
 800369c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	459a      	cmp	sl, r3
 80036a6:	d176      	bne.n	8003796 <__ieee754_rem_pio2+0x266>
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	4630      	mov	r0, r6
 80036ae:	4639      	mov	r1, r7
 80036b0:	f7fc fd6a 	bl	8000188 <__aeabi_dsub>
 80036b4:	460b      	mov	r3, r1
 80036b6:	4602      	mov	r2, r0
 80036b8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80036bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80036c0:	ebc1 010a 	rsb	r1, r1, sl
 80036c4:	2910      	cmp	r1, #16
 80036c6:	e9c4 2300 	strd	r2, r3, [r4]
 80036ca:	dd6f      	ble.n	80037ac <__ieee754_rem_pio2+0x27c>
 80036cc:	a352      	add	r3, pc, #328	; (adr r3, 8003818 <__ieee754_rem_pio2+0x2e8>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036d6:	f7fc ff0b 	bl	80004f0 <__aeabi_dmul>
 80036da:	4680      	mov	r8, r0
 80036dc:	4689      	mov	r9, r1
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4630      	mov	r0, r6
 80036e4:	4639      	mov	r1, r7
 80036e6:	f7fc fd4f 	bl	8000188 <__aeabi_dsub>
 80036ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4630      	mov	r0, r6
 80036f4:	4639      	mov	r1, r7
 80036f6:	f7fc fd47 	bl	8000188 <__aeabi_dsub>
 80036fa:	4642      	mov	r2, r8
 80036fc:	464b      	mov	r3, r9
 80036fe:	f7fc fd43 	bl	8000188 <__aeabi_dsub>
 8003702:	a347      	add	r3, pc, #284	; (adr r3, 8003820 <__ieee754_rem_pio2+0x2f0>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	4606      	mov	r6, r0
 800370a:	460f      	mov	r7, r1
 800370c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003710:	f7fc feee 	bl	80004f0 <__aeabi_dmul>
 8003714:	4632      	mov	r2, r6
 8003716:	463b      	mov	r3, r7
 8003718:	f7fc fd36 	bl	8000188 <__aeabi_dsub>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4680      	mov	r8, r0
 8003722:	4689      	mov	r9, r1
 8003724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003728:	f7fc fd2e 	bl	8000188 <__aeabi_dsub>
 800372c:	460b      	mov	r3, r1
 800372e:	4602      	mov	r2, r0
 8003730:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003734:	ebc1 0a0a 	rsb	sl, r1, sl
 8003738:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800373c:	e9c4 2300 	strd	r2, r3, [r4]
 8003740:	dd32      	ble.n	80037a8 <__ieee754_rem_pio2+0x278>
 8003742:	a33b      	add	r3, pc, #236	; (adr r3, 8003830 <__ieee754_rem_pio2+0x300>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800374c:	f7fc fed0 	bl	80004f0 <__aeabi_dmul>
 8003750:	4680      	mov	r8, r0
 8003752:	4689      	mov	r9, r1
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800375c:	f7fc fd14 	bl	8000188 <__aeabi_dsub>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4606      	mov	r6, r0
 8003766:	460f      	mov	r7, r1
 8003768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800376c:	f7fc fd0c 	bl	8000188 <__aeabi_dsub>
 8003770:	4642      	mov	r2, r8
 8003772:	464b      	mov	r3, r9
 8003774:	f7fc fd08 	bl	8000188 <__aeabi_dsub>
 8003778:	a32f      	add	r3, pc, #188	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	4680      	mov	r8, r0
 8003780:	4689      	mov	r9, r1
 8003782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003786:	f7fc feb3 	bl	80004f0 <__aeabi_dmul>
 800378a:	4642      	mov	r2, r8
 800378c:	464b      	mov	r3, r9
 800378e:	f7fc fcfb 	bl	8000188 <__aeabi_dsub>
 8003792:	4680      	mov	r8, r0
 8003794:	4689      	mov	r9, r1
 8003796:	4642      	mov	r2, r8
 8003798:	464b      	mov	r3, r9
 800379a:	4630      	mov	r0, r6
 800379c:	4639      	mov	r1, r7
 800379e:	f7fc fcf3 	bl	8000188 <__aeabi_dsub>
 80037a2:	e9c4 0100 	strd	r0, r1, [r4]
 80037a6:	e001      	b.n	80037ac <__ieee754_rem_pio2+0x27c>
 80037a8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	9a02      	ldr	r2, [sp, #8]
 80037b6:	4653      	mov	r3, sl
 80037b8:	4630      	mov	r0, r6
 80037ba:	4639      	mov	r1, r7
 80037bc:	f7fc fce4 	bl	8000188 <__aeabi_dsub>
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	f7fc fce0 	bl	8000188 <__aeabi_dsub>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80037d2:	f280 8092 	bge.w	80038fa <__ieee754_rem_pio2+0x3ca>
 80037d6:	9b02      	ldr	r3, [sp, #8]
 80037d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80037e2:	60a0      	str	r0, [r4, #8]
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	60e1      	str	r1, [r4, #12]
 80037e8:	f1cb 0000 	rsb	r0, fp, #0
 80037ec:	e086      	b.n	80038fc <__ieee754_rem_pio2+0x3cc>
 80037ee:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <__ieee754_rem_pio2+0x328>)
 80037f0:	4592      	cmp	sl, r2
 80037f2:	dd33      	ble.n	800385c <__ieee754_rem_pio2+0x32c>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	f7fc fcc6 	bl	8000188 <__aeabi_dsub>
 80037fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003800:	e9c4 0100 	strd	r0, r1, [r4]
 8003804:	2000      	movs	r0, #0
 8003806:	e079      	b.n	80038fc <__ieee754_rem_pio2+0x3cc>
 8003808:	54400000 	.word	0x54400000
 800380c:	3ff921fb 	.word	0x3ff921fb
 8003810:	1a626331 	.word	0x1a626331
 8003814:	3dd0b461 	.word	0x3dd0b461
 8003818:	1a600000 	.word	0x1a600000
 800381c:	3dd0b461 	.word	0x3dd0b461
 8003820:	2e037073 	.word	0x2e037073
 8003824:	3ba3198a 	.word	0x3ba3198a
 8003828:	6dc9c883 	.word	0x6dc9c883
 800382c:	3fe45f30 	.word	0x3fe45f30
 8003830:	2e000000 	.word	0x2e000000
 8003834:	3ba3198a 	.word	0x3ba3198a
 8003838:	252049c1 	.word	0x252049c1
 800383c:	397b839a 	.word	0x397b839a
 8003840:	3fe921fb 	.word	0x3fe921fb
 8003844:	4002d97b 	.word	0x4002d97b
 8003848:	3ff921fb 	.word	0x3ff921fb
 800384c:	413921fb 	.word	0x413921fb
 8003850:	3fe00000 	.word	0x3fe00000
 8003854:	080047b0 	.word	0x080047b0
 8003858:	7fefffff 	.word	0x7fefffff
 800385c:	ea4f 582a 	mov.w	r8, sl, asr #20
 8003860:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 8003864:	ebaa 5108 	sub.w	r1, sl, r8, lsl #20
 8003868:	460f      	mov	r7, r1
 800386a:	4606      	mov	r6, r0
 800386c:	f7fd f8da 	bl	8000a24 <__aeabi_d2iz>
 8003870:	f7fc fdd8 	bl	8000424 <__aeabi_i2d>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003880:	f7fc fc82 	bl	8000188 <__aeabi_dsub>
 8003884:	2200      	movs	r2, #0
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <__ieee754_rem_pio2+0x3d4>)
 8003888:	f7fc fe32 	bl	80004f0 <__aeabi_dmul>
 800388c:	460f      	mov	r7, r1
 800388e:	4606      	mov	r6, r0
 8003890:	f7fd f8c8 	bl	8000a24 <__aeabi_d2iz>
 8003894:	f7fc fdc6 	bl	8000424 <__aeabi_i2d>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038a4:	f7fc fc70 	bl	8000188 <__aeabi_dsub>
 80038a8:	2200      	movs	r2, #0
 80038aa:	4b16      	ldr	r3, [pc, #88]	; (8003904 <__ieee754_rem_pio2+0x3d4>)
 80038ac:	f7fc fe20 	bl	80004f0 <__aeabi_dmul>
 80038b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038b4:	af0c      	add	r7, sp, #48	; 0x30
 80038b6:	2603      	movs	r6, #3
 80038b8:	2200      	movs	r2, #0
 80038ba:	2300      	movs	r3, #0
 80038bc:	e977 0102 	ldrd	r0, r1, [r7, #-8]!
 80038c0:	f106 39ff 	add.w	r9, r6, #4294967295
 80038c4:	f7fd f87c 	bl	80009c0 <__aeabi_dcmpeq>
 80038c8:	b108      	cbz	r0, 80038ce <__ieee754_rem_pio2+0x39e>
 80038ca:	464e      	mov	r6, r9
 80038cc:	e7f4      	b.n	80038b8 <__ieee754_rem_pio2+0x388>
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <__ieee754_rem_pio2+0x3d8>)
 80038d0:	4642      	mov	r2, r8
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2302      	movs	r3, #2
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4621      	mov	r1, r4
 80038da:	4633      	mov	r3, r6
 80038dc:	a806      	add	r0, sp, #24
 80038de:	f000 f8f5 	bl	8003acc <__kernel_rem_pio2>
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	da0a      	bge.n	80038fc <__ieee754_rem_pio2+0x3cc>
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	4240      	negs	r0, r0
 80038ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	68e3      	ldr	r3, [r4, #12]
 80038f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80038f6:	60e3      	str	r3, [r4, #12]
 80038f8:	e000      	b.n	80038fc <__ieee754_rem_pio2+0x3cc>
 80038fa:	4658      	mov	r0, fp
 80038fc:	b00d      	add	sp, #52	; 0x34
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	41700000 	.word	0x41700000
 8003908:	08004830 	.word	0x08004830
 800390c:	00000000 	.word	0x00000000

08003910 <__kernel_cos>:
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003918:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800391c:	b085      	sub	sp, #20
 800391e:	4605      	mov	r5, r0
 8003920:	460c      	mov	r4, r1
 8003922:	4692      	mov	sl, r2
 8003924:	469b      	mov	fp, r3
 8003926:	da04      	bge.n	8003932 <__kernel_cos+0x22>
 8003928:	f7fd f87c 	bl	8000a24 <__aeabi_d2iz>
 800392c:	2800      	cmp	r0, #0
 800392e:	f000 80a6 	beq.w	8003a7e <__kernel_cos+0x16e>
 8003932:	462a      	mov	r2, r5
 8003934:	4623      	mov	r3, r4
 8003936:	4628      	mov	r0, r5
 8003938:	4621      	mov	r1, r4
 800393a:	f7fc fdd9 	bl	80004f0 <__aeabi_dmul>
 800393e:	a352      	add	r3, pc, #328	; (adr r3, 8003a88 <__kernel_cos+0x178>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	4680      	mov	r8, r0
 8003946:	4689      	mov	r9, r1
 8003948:	f7fc fdd2 	bl	80004f0 <__aeabi_dmul>
 800394c:	a350      	add	r3, pc, #320	; (adr r3, 8003a90 <__kernel_cos+0x180>)
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f7fc fc1b 	bl	800018c <__adddf3>
 8003956:	4642      	mov	r2, r8
 8003958:	464b      	mov	r3, r9
 800395a:	f7fc fdc9 	bl	80004f0 <__aeabi_dmul>
 800395e:	a34e      	add	r3, pc, #312	; (adr r3, 8003a98 <__kernel_cos+0x188>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fc fc10 	bl	8000188 <__aeabi_dsub>
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	f7fc fdc0 	bl	80004f0 <__aeabi_dmul>
 8003970:	a34b      	add	r3, pc, #300	; (adr r3, 8003aa0 <__kernel_cos+0x190>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fc09 	bl	800018c <__adddf3>
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	f7fc fdb7 	bl	80004f0 <__aeabi_dmul>
 8003982:	a349      	add	r3, pc, #292	; (adr r3, 8003aa8 <__kernel_cos+0x198>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fbfe 	bl	8000188 <__aeabi_dsub>
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	f7fc fdae 	bl	80004f0 <__aeabi_dmul>
 8003994:	a346      	add	r3, pc, #280	; (adr r3, 8003ab0 <__kernel_cos+0x1a0>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fc fbf7 	bl	800018c <__adddf3>
 800399e:	464b      	mov	r3, r9
 80039a0:	4642      	mov	r2, r8
 80039a2:	f7fc fda5 	bl	80004f0 <__aeabi_dmul>
 80039a6:	4b44      	ldr	r3, [pc, #272]	; (8003ab8 <__kernel_cos+0x1a8>)
 80039a8:	e9cd 0100 	strd	r0, r1, [sp]
 80039ac:	429f      	cmp	r7, r3
 80039ae:	dc26      	bgt.n	80039fe <__kernel_cos+0xee>
 80039b0:	2200      	movs	r2, #0
 80039b2:	4b42      	ldr	r3, [pc, #264]	; (8003abc <__kernel_cos+0x1ac>)
 80039b4:	4640      	mov	r0, r8
 80039b6:	4649      	mov	r1, r9
 80039b8:	f7fc fd9a 	bl	80004f0 <__aeabi_dmul>
 80039bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039c0:	4606      	mov	r6, r0
 80039c2:	460f      	mov	r7, r1
 80039c4:	4640      	mov	r0, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fc fd92 	bl	80004f0 <__aeabi_dmul>
 80039cc:	4652      	mov	r2, sl
 80039ce:	4680      	mov	r8, r0
 80039d0:	4689      	mov	r9, r1
 80039d2:	465b      	mov	r3, fp
 80039d4:	4628      	mov	r0, r5
 80039d6:	4621      	mov	r1, r4
 80039d8:	f7fc fd8a 	bl	80004f0 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4640      	mov	r0, r8
 80039e2:	4649      	mov	r1, r9
 80039e4:	f7fc fbd0 	bl	8000188 <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4630      	mov	r0, r6
 80039ee:	4639      	mov	r1, r7
 80039f0:	f7fc fbca 	bl	8000188 <__aeabi_dsub>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	2000      	movs	r0, #0
 80039fa:	4931      	ldr	r1, [pc, #196]	; (8003ac0 <__kernel_cos+0x1b0>)
 80039fc:	e03c      	b.n	8003a78 <__kernel_cos+0x168>
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <__kernel_cos+0x1b4>)
 8003a00:	2000      	movs	r0, #0
 8003a02:	429f      	cmp	r7, r3
 8003a04:	bfdf      	itttt	le
 8003a06:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8003a0a:	2200      	movle	r2, #0
 8003a0c:	4616      	movle	r6, r2
 8003a0e:	461f      	movle	r7, r3
 8003a10:	bfc4      	itt	gt
 8003a12:	4f2d      	ldrgt	r7, [pc, #180]	; (8003ac8 <__kernel_cos+0x1b8>)
 8003a14:	2600      	movgt	r6, #0
 8003a16:	4632      	mov	r2, r6
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4929      	ldr	r1, [pc, #164]	; (8003ac0 <__kernel_cos+0x1b0>)
 8003a1c:	f7fc fbb4 	bl	8000188 <__aeabi_dsub>
 8003a20:	2200      	movs	r2, #0
 8003a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <__kernel_cos+0x1ac>)
 8003a28:	4640      	mov	r0, r8
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	f7fc fd60 	bl	80004f0 <__aeabi_dmul>
 8003a30:	4632      	mov	r2, r6
 8003a32:	463b      	mov	r3, r7
 8003a34:	f7fc fba8 	bl	8000188 <__aeabi_dsub>
 8003a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	460f      	mov	r7, r1
 8003a40:	4640      	mov	r0, r8
 8003a42:	4649      	mov	r1, r9
 8003a44:	f7fc fd54 	bl	80004f0 <__aeabi_dmul>
 8003a48:	4652      	mov	r2, sl
 8003a4a:	4680      	mov	r8, r0
 8003a4c:	4689      	mov	r9, r1
 8003a4e:	465b      	mov	r3, fp
 8003a50:	4628      	mov	r0, r5
 8003a52:	4621      	mov	r1, r4
 8003a54:	f7fc fd4c 	bl	80004f0 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	4649      	mov	r1, r9
 8003a60:	f7fc fb92 	bl	8000188 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4630      	mov	r0, r6
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	f7fc fb8c 	bl	8000188 <__aeabi_dsub>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a78:	f7fc fb86 	bl	8000188 <__aeabi_dsub>
 8003a7c:	e001      	b.n	8003a82 <__kernel_cos+0x172>
 8003a7e:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <__kernel_cos+0x1b0>)
 8003a80:	2000      	movs	r0, #0
 8003a82:	b005      	add	sp, #20
 8003a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a88:	be8838d4 	.word	0xbe8838d4
 8003a8c:	bda8fae9 	.word	0xbda8fae9
 8003a90:	bdb4b1c4 	.word	0xbdb4b1c4
 8003a94:	3e21ee9e 	.word	0x3e21ee9e
 8003a98:	809c52ad 	.word	0x809c52ad
 8003a9c:	3e927e4f 	.word	0x3e927e4f
 8003aa0:	19cb1590 	.word	0x19cb1590
 8003aa4:	3efa01a0 	.word	0x3efa01a0
 8003aa8:	16c15177 	.word	0x16c15177
 8003aac:	3f56c16c 	.word	0x3f56c16c
 8003ab0:	5555554c 	.word	0x5555554c
 8003ab4:	3fa55555 	.word	0x3fa55555
 8003ab8:	3fd33332 	.word	0x3fd33332
 8003abc:	3fe00000 	.word	0x3fe00000
 8003ac0:	3ff00000 	.word	0x3ff00000
 8003ac4:	3fe90000 	.word	0x3fe90000
 8003ac8:	3fd20000 	.word	0x3fd20000

08003acc <__kernel_rem_pio2>:
 8003acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	9106      	str	r1, [sp, #24]
 8003ad8:	4bb1      	ldr	r3, [pc, #708]	; (8003da0 <__kernel_rem_pio2+0x2d4>)
 8003ada:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003adc:	2418      	movs	r4, #24
 8003ade:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ae2:	9009      	str	r0, [sp, #36]	; 0x24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	9b07      	ldr	r3, [sp, #28]
 8003ae8:	ae1e      	add	r6, sp, #120	; 0x78
 8003aea:	3b01      	subs	r3, #1
 8003aec:	9304      	str	r3, [sp, #16]
 8003aee:	1ed3      	subs	r3, r2, #3
 8003af0:	fb93 f4f4 	sdiv	r4, r3, r4
 8003af4:	f06f 0317 	mvn.w	r3, #23
 8003af8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003afc:	fb04 3303 	mla	r3, r4, r3, r3
 8003b00:	eb03 0a02 	add.w	sl, r3, r2
 8003b04:	9b00      	ldr	r3, [sp, #0]
 8003b06:	9a04      	ldr	r2, [sp, #16]
 8003b08:	2500      	movs	r5, #0
 8003b0a:	eb03 0802 	add.w	r8, r3, r2
 8003b0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003b10:	1aa7      	subs	r7, r4, r2
 8003b12:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003b16:	4545      	cmp	r5, r8
 8003b18:	dc0c      	bgt.n	8003b34 <__kernel_rem_pio2+0x68>
 8003b1a:	42ef      	cmn	r7, r5
 8003b1c:	d404      	bmi.n	8003b28 <__kernel_rem_pio2+0x5c>
 8003b1e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003b22:	f7fc fc7f 	bl	8000424 <__aeabi_i2d>
 8003b26:	e001      	b.n	8003b2c <__kernel_rem_pio2+0x60>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f0      	b.n	8003b16 <__kernel_rem_pio2+0x4a>
 8003b34:	ab6e      	add	r3, sp, #440	; 0x1b8
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	2600      	movs	r6, #0
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	429e      	cmp	r6, r3
 8003b3e:	dc25      	bgt.n	8003b8c <__kernel_rem_pio2+0xc0>
 8003b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b42:	f04f 0800 	mov.w	r8, #0
 8003b46:	f1a3 0b08 	sub.w	fp, r3, #8
 8003b4a:	9b07      	ldr	r3, [sp, #28]
 8003b4c:	f04f 0900 	mov.w	r9, #0
 8003b50:	199d      	adds	r5, r3, r6
 8003b52:	ab20      	add	r3, sp, #128	; 0x80
 8003b54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003b58:	2700      	movs	r7, #0
 8003b5a:	9b04      	ldr	r3, [sp, #16]
 8003b5c:	429f      	cmp	r7, r3
 8003b5e:	dc0f      	bgt.n	8003b80 <__kernel_rem_pio2+0xb4>
 8003b60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003b64:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
 8003b68:	f7fc fcc2 	bl	80004f0 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fc fb0a 	bl	800018c <__adddf3>
 8003b78:	3701      	adds	r7, #1
 8003b7a:	4680      	mov	r8, r0
 8003b7c:	4689      	mov	r9, r1
 8003b7e:	e7ec      	b.n	8003b5a <__kernel_rem_pio2+0x8e>
 8003b80:	9b02      	ldr	r3, [sp, #8]
 8003b82:	3601      	adds	r6, #1
 8003b84:	e9e3 8902 	strd	r8, r9, [r3, #8]!
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	e7d6      	b.n	8003b3a <__kernel_rem_pio2+0x6e>
 8003b8c:	9b00      	ldr	r3, [sp, #0]
 8003b8e:	aa0c      	add	r2, sp, #48	; 0x30
 8003b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b94:	930a      	str	r3, [sp, #40]	; 0x28
 8003b96:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003b98:	f8dd b000 	ldr.w	fp, [sp]
 8003b9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ba2:	ab98      	add	r3, sp, #608	; 0x260
 8003ba4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003ba8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003bac:	f10b 5300 	add.w	r3, fp, #536870912	; 0x20000000
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	aa98      	add	r2, sp, #608	; 0x260
 8003bb6:	eb02 0903 	add.w	r9, r2, r3
 8003bba:	9308      	str	r3, [sp, #32]
 8003bbc:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003bc0:	f04f 0800 	mov.w	r8, #0
 8003bc4:	ebc8 030b 	rsb	r3, r8, fp
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dd25      	ble.n	8003c18 <__kernel_rem_pio2+0x14c>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <__kernel_rem_pio2+0x2d8>)
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	f7fc fc8c 	bl	80004f0 <__aeabi_dmul>
 8003bd8:	f7fc ff24 	bl	8000a24 <__aeabi_d2iz>
 8003bdc:	f7fc fc22 	bl	8000424 <__aeabi_i2d>
 8003be0:	2200      	movs	r2, #0
 8003be2:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <__kernel_rem_pio2+0x2dc>)
 8003be4:	4606      	mov	r6, r0
 8003be6:	460f      	mov	r7, r1
 8003be8:	f7fc fc82 	bl	80004f0 <__aeabi_dmul>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	f7fc fac8 	bl	8000188 <__aeabi_dsub>
 8003bf8:	f7fc ff14 	bl	8000a24 <__aeabi_d2iz>
 8003bfc:	ab0c      	add	r3, sp, #48	; 0x30
 8003bfe:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003c02:	4639      	mov	r1, r7
 8003c04:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f7fc fabf 	bl	800018c <__adddf3>
 8003c0e:	f108 0801 	add.w	r8, r8, #1
 8003c12:	4604      	mov	r4, r0
 8003c14:	460d      	mov	r5, r1
 8003c16:	e7d5      	b.n	8003bc4 <__kernel_rem_pio2+0xf8>
 8003c18:	4652      	mov	r2, sl
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f000 fbdb 	bl	80043d8 <scalbn>
 8003c22:	2200      	movs	r2, #0
 8003c24:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003c28:	4604      	mov	r4, r0
 8003c2a:	460d      	mov	r5, r1
 8003c2c:	f7fc fc60 	bl	80004f0 <__aeabi_dmul>
 8003c30:	f000 fb52 	bl	80042d8 <floor>
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <__kernel_rem_pio2+0x2e0>)
 8003c38:	f7fc fc5a 	bl	80004f0 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc faa0 	bl	8000188 <__aeabi_dsub>
 8003c48:	460d      	mov	r5, r1
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	f7fc feea 	bl	8000a24 <__aeabi_d2iz>
 8003c50:	9002      	str	r0, [sp, #8]
 8003c52:	f7fc fbe7 	bl	8000424 <__aeabi_i2d>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc fa93 	bl	8000188 <__aeabi_dsub>
 8003c62:	f1ba 0f00 	cmp.w	sl, #0
 8003c66:	4606      	mov	r6, r0
 8003c68:	460f      	mov	r7, r1
 8003c6a:	dd15      	ble.n	8003c98 <__kernel_rem_pio2+0x1cc>
 8003c6c:	f10b 31ff 	add.w	r1, fp, #4294967295
 8003c70:	ab0c      	add	r3, sp, #48	; 0x30
 8003c72:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8003c76:	f1ca 0018 	rsb	r0, sl, #24
 8003c7a:	9c02      	ldr	r4, [sp, #8]
 8003c7c:	fa42 f300 	asr.w	r3, r2, r0
 8003c80:	441c      	add	r4, r3
 8003c82:	4083      	lsls	r3, r0
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f1ca 0017 	rsb	r0, sl, #23
 8003c8a:	aa0c      	add	r2, sp, #48	; 0x30
 8003c8c:	9402      	str	r4, [sp, #8]
 8003c8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003c92:	fa43 f900 	asr.w	r9, r3, r0
 8003c96:	e00f      	b.n	8003cb8 <__kernel_rem_pio2+0x1ec>
 8003c98:	d107      	bne.n	8003caa <__kernel_rem_pio2+0x1de>
 8003c9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003c9e:	aa0c      	add	r2, sp, #48	; 0x30
 8003ca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ca4:	ea4f 59e0 	mov.w	r9, r0, asr #23
 8003ca8:	e006      	b.n	8003cb8 <__kernel_rem_pio2+0x1ec>
 8003caa:	2200      	movs	r2, #0
 8003cac:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <__kernel_rem_pio2+0x2e4>)
 8003cae:	f7fc fea5 	bl	80009fc <__aeabi_dcmpge>
 8003cb2:	b928      	cbnz	r0, 8003cc0 <__kernel_rem_pio2+0x1f4>
 8003cb4:	4681      	mov	r9, r0
 8003cb6:	e052      	b.n	8003d5e <__kernel_rem_pio2+0x292>
 8003cb8:	f1b9 0f00 	cmp.w	r9, #0
 8003cbc:	dc02      	bgt.n	8003cc4 <__kernel_rem_pio2+0x1f8>
 8003cbe:	e04e      	b.n	8003d5e <__kernel_rem_pio2+0x292>
 8003cc0:	f04f 0902 	mov.w	r9, #2
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	4593      	cmp	fp, r2
 8003cd0:	dd11      	ble.n	8003cf6 <__kernel_rem_pio2+0x22a>
 8003cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8003cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd8:	b91c      	cbnz	r4, 8003ce2 <__kernel_rem_pio2+0x216>
 8003cda:	b153      	cbz	r3, 8003cf2 <__kernel_rem_pio2+0x226>
 8003cdc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003ce0:	e003      	b.n	8003cea <__kernel_rem_pio2+0x21e>
 8003ce2:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8003ce6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003cea:	a90c      	add	r1, sp, #48	; 0x30
 8003cec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003cf0:	2401      	movs	r4, #1
 8003cf2:	3201      	adds	r2, #1
 8003cf4:	e7eb      	b.n	8003cce <__kernel_rem_pio2+0x202>
 8003cf6:	f1ba 0f00 	cmp.w	sl, #0
 8003cfa:	dd17      	ble.n	8003d2c <__kernel_rem_pio2+0x260>
 8003cfc:	f1ba 0f01 	cmp.w	sl, #1
 8003d00:	d00a      	beq.n	8003d18 <__kernel_rem_pio2+0x24c>
 8003d02:	f1ba 0f02 	cmp.w	sl, #2
 8003d06:	d111      	bne.n	8003d2c <__kernel_rem_pio2+0x260>
 8003d08:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003d0c:	ab0c      	add	r3, sp, #48	; 0x30
 8003d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d16:	e006      	b.n	8003d26 <__kernel_rem_pio2+0x25a>
 8003d18:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003d1c:	ab0c      	add	r3, sp, #48	; 0x30
 8003d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d26:	a90c      	add	r1, sp, #48	; 0x30
 8003d28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d2c:	f1b9 0f02 	cmp.w	r9, #2
 8003d30:	d115      	bne.n	8003d5e <__kernel_rem_pio2+0x292>
 8003d32:	4632      	mov	r2, r6
 8003d34:	463b      	mov	r3, r7
 8003d36:	2000      	movs	r0, #0
 8003d38:	491e      	ldr	r1, [pc, #120]	; (8003db4 <__kernel_rem_pio2+0x2e8>)
 8003d3a:	f7fc fa25 	bl	8000188 <__aeabi_dsub>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	460f      	mov	r7, r1
 8003d42:	b164      	cbz	r4, 8003d5e <__kernel_rem_pio2+0x292>
 8003d44:	4652      	mov	r2, sl
 8003d46:	2000      	movs	r0, #0
 8003d48:	491a      	ldr	r1, [pc, #104]	; (8003db4 <__kernel_rem_pio2+0x2e8>)
 8003d4a:	f000 fb45 	bl	80043d8 <scalbn>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4630      	mov	r0, r6
 8003d54:	4639      	mov	r1, r7
 8003d56:	f7fc fa17 	bl	8000188 <__aeabi_dsub>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460f      	mov	r7, r1
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2300      	movs	r3, #0
 8003d62:	4630      	mov	r0, r6
 8003d64:	4639      	mov	r1, r7
 8003d66:	f7fc fe2b 	bl	80009c0 <__aeabi_dcmpeq>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d072      	beq.n	8003e54 <__kernel_rem_pio2+0x388>
 8003d6e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8003d72:	460b      	mov	r3, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	9800      	ldr	r0, [sp, #0]
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	db05      	blt.n	8003d88 <__kernel_rem_pio2+0x2bc>
 8003d7c:	a80c      	add	r0, sp, #48	; 0x30
 8003d7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	4302      	orrs	r2, r0
 8003d86:	e7f6      	b.n	8003d76 <__kernel_rem_pio2+0x2aa>
 8003d88:	2a00      	cmp	r2, #0
 8003d8a:	d157      	bne.n	8003e3c <__kernel_rem_pio2+0x370>
 8003d8c:	2501      	movs	r5, #1
 8003d8e:	f06f 0203 	mvn.w	r2, #3
 8003d92:	fb02 f305 	mul.w	r3, r2, r5
 8003d96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d98:	58cb      	ldr	r3, [r1, r3]
 8003d9a:	b96b      	cbnz	r3, 8003db8 <__kernel_rem_pio2+0x2ec>
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	e7f8      	b.n	8003d92 <__kernel_rem_pio2+0x2c6>
 8003da0:	08004938 	.word	0x08004938
 8003da4:	3e700000 	.word	0x3e700000
 8003da8:	41700000 	.word	0x41700000
 8003dac:	40200000 	.word	0x40200000
 8003db0:	3fe00000 	.word	0x3fe00000
 8003db4:	3ff00000 	.word	0x3ff00000
 8003db8:	9b08      	ldr	r3, [sp, #32]
 8003dba:	aa98      	add	r2, sp, #608	; 0x260
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8003dc2:	9b07      	ldr	r3, [sp, #28]
 8003dc4:	f10b 0701 	add.w	r7, fp, #1
 8003dc8:	eb03 040b 	add.w	r4, r3, fp
 8003dcc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8003dd0:	f5a4 74f4 	sub.w	r4, r4, #488	; 0x1e8
 8003dd4:	445d      	add	r5, fp
 8003dd6:	42af      	cmp	r7, r5
 8003dd8:	dc2e      	bgt.n	8003e38 <__kernel_rem_pio2+0x36c>
 8003dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ddc:	f104 0b08 	add.w	fp, r4, #8
 8003de0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003de4:	f7fc fb1e 	bl	8000424 <__aeabi_i2d>
 8003de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dea:	2200      	movs	r2, #0
 8003dec:	f1a3 0908 	sub.w	r9, r3, #8
 8003df0:	2300      	movs	r3, #0
 8003df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dfa:	f04f 0800 	mov.w	r8, #0
 8003dfe:	3410      	adds	r4, #16
 8003e00:	9b04      	ldr	r3, [sp, #16]
 8003e02:	4598      	cmp	r8, r3
 8003e04:	dc10      	bgt.n	8003e28 <__kernel_rem_pio2+0x35c>
 8003e06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003e0a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003e0e:	f7fc fb6f 	bl	80004f0 <__aeabi_dmul>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e1a:	f7fc f9b7 	bl	800018c <__adddf3>
 8003e1e:	f108 0801 	add.w	r8, r8, #1
 8003e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e26:	e7eb      	b.n	8003e00 <__kernel_rem_pio2+0x334>
 8003e28:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8003e2c:	3701      	adds	r7, #1
 8003e2e:	f846 3f08 	str.w	r3, [r6, #8]!
 8003e32:	6074      	str	r4, [r6, #4]
 8003e34:	465c      	mov	r4, fp
 8003e36:	e7ce      	b.n	8003dd6 <__kernel_rem_pio2+0x30a>
 8003e38:	46ab      	mov	fp, r5
 8003e3a:	e6b2      	b.n	8003ba2 <__kernel_rem_pio2+0xd6>
 8003e3c:	468b      	mov	fp, r1
 8003e3e:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e42:	ab0c      	add	r3, sp, #48	; 0x30
 8003e44:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003e48:	bbcb      	cbnz	r3, 8003ebe <__kernel_rem_pio2+0x3f2>
 8003e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e4e:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e52:	e7f6      	b.n	8003e42 <__kernel_rem_pio2+0x376>
 8003e54:	f1ca 0200 	rsb	r2, sl, #0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	f000 fabc 	bl	80043d8 <scalbn>
 8003e60:	2200      	movs	r2, #0
 8003e62:	4bb0      	ldr	r3, [pc, #704]	; (8004124 <__kernel_rem_pio2+0x658>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	460d      	mov	r5, r1
 8003e68:	f7fc fdc8 	bl	80009fc <__aeabi_dcmpge>
 8003e6c:	b300      	cbz	r0, 8003eb0 <__kernel_rem_pio2+0x3e4>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4bad      	ldr	r3, [pc, #692]	; (8004128 <__kernel_rem_pio2+0x65c>)
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7fc fb3b 	bl	80004f0 <__aeabi_dmul>
 8003e7a:	f7fc fdd3 	bl	8000a24 <__aeabi_d2iz>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	f7fc fad0 	bl	8000424 <__aeabi_i2d>
 8003e84:	2200      	movs	r2, #0
 8003e86:	4ba7      	ldr	r3, [pc, #668]	; (8004124 <__kernel_rem_pio2+0x658>)
 8003e88:	f7fc fb32 	bl	80004f0 <__aeabi_dmul>
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4629      	mov	r1, r5
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7fc f978 	bl	8000188 <__aeabi_dsub>
 8003e98:	f7fc fdc4 	bl	8000a24 <__aeabi_d2iz>
 8003e9c:	ab0c      	add	r3, sp, #48	; 0x30
 8003e9e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8003ea2:	f10b 0b01 	add.w	fp, fp, #1
 8003ea6:	f10a 0a18 	add.w	sl, sl, #24
 8003eaa:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8003eae:	e006      	b.n	8003ebe <__kernel_rem_pio2+0x3f2>
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	f7fc fdb6 	bl	8000a24 <__aeabi_d2iz>
 8003eb8:	ab0c      	add	r3, sp, #48	; 0x30
 8003eba:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	499a      	ldr	r1, [pc, #616]	; (800412c <__kernel_rem_pio2+0x660>)
 8003ec4:	f000 fa88 	bl	80043d8 <scalbn>
 8003ec8:	465d      	mov	r5, fp
 8003eca:	4606      	mov	r6, r0
 8003ecc:	460f      	mov	r7, r1
 8003ece:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8003ed2:	ab98      	add	r3, sp, #608	; 0x260
 8003ed4:	eb03 0804 	add.w	r8, r3, r4
 8003ed8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	db14      	blt.n	8003f0a <__kernel_rem_pio2+0x43e>
 8003ee0:	ab0c      	add	r3, sp, #48	; 0x30
 8003ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003ee6:	f7fc fa9d 	bl	8000424 <__aeabi_i2d>
 8003eea:	4632      	mov	r2, r6
 8003eec:	463b      	mov	r3, r7
 8003eee:	f7fc faff 	bl	80004f0 <__aeabi_dmul>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003ef8:	4b8b      	ldr	r3, [pc, #556]	; (8004128 <__kernel_rem_pio2+0x65c>)
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc faf7 	bl	80004f0 <__aeabi_dmul>
 8003f02:	3d01      	subs	r5, #1
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	e7e8      	b.n	8003edc <__kernel_rem_pio2+0x410>
 8003f0a:	f10b 5800 	add.w	r8, fp, #536870912	; 0x20000000
 8003f0e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8003f12:	2500      	movs	r5, #0
 8003f14:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f18:	ebc5 030b 	rsb	r3, r5, fp
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	db2b      	blt.n	8003f78 <__kernel_rem_pio2+0x4ac>
 8003f20:	4b83      	ldr	r3, [pc, #524]	; (8004130 <__kernel_rem_pio2+0x664>)
 8003f22:	ebc5 0708 	rsb	r7, r5, r8
 8003f26:	9308      	str	r3, [sp, #32]
 8003f28:	ab70      	add	r3, sp, #448	; 0x1c0
 8003f2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f2e:	9307      	str	r3, [sp, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2300      	movs	r3, #0
 8003f34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f38:	2600      	movs	r6, #0
 8003f3a:	9b00      	ldr	r3, [sp, #0]
 8003f3c:	429e      	cmp	r6, r3
 8003f3e:	dc15      	bgt.n	8003f6c <__kernel_rem_pio2+0x4a0>
 8003f40:	42ae      	cmp	r6, r5
 8003f42:	dc13      	bgt.n	8003f6c <__kernel_rem_pio2+0x4a0>
 8003f44:	9907      	ldr	r1, [sp, #28]
 8003f46:	9f08      	ldr	r7, [sp, #32]
 8003f48:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003f4c:	9107      	str	r1, [sp, #28]
 8003f4e:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 8003f52:	9708      	str	r7, [sp, #32]
 8003f54:	f7fc facc 	bl	80004f0 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f60:	f7fc f914 	bl	800018c <__adddf3>
 8003f64:	3601      	adds	r6, #1
 8003f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f6a:	e7e6      	b.n	8003f3a <__kernel_rem_pio2+0x46e>
 8003f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f70:	3501      	adds	r5, #1
 8003f72:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 8003f76:	e7cf      	b.n	8003f18 <__kernel_rem_pio2+0x44c>
 8003f78:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	f200 80eb 	bhi.w	8004156 <__kernel_rem_pio2+0x68a>
 8003f80:	e8df f003 	tbb	[pc, r3]
 8003f84:	0208080f 	.word	0x0208080f
 8003f88:	ab48      	add	r3, sp, #288	; 0x120
 8003f8a:	441c      	add	r4, r3
 8003f8c:	4625      	mov	r5, r4
 8003f8e:	46a2      	mov	sl, r4
 8003f90:	46d8      	mov	r8, fp
 8003f92:	e059      	b.n	8004048 <__kernel_rem_pio2+0x57c>
 8003f94:	3408      	adds	r4, #8
 8003f96:	ab48      	add	r3, sp, #288	; 0x120
 8003f98:	2700      	movs	r7, #0
 8003f9a:	441c      	add	r4, r3
 8003f9c:	465d      	mov	r5, fp
 8003f9e:	463e      	mov	r6, r7
 8003fa0:	e01e      	b.n	8003fe0 <__kernel_rem_pio2+0x514>
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	4635      	mov	r5, r6
 8003fa6:	ab98      	add	r3, sp, #608	; 0x260
 8003fa8:	441c      	add	r4, r3
 8003faa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003fae:	f1bb 0f00 	cmp.w	fp, #0
 8003fb2:	db0a      	blt.n	8003fca <__kernel_rem_pio2+0x4fe>
 8003fb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fb8:	4630      	mov	r0, r6
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc f8e6 	bl	800018c <__adddf3>
 8003fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	460d      	mov	r5, r1
 8003fc8:	e7f1      	b.n	8003fae <__kernel_rem_pio2+0x4e2>
 8003fca:	f1b9 0f00 	cmp.w	r9, #0
 8003fce:	d001      	beq.n	8003fd4 <__kernel_rem_pio2+0x508>
 8003fd0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	9906      	ldr	r1, [sp, #24]
 8003fda:	e9c1 2300 	strd	r2, r3, [r1]
 8003fde:	e0ba      	b.n	8004156 <__kernel_rem_pio2+0x68a>
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	db09      	blt.n	8003ff8 <__kernel_rem_pio2+0x52c>
 8003fe4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fe8:	4638      	mov	r0, r7
 8003fea:	4631      	mov	r1, r6
 8003fec:	f7fc f8ce 	bl	800018c <__adddf3>
 8003ff0:	3d01      	subs	r5, #1
 8003ff2:	4607      	mov	r7, r0
 8003ff4:	460e      	mov	r6, r1
 8003ff6:	e7f3      	b.n	8003fe0 <__kernel_rem_pio2+0x514>
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	d002      	beq.n	8004004 <__kernel_rem_pio2+0x538>
 8003ffe:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 8004002:	e000      	b.n	8004006 <__kernel_rem_pio2+0x53a>
 8004004:	4631      	mov	r1, r6
 8004006:	460b      	mov	r3, r1
 8004008:	463a      	mov	r2, r7
 800400a:	9906      	ldr	r1, [sp, #24]
 800400c:	ad4a      	add	r5, sp, #296	; 0x128
 800400e:	e9c1 2300 	strd	r2, r3, [r1]
 8004012:	a948      	add	r1, sp, #288	; 0x120
 8004014:	463a      	mov	r2, r7
 8004016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800401a:	4633      	mov	r3, r6
 800401c:	f7fc f8b4 	bl	8000188 <__aeabi_dsub>
 8004020:	2401      	movs	r4, #1
 8004022:	45a3      	cmp	fp, r4
 8004024:	db05      	blt.n	8004032 <__kernel_rem_pio2+0x566>
 8004026:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800402a:	f7fc f8af 	bl	800018c <__adddf3>
 800402e:	3401      	adds	r4, #1
 8004030:	e7f7      	b.n	8004022 <__kernel_rem_pio2+0x556>
 8004032:	f1b9 0f00 	cmp.w	r9, #0
 8004036:	d001      	beq.n	800403c <__kernel_rem_pio2+0x570>
 8004038:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800403c:	460b      	mov	r3, r1
 800403e:	4602      	mov	r2, r0
 8004040:	9906      	ldr	r1, [sp, #24]
 8004042:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004046:	e086      	b.n	8004156 <__kernel_rem_pio2+0x68a>
 8004048:	f1b8 0f00 	cmp.w	r8, #0
 800404c:	f1aa 0a08 	sub.w	sl, sl, #8
 8004050:	dd1e      	ble.n	8004090 <__kernel_rem_pio2+0x5c4>
 8004052:	e9da 2300 	ldrd	r2, r3, [sl]
 8004056:	e9cd 2300 	strd	r2, r3, [sp]
 800405a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800405e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8004062:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004066:	f7fc f891 	bl	800018c <__adddf3>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4606      	mov	r6, r0
 8004070:	460f      	mov	r7, r1
 8004072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004076:	f7fc f887 	bl	8000188 <__aeabi_dsub>
 800407a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407e:	f7fc f885 	bl	800018c <__adddf3>
 8004082:	f108 38ff 	add.w	r8, r8, #4294967295
 8004086:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800408a:	e9ca 6700 	strd	r6, r7, [sl]
 800408e:	e7db      	b.n	8004048 <__kernel_rem_pio2+0x57c>
 8004090:	46da      	mov	sl, fp
 8004092:	f1ba 0f01 	cmp.w	sl, #1
 8004096:	f1a5 0508 	sub.w	r5, r5, #8
 800409a:	dd1e      	ble.n	80040da <__kernel_rem_pio2+0x60e>
 800409c:	e9d5 6700 	ldrd	r6, r7, [r5]
 80040a0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80040a4:	4630      	mov	r0, r6
 80040a6:	4639      	mov	r1, r7
 80040a8:	e9cd 2300 	strd	r2, r3, [sp]
 80040ac:	f7fc f86e 	bl	800018c <__adddf3>
 80040b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4630      	mov	r0, r6
 80040ba:	4639      	mov	r1, r7
 80040bc:	f7fc f864 	bl	8000188 <__aeabi_dsub>
 80040c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040c4:	f7fc f862 	bl	800018c <__adddf3>
 80040c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040d0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80040d4:	e9c5 2300 	strd	r2, r3, [r5]
 80040d8:	e7db      	b.n	8004092 <__kernel_rem_pio2+0x5c6>
 80040da:	2600      	movs	r6, #0
 80040dc:	4635      	mov	r5, r6
 80040de:	3408      	adds	r4, #8
 80040e0:	f1bb 0f01 	cmp.w	fp, #1
 80040e4:	dd0a      	ble.n	80040fc <__kernel_rem_pio2+0x630>
 80040e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80040ea:	4630      	mov	r0, r6
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc f84d 	bl	800018c <__adddf3>
 80040f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040f6:	4606      	mov	r6, r0
 80040f8:	460d      	mov	r5, r1
 80040fa:	e7f1      	b.n	80040e0 <__kernel_rem_pio2+0x614>
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	d118      	bne.n	8004134 <__kernel_rem_pio2+0x668>
 8004102:	9a06      	ldr	r2, [sp, #24]
 8004104:	ab98      	add	r3, sp, #608	; 0x260
 8004106:	e973 0150 	ldrd	r0, r1, [r3, #-320]!	; 0x140
 800410a:	e9c2 0100 	strd	r0, r1, [r2]
 800410e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004112:	9906      	ldr	r1, [sp, #24]
 8004114:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004118:	4632      	mov	r2, r6
 800411a:	462b      	mov	r3, r5
 800411c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004120:	e019      	b.n	8004156 <__kernel_rem_pio2+0x68a>
 8004122:	bf00      	nop
 8004124:	41700000 	.word	0x41700000
 8004128:	3e700000 	.word	0x3e700000
 800412c:	3ff00000 	.word	0x3ff00000
 8004130:	08004940 	.word	0x08004940
 8004134:	9a06      	ldr	r2, [sp, #24]
 8004136:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8004138:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004140:	6116      	str	r6, [r2, #16]
 8004142:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004146:	6053      	str	r3, [r2, #4]
 8004148:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800414a:	6155      	str	r5, [r2, #20]
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8004150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004154:	60d3      	str	r3, [r2, #12]
 8004156:	9b02      	ldr	r3, [sp, #8]
 8004158:	f003 0007 	and.w	r0, r3, #7
 800415c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	0000      	movs	r0, r0
	...

08004168 <__kernel_sin>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	b085      	sub	sp, #20
 800416e:	e9cd 2300 	strd	r2, r3, [sp]
 8004172:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004176:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800417a:	4683      	mov	fp, r0
 800417c:	468a      	mov	sl, r1
 800417e:	da04      	bge.n	800418a <__kernel_sin+0x22>
 8004180:	f7fc fc50 	bl	8000a24 <__aeabi_d2iz>
 8004184:	2800      	cmp	r0, #0
 8004186:	f000 8081 	beq.w	800428c <__kernel_sin+0x124>
 800418a:	465a      	mov	r2, fp
 800418c:	4653      	mov	r3, sl
 800418e:	4658      	mov	r0, fp
 8004190:	4651      	mov	r1, sl
 8004192:	f7fc f9ad 	bl	80004f0 <__aeabi_dmul>
 8004196:	4604      	mov	r4, r0
 8004198:	460d      	mov	r5, r1
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4658      	mov	r0, fp
 80041a0:	4651      	mov	r1, sl
 80041a2:	f7fc f9a5 	bl	80004f0 <__aeabi_dmul>
 80041a6:	a33c      	add	r3, pc, #240	; (adr r3, 8004298 <__kernel_sin+0x130>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	4680      	mov	r8, r0
 80041ae:	4689      	mov	r9, r1
 80041b0:	4620      	mov	r0, r4
 80041b2:	4629      	mov	r1, r5
 80041b4:	f7fc f99c 	bl	80004f0 <__aeabi_dmul>
 80041b8:	a339      	add	r3, pc, #228	; (adr r3, 80042a0 <__kernel_sin+0x138>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fb ffe3 	bl	8000188 <__aeabi_dsub>
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	f7fc f993 	bl	80004f0 <__aeabi_dmul>
 80041ca:	a337      	add	r3, pc, #220	; (adr r3, 80042a8 <__kernel_sin+0x140>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fb ffdc 	bl	800018c <__adddf3>
 80041d4:	4622      	mov	r2, r4
 80041d6:	462b      	mov	r3, r5
 80041d8:	f7fc f98a 	bl	80004f0 <__aeabi_dmul>
 80041dc:	a334      	add	r3, pc, #208	; (adr r3, 80042b0 <__kernel_sin+0x148>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fb ffd1 	bl	8000188 <__aeabi_dsub>
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	f7fc f981 	bl	80004f0 <__aeabi_dmul>
 80041ee:	a332      	add	r3, pc, #200	; (adr r3, 80042b8 <__kernel_sin+0x150>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fb ffca 	bl	800018c <__adddf3>
 80041f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041fa:	4606      	mov	r6, r0
 80041fc:	460f      	mov	r7, r1
 80041fe:	b99b      	cbnz	r3, 8004228 <__kernel_sin+0xc0>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f972 	bl	80004f0 <__aeabi_dmul>
 800420c:	a32c      	add	r3, pc, #176	; (adr r3, 80042c0 <__kernel_sin+0x158>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fb ffb9 	bl	8000188 <__aeabi_dsub>
 8004216:	4642      	mov	r2, r8
 8004218:	464b      	mov	r3, r9
 800421a:	f7fc f969 	bl	80004f0 <__aeabi_dmul>
 800421e:	465a      	mov	r2, fp
 8004220:	4653      	mov	r3, sl
 8004222:	f7fb ffb3 	bl	800018c <__adddf3>
 8004226:	e033      	b.n	8004290 <__kernel_sin+0x128>
 8004228:	2200      	movs	r2, #0
 800422a:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <__kernel_sin+0x160>)
 800422c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004230:	f7fc f95e 	bl	80004f0 <__aeabi_dmul>
 8004234:	4632      	mov	r2, r6
 8004236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800423a:	463b      	mov	r3, r7
 800423c:	4640      	mov	r0, r8
 800423e:	4649      	mov	r1, r9
 8004240:	f7fc f956 	bl	80004f0 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800424c:	f7fb ff9c 	bl	8000188 <__aeabi_dsub>
 8004250:	4622      	mov	r2, r4
 8004252:	462b      	mov	r3, r5
 8004254:	f7fc f94c 	bl	80004f0 <__aeabi_dmul>
 8004258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800425c:	f7fb ff94 	bl	8000188 <__aeabi_dsub>
 8004260:	a317      	add	r3, pc, #92	; (adr r3, 80042c0 <__kernel_sin+0x158>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	4604      	mov	r4, r0
 8004268:	460d      	mov	r5, r1
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f7fc f93f 	bl	80004f0 <__aeabi_dmul>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fb ff87 	bl	800018c <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4658      	mov	r0, fp
 8004284:	4651      	mov	r1, sl
 8004286:	f7fb ff7f 	bl	8000188 <__aeabi_dsub>
 800428a:	e001      	b.n	8004290 <__kernel_sin+0x128>
 800428c:	4658      	mov	r0, fp
 800428e:	4651      	mov	r1, sl
 8004290:	b005      	add	sp, #20
 8004292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004296:	bf00      	nop
 8004298:	5acfd57c 	.word	0x5acfd57c
 800429c:	3de5d93a 	.word	0x3de5d93a
 80042a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80042a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80042a8:	57b1fe7d 	.word	0x57b1fe7d
 80042ac:	3ec71de3 	.word	0x3ec71de3
 80042b0:	19c161d5 	.word	0x19c161d5
 80042b4:	3f2a01a0 	.word	0x3f2a01a0
 80042b8:	1110f8a6 	.word	0x1110f8a6
 80042bc:	3f811111 	.word	0x3f811111
 80042c0:	55555549 	.word	0x55555549
 80042c4:	3fc55555 	.word	0x3fc55555
 80042c8:	3fe00000 	.word	0x3fe00000

080042cc <fabs>:
 80042cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80042d0:	4770      	bx	lr
 80042d2:	0000      	movs	r0, r0
 80042d4:	0000      	movs	r0, r0
	...

080042d8 <floor>:
 80042d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80042e0:	f2a8 37ff 	subw	r7, r8, #1023	; 0x3ff
 80042e4:	2f13      	cmp	r7, #19
 80042e6:	4606      	mov	r6, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	460c      	mov	r4, r1
 80042ec:	4605      	mov	r5, r0
 80042ee:	dc33      	bgt.n	8004358 <floor+0x80>
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	da15      	bge.n	8004320 <floor+0x48>
 80042f4:	a334      	add	r3, pc, #208	; (adr r3, 80043c8 <floor+0xf0>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fb ff47 	bl	800018c <__adddf3>
 80042fe:	2200      	movs	r2, #0
 8004300:	2300      	movs	r3, #0
 8004302:	f7fc fb85 	bl	8000a10 <__aeabi_dcmpgt>
 8004306:	2800      	cmp	r0, #0
 8004308:	d057      	beq.n	80043ba <floor+0xe2>
 800430a:	2c00      	cmp	r4, #0
 800430c:	da53      	bge.n	80043b6 <floor+0xde>
 800430e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004312:	4333      	orrs	r3, r6
 8004314:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <floor+0xf8>)
 8004316:	f04f 0500 	mov.w	r5, #0
 800431a:	bf18      	it	ne
 800431c:	461c      	movne	r4, r3
 800431e:	e04c      	b.n	80043ba <floor+0xe2>
 8004320:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <floor+0xfc>)
 8004322:	fa42 f807 	asr.w	r8, r2, r7
 8004326:	ea01 0208 	and.w	r2, r1, r8
 800432a:	4302      	orrs	r2, r0
 800432c:	d048      	beq.n	80043c0 <floor+0xe8>
 800432e:	a326      	add	r3, pc, #152	; (adr r3, 80043c8 <floor+0xf0>)
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f7fb ff2a 	bl	800018c <__adddf3>
 8004338:	2200      	movs	r2, #0
 800433a:	2300      	movs	r3, #0
 800433c:	f7fc fb68 	bl	8000a10 <__aeabi_dcmpgt>
 8004340:	b3d8      	cbz	r0, 80043ba <floor+0xe2>
 8004342:	2c00      	cmp	r4, #0
 8004344:	bfbe      	ittt	lt
 8004346:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800434a:	fa43 f707 	asrlt.w	r7, r3, r7
 800434e:	19e4      	addlt	r4, r4, r7
 8004350:	ea24 0408 	bic.w	r4, r4, r8
 8004354:	2500      	movs	r5, #0
 8004356:	e030      	b.n	80043ba <floor+0xe2>
 8004358:	2f33      	cmp	r7, #51	; 0x33
 800435a:	dd07      	ble.n	800436c <floor+0x94>
 800435c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8004360:	d12e      	bne.n	80043c0 <floor+0xe8>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	f7fb ff11 	bl	800018c <__adddf3>
 800436a:	e02b      	b.n	80043c4 <floor+0xec>
 800436c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	fa22 f808 	lsr.w	r8, r2, r8
 8004378:	ea10 0f08 	tst.w	r0, r8
 800437c:	d020      	beq.n	80043c0 <floor+0xe8>
 800437e:	a312      	add	r3, pc, #72	; (adr r3, 80043c8 <floor+0xf0>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fb ff02 	bl	800018c <__adddf3>
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f7fc fb40 	bl	8000a10 <__aeabi_dcmpgt>
 8004390:	b198      	cbz	r0, 80043ba <floor+0xe2>
 8004392:	2c00      	cmp	r4, #0
 8004394:	da0c      	bge.n	80043b0 <floor+0xd8>
 8004396:	2f14      	cmp	r7, #20
 8004398:	d101      	bne.n	800439e <floor+0xc6>
 800439a:	3401      	adds	r4, #1
 800439c:	e008      	b.n	80043b0 <floor+0xd8>
 800439e:	2301      	movs	r3, #1
 80043a0:	f1c7 0734 	rsb	r7, r7, #52	; 0x34
 80043a4:	fa03 f707 	lsl.w	r7, r3, r7
 80043a8:	443d      	add	r5, r7
 80043aa:	42ae      	cmp	r6, r5
 80043ac:	bf88      	it	hi
 80043ae:	18e4      	addhi	r4, r4, r3
 80043b0:	ea25 0508 	bic.w	r5, r5, r8
 80043b4:	e001      	b.n	80043ba <floor+0xe2>
 80043b6:	2500      	movs	r5, #0
 80043b8:	462c      	mov	r4, r5
 80043ba:	4623      	mov	r3, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	e000      	b.n	80043c2 <floor+0xea>
 80043c0:	4630      	mov	r0, r6
 80043c2:	4619      	mov	r1, r3
 80043c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c8:	8800759c 	.word	0x8800759c
 80043cc:	7e37e43c 	.word	0x7e37e43c
 80043d0:	bff00000 	.word	0xbff00000
 80043d4:	000fffff 	.word	0x000fffff

080043d8 <scalbn>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	4616      	mov	r6, r2
 80043dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	460b      	mov	r3, r1
 80043e6:	b98a      	cbnz	r2, 800440c <scalbn+0x34>
 80043e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043ec:	4303      	orrs	r3, r0
 80043ee:	d050      	beq.n	8004492 <scalbn+0xba>
 80043f0:	2200      	movs	r2, #0
 80043f2:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <scalbn+0xd0>)
 80043f4:	f7fc f87c 	bl	80004f0 <__aeabi_dmul>
 80043f8:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <scalbn+0xd4>)
 80043fa:	4604      	mov	r4, r0
 80043fc:	4296      	cmp	r6, r2
 80043fe:	460d      	mov	r5, r1
 8004400:	460b      	mov	r3, r1
 8004402:	db34      	blt.n	800446e <scalbn+0x96>
 8004404:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004408:	3a36      	subs	r2, #54	; 0x36
 800440a:	e008      	b.n	800441e <scalbn+0x46>
 800440c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004410:	42ba      	cmp	r2, r7
 8004412:	d104      	bne.n	800441e <scalbn+0x46>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	f7fb feb8 	bl	800018c <__adddf3>
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004422:	4432      	add	r2, r6
 8004424:	428a      	cmp	r2, r1
 8004426:	dd02      	ble.n	800442e <scalbn+0x56>
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	e011      	b.n	8004452 <scalbn+0x7a>
 800442e:	2a00      	cmp	r2, #0
 8004430:	dd06      	ble.n	8004440 <scalbn+0x68>
 8004432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800443a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800443e:	e028      	b.n	8004492 <scalbn+0xba>
 8004440:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004444:	da17      	bge.n	8004476 <scalbn+0x9e>
 8004446:	f24c 3350 	movw	r3, #50000	; 0xc350
 800444a:	429e      	cmp	r6, r3
 800444c:	4622      	mov	r2, r4
 800444e:	462b      	mov	r3, r5
 8004450:	dd08      	ble.n	8004464 <scalbn+0x8c>
 8004452:	a111      	add	r1, pc, #68	; (adr r1, 8004498 <scalbn+0xc0>)
 8004454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004458:	f000 f82c 	bl	80044b4 <copysign>
 800445c:	a30e      	add	r3, pc, #56	; (adr r3, 8004498 <scalbn+0xc0>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	e013      	b.n	800448c <scalbn+0xb4>
 8004464:	a10e      	add	r1, pc, #56	; (adr r1, 80044a0 <scalbn+0xc8>)
 8004466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800446a:	f000 f823 	bl	80044b4 <copysign>
 800446e:	a30c      	add	r3, pc, #48	; (adr r3, 80044a0 <scalbn+0xc8>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	e00a      	b.n	800448c <scalbn+0xb4>
 8004476:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800447a:	3236      	adds	r2, #54	; 0x36
 800447c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004480:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <scalbn+0xd8>)
 800448a:	2200      	movs	r2, #0
 800448c:	f7fc f830 	bl	80004f0 <__aeabi_dmul>
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004492:	4620      	mov	r0, r4
 8004494:	4629      	mov	r1, r5
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	8800759c 	.word	0x8800759c
 800449c:	7e37e43c 	.word	0x7e37e43c
 80044a0:	c2f8f359 	.word	0xc2f8f359
 80044a4:	01a56e1f 	.word	0x01a56e1f
 80044a8:	43500000 	.word	0x43500000
 80044ac:	ffff3cb0 	.word	0xffff3cb0
 80044b0:	3c900000 	.word	0x3c900000

080044b4 <copysign>:
 80044b4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80044b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	ea42 0103 	orr.w	r1, r2, r3
 80044c0:	4770      	bx	lr

080044c2 <abort>:
 80044c2:	b508      	push	{r3, lr}
 80044c4:	2006      	movs	r0, #6
 80044c6:	f000 f91d 	bl	8004704 <raise>
 80044ca:	2001      	movs	r0, #1
 80044cc:	f000 f956 	bl	800477c <_exit>

080044d0 <__libc_init_array>:
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <__libc_init_array+0x3c>)
 80044d2:	b570      	push	{r4, r5, r6, lr}
 80044d4:	461e      	mov	r6, r3
 80044d6:	4c0e      	ldr	r4, [pc, #56]	; (8004510 <__libc_init_array+0x40>)
 80044d8:	2500      	movs	r5, #0
 80044da:	1ae4      	subs	r4, r4, r3
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	42a5      	cmp	r5, r4
 80044e0:	d004      	beq.n	80044ec <__libc_init_array+0x1c>
 80044e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e6:	4798      	blx	r3
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7f8      	b.n	80044de <__libc_init_array+0xe>
 80044ec:	f000 f948 	bl	8004780 <_init>
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <__libc_init_array+0x44>)
 80044f2:	4c09      	ldr	r4, [pc, #36]	; (8004518 <__libc_init_array+0x48>)
 80044f4:	461e      	mov	r6, r3
 80044f6:	1ae4      	subs	r4, r4, r3
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2500      	movs	r5, #0
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d004      	beq.n	800450a <__libc_init_array+0x3a>
 8004500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004504:	4798      	blx	r3
 8004506:	3501      	adds	r5, #1
 8004508:	e7f8      	b.n	80044fc <__libc_init_array+0x2c>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	0800498c 	.word	0x0800498c
 8004510:	0800498c 	.word	0x0800498c
 8004514:	0800498c 	.word	0x0800498c
 8004518:	08004994 	.word	0x08004994

0800451c <malloc>:
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <malloc+0xc>)
 800451e:	4601      	mov	r1, r0
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f000 b857 	b.w	80045d4 <_malloc_r>
 8004526:	bf00      	nop
 8004528:	2000007c 	.word	0x2000007c

0800452c <free>:
 800452c:	4b02      	ldr	r3, [pc, #8]	; (8004538 <free+0xc>)
 800452e:	4601      	mov	r1, r0
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f000 b803 	b.w	800453c <_free_r>
 8004536:	bf00      	nop
 8004538:	2000007c 	.word	0x2000007c

0800453c <_free_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4605      	mov	r5, r0
 8004540:	2900      	cmp	r1, #0
 8004542:	d044      	beq.n	80045ce <_free_r+0x92>
 8004544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004548:	1f0c      	subs	r4, r1, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfb8      	it	lt
 800454e:	18e4      	addlt	r4, r4, r3
 8004550:	f000 f8f4 	bl	800473c <__malloc_lock>
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <_free_r+0x94>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	4611      	mov	r1, r2
 800455a:	b913      	cbnz	r3, 8004562 <_free_r+0x26>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	e030      	b.n	80045c4 <_free_r+0x88>
 8004562:	42a3      	cmp	r3, r4
 8004564:	d90d      	bls.n	8004582 <_free_r+0x46>
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	18a0      	adds	r0, r4, r2
 800456a:	4283      	cmp	r3, r0
 800456c:	bf01      	itttt	eq
 800456e:	6818      	ldreq	r0, [r3, #0]
 8004570:	685b      	ldreq	r3, [r3, #4]
 8004572:	1812      	addeq	r2, r2, r0
 8004574:	6022      	streq	r2, [r4, #0]
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	600c      	str	r4, [r1, #0]
 800457a:	e023      	b.n	80045c4 <_free_r+0x88>
 800457c:	42a2      	cmp	r2, r4
 800457e:	d803      	bhi.n	8004588 <_free_r+0x4c>
 8004580:	4613      	mov	r3, r2
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	2a00      	cmp	r2, #0
 8004586:	d1f9      	bne.n	800457c <_free_r+0x40>
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	1819      	adds	r1, r3, r0
 800458c:	42a1      	cmp	r1, r4
 800458e:	d10b      	bne.n	80045a8 <_free_r+0x6c>
 8004590:	6821      	ldr	r1, [r4, #0]
 8004592:	4401      	add	r1, r0
 8004594:	1858      	adds	r0, r3, r1
 8004596:	4282      	cmp	r2, r0
 8004598:	6019      	str	r1, [r3, #0]
 800459a:	d113      	bne.n	80045c4 <_free_r+0x88>
 800459c:	6810      	ldr	r0, [r2, #0]
 800459e:	6852      	ldr	r2, [r2, #4]
 80045a0:	4401      	add	r1, r0
 80045a2:	6019      	str	r1, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e00d      	b.n	80045c4 <_free_r+0x88>
 80045a8:	d902      	bls.n	80045b0 <_free_r+0x74>
 80045aa:	230c      	movs	r3, #12
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	e009      	b.n	80045c4 <_free_r+0x88>
 80045b0:	6821      	ldr	r1, [r4, #0]
 80045b2:	1860      	adds	r0, r4, r1
 80045b4:	4282      	cmp	r2, r0
 80045b6:	bf01      	itttt	eq
 80045b8:	6810      	ldreq	r0, [r2, #0]
 80045ba:	6852      	ldreq	r2, [r2, #4]
 80045bc:	1809      	addeq	r1, r1, r0
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6062      	str	r2, [r4, #4]
 80045c2:	605c      	str	r4, [r3, #4]
 80045c4:	4628      	mov	r0, r5
 80045c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ca:	f000 b8b8 	b.w	800473e <__malloc_unlock>
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	20000128 	.word	0x20000128

080045d4 <_malloc_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	1ccd      	adds	r5, r1, #3
 80045d8:	f025 0503 	bic.w	r5, r5, #3
 80045dc:	3508      	adds	r5, #8
 80045de:	2d0c      	cmp	r5, #12
 80045e0:	bf38      	it	cc
 80045e2:	250c      	movcc	r5, #12
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	4606      	mov	r6, r0
 80045e8:	db01      	blt.n	80045ee <_malloc_r+0x1a>
 80045ea:	42a9      	cmp	r1, r5
 80045ec:	d902      	bls.n	80045f4 <_malloc_r+0x20>
 80045ee:	230c      	movs	r3, #12
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	e046      	b.n	8004682 <_malloc_r+0xae>
 80045f4:	f000 f8a2 	bl	800473c <__malloc_lock>
 80045f8:	4b23      	ldr	r3, [pc, #140]	; (8004688 <_malloc_r+0xb4>)
 80045fa:	681c      	ldr	r4, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	4621      	mov	r1, r4
 8004600:	b1a1      	cbz	r1, 800462c <_malloc_r+0x58>
 8004602:	680b      	ldr	r3, [r1, #0]
 8004604:	1b5b      	subs	r3, r3, r5
 8004606:	d40e      	bmi.n	8004626 <_malloc_r+0x52>
 8004608:	2b0b      	cmp	r3, #11
 800460a:	d903      	bls.n	8004614 <_malloc_r+0x40>
 800460c:	600b      	str	r3, [r1, #0]
 800460e:	18cc      	adds	r4, r1, r3
 8004610:	50cd      	str	r5, [r1, r3]
 8004612:	e01e      	b.n	8004652 <_malloc_r+0x7e>
 8004614:	428c      	cmp	r4, r1
 8004616:	bf0b      	itete	eq
 8004618:	6863      	ldreq	r3, [r4, #4]
 800461a:	684b      	ldrne	r3, [r1, #4]
 800461c:	6013      	streq	r3, [r2, #0]
 800461e:	6063      	strne	r3, [r4, #4]
 8004620:	bf18      	it	ne
 8004622:	460c      	movne	r4, r1
 8004624:	e015      	b.n	8004652 <_malloc_r+0x7e>
 8004626:	460c      	mov	r4, r1
 8004628:	6849      	ldr	r1, [r1, #4]
 800462a:	e7e9      	b.n	8004600 <_malloc_r+0x2c>
 800462c:	4c17      	ldr	r4, [pc, #92]	; (800468c <_malloc_r+0xb8>)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	b91b      	cbnz	r3, 800463a <_malloc_r+0x66>
 8004632:	4630      	mov	r0, r6
 8004634:	f000 f82c 	bl	8004690 <_sbrk_r>
 8004638:	6020      	str	r0, [r4, #0]
 800463a:	4629      	mov	r1, r5
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f827 	bl	8004690 <_sbrk_r>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d018      	beq.n	8004678 <_malloc_r+0xa4>
 8004646:	1cc4      	adds	r4, r0, #3
 8004648:	f024 0403 	bic.w	r4, r4, #3
 800464c:	42a0      	cmp	r0, r4
 800464e:	d10d      	bne.n	800466c <_malloc_r+0x98>
 8004650:	6025      	str	r5, [r4, #0]
 8004652:	4630      	mov	r0, r6
 8004654:	f000 f873 	bl	800473e <__malloc_unlock>
 8004658:	f104 000b 	add.w	r0, r4, #11
 800465c:	1d23      	adds	r3, r4, #4
 800465e:	f020 0007 	bic.w	r0, r0, #7
 8004662:	1ac3      	subs	r3, r0, r3
 8004664:	d00e      	beq.n	8004684 <_malloc_r+0xb0>
 8004666:	425a      	negs	r2, r3
 8004668:	50e2      	str	r2, [r4, r3]
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	1a21      	subs	r1, r4, r0
 800466e:	4630      	mov	r0, r6
 8004670:	f000 f80e 	bl	8004690 <_sbrk_r>
 8004674:	3001      	adds	r0, #1
 8004676:	d1eb      	bne.n	8004650 <_malloc_r+0x7c>
 8004678:	230c      	movs	r3, #12
 800467a:	6033      	str	r3, [r6, #0]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f85e 	bl	800473e <__malloc_unlock>
 8004682:	2000      	movs	r0, #0
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	bf00      	nop
 8004688:	20000128 	.word	0x20000128
 800468c:	20000124 	.word	0x20000124

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4c06      	ldr	r4, [pc, #24]	; (80046ac <_sbrk_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4605      	mov	r5, r0
 8004698:	4608      	mov	r0, r1
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	f000 f860 	bl	8004760 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000158 	.word	0x20000158

080046b0 <_raise_r>:
 80046b0:	291f      	cmp	r1, #31
 80046b2:	b538      	push	{r3, r4, r5, lr}
 80046b4:	4604      	mov	r4, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	d904      	bls.n	80046c4 <_raise_r+0x14>
 80046ba:	2316      	movs	r3, #22
 80046bc:	6003      	str	r3, [r0, #0]
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80046c6:	b112      	cbz	r2, 80046ce <_raise_r+0x1e>
 80046c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046cc:	b94b      	cbnz	r3, 80046e2 <_raise_r+0x32>
 80046ce:	4620      	mov	r0, r4
 80046d0:	f000 f832 	bl	8004738 <_getpid_r>
 80046d4:	462a      	mov	r2, r5
 80046d6:	4601      	mov	r1, r0
 80046d8:	4620      	mov	r0, r4
 80046da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046de:	f000 b819 	b.w	8004714 <_kill_r>
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00c      	beq.n	8004700 <_raise_r+0x50>
 80046e6:	1c59      	adds	r1, r3, #1
 80046e8:	d103      	bne.n	80046f2 <_raise_r+0x42>
 80046ea:	2316      	movs	r3, #22
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	2001      	movs	r0, #1
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	2400      	movs	r4, #0
 80046f4:	4628      	mov	r0, r5
 80046f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80046fa:	4798      	blx	r3
 80046fc:	4620      	mov	r0, r4
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	2000      	movs	r0, #0
 8004702:	bd38      	pop	{r3, r4, r5, pc}

08004704 <raise>:
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <raise+0xc>)
 8004706:	4601      	mov	r1, r0
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	f7ff bfd1 	b.w	80046b0 <_raise_r>
 800470e:	bf00      	nop
 8004710:	2000007c 	.word	0x2000007c

08004714 <_kill_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4c07      	ldr	r4, [pc, #28]	; (8004734 <_kill_r+0x20>)
 8004718:	2300      	movs	r3, #0
 800471a:	4605      	mov	r5, r0
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f000 f815 	bl	8004750 <_kill>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	d102      	bne.n	8004730 <_kill_r+0x1c>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	b103      	cbz	r3, 8004730 <_kill_r+0x1c>
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	bf00      	nop
 8004734:	20000158 	.word	0x20000158

08004738 <_getpid_r>:
 8004738:	f000 b802 	b.w	8004740 <_getpid>

0800473c <__malloc_lock>:
 800473c:	4770      	bx	lr

0800473e <__malloc_unlock>:
 800473e:	4770      	bx	lr

08004740 <_getpid>:
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <_getpid+0xc>)
 8004742:	2258      	movs	r2, #88	; 0x58
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f04f 30ff 	mov.w	r0, #4294967295
 800474a:	4770      	bx	lr
 800474c:	20000158 	.word	0x20000158

08004750 <_kill>:
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <_kill+0xc>)
 8004752:	2258      	movs	r2, #88	; 0x58
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295
 800475a:	4770      	bx	lr
 800475c:	20000158 	.word	0x20000158

08004760 <_sbrk>:
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <_sbrk+0x14>)
 8004762:	4602      	mov	r2, r0
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	b909      	cbnz	r1, 800476c <_sbrk+0xc>
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <_sbrk+0x18>)
 800476a:	6019      	str	r1, [r3, #0]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	4402      	add	r2, r0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	4770      	bx	lr
 8004774:	2000012c 	.word	0x2000012c
 8004778:	2000015c 	.word	0x2000015c

0800477c <_exit>:
 800477c:	e7fe      	b.n	800477c <_exit>
	...

08004780 <_init>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr

0800478c <_fini>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr
