
C:\Users\Juraj\Documents\GitHub\Robot6x6\Nucleo\motor_master\Debug\motor_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000080  08002784  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000f4  08002784  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000044cc  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ef6  00000000  00000000  00024575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005d8  00000000  00000000  00025470  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000530  00000000  00000000  00025a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000020d8  00000000  00000000  00025f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f18  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001af0  00000000  00000000  00029fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  0002bad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  0002bb14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080026c8 	.word	0x080026c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080026c8 	.word	0x080026c8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	2300      	movs	r3, #0
 8000a32:	73bb      	strb	r3, [r7, #14]
 8000a34:	230f      	movs	r3, #15
 8000a36:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	78db      	ldrb	r3, [r3, #3]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d038      	beq.n	8000ab2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <NVIC_Init+0xb8>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f1c3 0304 	rsb	r3, r3, #4
 8000a54:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a56:	7b7a      	ldrb	r2, [r7, #13]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	fa42 f303 	asr.w	r3, r2, r3
 8000a5e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	461a      	mov	r2, r3
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	789a      	ldrb	r2, [r3, #2]
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	4013      	ands	r3, r2
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <NVIC_Init+0xbc>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <NVIC_Init+0xbc>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	095b      	lsrs	r3, r3, #5
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ab0:	e00f      	b.n	8000ad2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ab2:	490b      	ldr	r1, [pc, #44]	; (8000ae0 <NVIC_Init+0xbc>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f003 031f 	and.w	r3, r3, #31
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aca:	f100 0320 	add.w	r3, r0, #32
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000af4:	4013      	ands	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <DMA_DeInit+0x140>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d106      	bne.n	8000b28 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000b1a:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <DMA_DeInit+0x144>)
 8000b1c:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <DMA_DeInit+0x144>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f043 030f 	orr.w	r3, r3, #15
 8000b24:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b26:	e077      	b.n	8000c18 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <DMA_DeInit+0x148>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d106      	bne.n	8000b3e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000b30:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <DMA_DeInit+0x144>)
 8000b32:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <DMA_DeInit+0x144>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b3a:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b3c:	e06c      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <DMA_DeInit+0x14c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d106      	bne.n	8000b54 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000b46:	4a38      	ldr	r2, [pc, #224]	; (8000c28 <DMA_DeInit+0x144>)
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <DMA_DeInit+0x144>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b50:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b52:	e061      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a37      	ldr	r2, [pc, #220]	; (8000c34 <DMA_DeInit+0x150>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d106      	bne.n	8000b6a <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000b5c:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <DMA_DeInit+0x144>)
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <DMA_DeInit+0x144>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b66:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b68:	e056      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <DMA_DeInit+0x154>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000b72:	4a2d      	ldr	r2, [pc, #180]	; (8000c28 <DMA_DeInit+0x144>)
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <DMA_DeInit+0x144>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b7c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b7e:	e04b      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <DMA_DeInit+0x158>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d106      	bne.n	8000b96 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <DMA_DeInit+0x144>)
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <DMA_DeInit+0x144>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b92:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b94:	e040      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <DMA_DeInit+0x15c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d106      	bne.n	8000bac <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <DMA_DeInit+0x144>)
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <DMA_DeInit+0x144>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ba8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000baa:	e035      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <DMA_DeInit+0x160>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d106      	bne.n	8000bc2 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000bb4:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <DMA_DeInit+0x164>)
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <DMA_DeInit+0x164>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f043 030f 	orr.w	r3, r3, #15
 8000bbe:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bc0:	e02a      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <DMA_DeInit+0x168>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d106      	bne.n	8000bd8 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <DMA_DeInit+0x164>)
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <DMA_DeInit+0x164>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000bd4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bd6:	e01f      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <DMA_DeInit+0x16c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d106      	bne.n	8000bee <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <DMA_DeInit+0x164>)
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <DMA_DeInit+0x164>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000bea:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000bec:	e014      	b.n	8000c18 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <DMA_DeInit+0x170>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <DMA_DeInit+0x164>)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <DMA_DeInit+0x164>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c00:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000c02:	e009      	b.n	8000c18 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <DMA_DeInit+0x174>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d105      	bne.n	8000c18 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <DMA_DeInit+0x164>)
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <DMA_DeInit+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c16:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40026008 	.word	0x40026008
 8000c28:	40026000 	.word	0x40026000
 8000c2c:	4002601c 	.word	0x4002601c
 8000c30:	40026030 	.word	0x40026030
 8000c34:	40026044 	.word	0x40026044
 8000c38:	40026058 	.word	0x40026058
 8000c3c:	4002606c 	.word	0x4002606c
 8000c40:	40026080 	.word	0x40026080
 8000c44:	40026408 	.word	0x40026408
 8000c48:	40026400 	.word	0x40026400
 8000c4c:	4002641c 	.word	0x4002641c
 8000c50:	40026430 	.word	0x40026430
 8000c54:	40026444 	.word	0x40026444
 8000c58:	40026458 	.word	0x40026458

08000c5c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c7a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ca2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60da      	str	r2, [r3, #12]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f043 0201 	orr.w	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000cf6:	e006      	b.n	8000d06 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000d00:	4013      	ands	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000d1c:	887a      	ldrh	r2, [r7, #2]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	4613      	mov	r3, r2
 8000d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000d4c:	e006      	b.n	8000d5c <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <DMA_GetFlagStatus+0x48>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	e002      	b.n	8000d90 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DMA_GetFlagStatus+0x4c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e001      	b.n	8000da4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40026000 	.word	0x40026000
 8000db4:	40026400 	.word	0x40026400

08000db8 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <DMA_ClearFlag+0x2c>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000dd0:	e002      	b.n	8000dd8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <DMA_ClearFlag+0x30>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6053      	str	r3, [r2, #4]
  }  
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40026000 	.word	0x40026000
 8000de8:	40026400 	.word	0x40026400

08000dec <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e07e      	b.n	8000f06 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d16d      	bne.n	8000f00 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	4619      	mov	r1, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d003      	beq.n	8000e62 <GPIO_Init+0x76>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d136      	bne.n	8000ed0 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	4619      	mov	r1, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	889b      	ldrh	r3, [r3, #4]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	889b      	ldrh	r3, [r3, #4]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	799b      	ldrb	r3, [r3, #6]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2103      	movs	r1, #3
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	79db      	ldrb	r3, [r3, #7]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	f67f af7d 	bls.w	8000e08 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000f0e:	bf00      	nop
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f30:	787a      	ldrb	r2, [r7, #1]
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	210f      	movs	r1, #15
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	ea02 0103 	and.w	r1, r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f100 0208 	add.w	r2, r0, #8
 8000f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <I2C_DeInit+0x44>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d10a      	bne.n	8000fce <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fbe:	f000 fb3f 	bl	8001640 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fc8:	f000 fb3a 	bl	8001640 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000fcc:	e009      	b.n	8000fe2 <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000fd4:	f000 fb34 	bl	8001640 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000fde:	f000 fb2f 	bl	8001640 <RCC_APB1PeriphResetCmd>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40005400 	.word	0x40005400

08000ff0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ffe:	2300      	movs	r3, #0
 8001000:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001002:	2304      	movs	r3, #4
 8001004:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <I2C_Init+0x174>)
 8001008:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001012:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001016:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f9f9 	bl	8001414 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <I2C_Init+0x178>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001032:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001036:	4313      	orrs	r3, r2
 8001038:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800103e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a44      	ldr	r2, [pc, #272]	; (800116c <I2C_Init+0x17c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d815      	bhi.n	800108a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800106c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106e:	2b03      	cmp	r3, #3
 8001070:	d801      	bhi.n	8001076 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001072:	2304      	movs	r3, #4
 8001074:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001076:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107a:	4313      	orrs	r3, r2
 800107c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800107e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001080:	3301      	adds	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	841a      	strh	r2, [r3, #32]
 8001088:	e040      	b.n	800110c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	88db      	ldrh	r3, [r3, #6]
 800108e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001092:	4293      	cmp	r3, r2
 8001094:	d109      	bne.n	80010aa <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010a8:	e00e      	b.n	80010c8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80010c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80010c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80010d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80010da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010de:	4313      	orrs	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80010ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <I2C_Init+0x180>)
 80010f8:	fb82 1203 	smull	r1, r2, r2, r3
 80010fc:	1192      	asrs	r2, r2, #6
 80010fe:	17db      	asrs	r3, r3, #31
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	b29b      	uxth	r3, r3
 8001104:	3301      	adds	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001110:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800112a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	889a      	ldrh	r2, [r3, #4]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	895b      	ldrh	r3, [r3, #10]
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001142:	4313      	orrs	r3, r2
 8001144:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800114a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	899a      	ldrh	r2, [r3, #12]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	891b      	ldrh	r3, [r3, #8]
 8001154:	4313      	orrs	r3, r2
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	811a      	strh	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	007a1200 	.word	0x007a1200
 8001168:	431bde83 	.word	0x431bde83
 800116c:	000186a0 	.word	0x000186a0
 8001170:	10624dd3 	.word	0x10624dd3

08001174 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001196:	e007      	b.n	80011a8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	801a      	strh	r2, [r3, #0]
  }
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d008      	beq.n	80011d8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80011d6:	e007      	b.n	80011e8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	801a      	strh	r2, [r3, #0]
  }
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001216:	e007      	b.n	8001228 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	801a      	strh	r2, [r3, #0]
  }
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001256:	e007      	b.n	8001268 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	801a      	strh	r2, [r3, #0]
  }
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
 8001280:	4613      	mov	r3, r2
 8001282:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	70fb      	strb	r3, [r7, #3]
 8001292:	e003      	b.n	800129c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	821a      	strh	r2, [r3, #16]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	821a      	strh	r2, [r3, #16]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d008      	beq.n	80012f4 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80012f2:	e007      	b.n	8001304 <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	809a      	strh	r2, [r3, #4]
  }
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d008      	beq.n	8001334 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	889b      	ldrh	r3, [r3, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 8001332:	e007      	b.n	8001344 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	889b      	ldrh	r3, [r3, #4]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
  }
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8a9b      	ldrh	r3, [r3, #20]
 800136e:	b29b      	uxth	r3, r3
 8001370:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	8b1b      	ldrh	r3, [r3, #24]
 8001376:	b29b      	uxth	r3, r3
 8001378:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4313      	orrs	r3, r2
 8001386:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800138a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	401a      	ands	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d102      	bne.n	800139e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001398:	2301      	movs	r3, #1
 800139a:	75fb      	strb	r3, [r7, #23]
 800139c:	e001      	b.n	80013a2 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	0f1b      	lsrs	r3, r3, #28
 80013ce:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013d6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3314      	adds	r3, #20
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e005      	b.n	80013f2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3318      	adds	r3, #24
 80013f0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
 8001402:	e001      	b.n	8001408 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001408:	7dfb      	ldrb	r3, [r7, #23]
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001434:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d865      	bhi.n	8001510 <RCC_GetClocksFreq+0xfc>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <RCC_GetClocksFreq+0x38>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	08001481 	.word	0x08001481
 8001450:	08001511 	.word	0x08001511
 8001454:	08001511 	.word	0x08001511
 8001458:	08001511 	.word	0x08001511
 800145c:	080014a1 	.word	0x080014a1
 8001460:	08001511 	.word	0x08001511
 8001464:	08001511 	.word	0x08001511
 8001468:	08001511 	.word	0x08001511
 800146c:	080014a9 	.word	0x080014a9
 8001470:	08001511 	.word	0x08001511
 8001474:	08001511 	.word	0x08001511
 8001478:	08001511 	.word	0x08001511
 800147c:	080014b1 	.word	0x080014b1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001488:	0b5b      	lsrs	r3, r3, #13
 800148a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
      break;
 800149e:	e047      	b.n	8001530 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <RCC_GetClocksFreq+0x1a4>)
 80014a4:	601a      	str	r2, [r3, #0]
      break;
 80014a6:	e043      	b.n	8001530 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a44      	ldr	r2, [pc, #272]	; (80015bc <RCC_GetClocksFreq+0x1a8>)
 80014ac:	601a      	str	r2, [r3, #0]
      break;
 80014ae:	e03f      	b.n	8001530 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80014b8:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014c2:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	0c9b      	lsrs	r3, r3, #18
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <RCC_GetClocksFreq+0x1ac>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	0d9b      	lsrs	r3, r3, #22
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <RCC_GetClocksFreq+0x1a4>)
 80014ec:	fb02 f203 	mul.w	r2, r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80014fa:	e019      	b.n	8001530 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <RCC_GetClocksFreq+0x1a8>)
 8001500:	fb02 f203 	mul.w	r2, r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fbb2 f2f3 	udiv	r2, r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
      }
      break;
 800150e:	e00f      	b.n	8001530 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001518:	0b5b      	lsrs	r3, r3, #13
 800151a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
      break;
 800152e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001538:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <RCC_GetClocksFreq+0x1b0>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	40da      	lsrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001560:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001568:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <RCC_GetClocksFreq+0x1b0>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	40da      	lsrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <RCC_GetClocksFreq+0x1a0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001588:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	0adb      	lsrs	r3, r3, #11
 800158e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <RCC_GetClocksFreq+0x1b0>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	40da      	lsrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	20000000 	.word	0x20000000
 80015c4:	2000000c 	.word	0x2000000c

080015c8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80015da:	4909      	ldr	r1, [pc, #36]	; (8001600 <RCC_AHBPeriphClockCmd+0x38>)
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <RCC_AHBPeriphClockCmd+0x38>)
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80015e6:	e006      	b.n	80015f6 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <RCC_AHBPeriphClockCmd+0x38>)
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <RCC_AHBPeriphClockCmd+0x38>)
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	61cb      	str	r3, [r1, #28]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800

08001604 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <RCC_APB1PeriphClockCmd+0x38>)
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <RCC_APB1PeriphClockCmd+0x38>)
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001622:	e006      	b.n	8001632 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001624:	4905      	ldr	r1, [pc, #20]	; (800163c <RCC_APB1PeriphClockCmd+0x38>)
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <RCC_APB1PeriphClockCmd+0x38>)
 8001628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	43db      	mvns	r3, r3
 800162e:	4013      	ands	r3, r2
 8001630:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40023800 	.word	0x40023800

08001640 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001652:	4909      	ldr	r1, [pc, #36]	; (8001678 <RCC_APB1PeriphResetCmd+0x38>)
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <RCC_APB1PeriphResetCmd+0x38>)
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800165e:	e006      	b.n	800166e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001660:	4905      	ldr	r1, [pc, #20]	; (8001678 <RCC_APB1PeriphResetCmd+0x38>)
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <RCC_APB1PeriphResetCmd+0x38>)
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	43db      	mvns	r3, r3
 800166a:	4013      	ands	r3, r2
 800166c:	618b      	str	r3, [r1, #24]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40023800 	.word	0x40023800

0800167c <I2C2_initDMA>:

uint32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C2_initDMA(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001682:	2101      	movs	r1, #1
 8001684:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001688:	f7ff ff9e 	bl	80015c8 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel5); //reset DMA1 channe1 to default values;
 800168c:	481c      	ldr	r0, [pc, #112]	; (8001700 <I2C2_initDMA+0x84>)
 800168e:	f7ff fa29 	bl	8000ae4 <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005810; //=0x40005810 : address of data reading register of I2C2
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <I2C2_initDMA+0x88>)
 8001694:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer; //variable to store data
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <I2C2_initDMA+0x8c>)
 8001698:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; //channel will be used for peripheral to memory transfer
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; //setting normal mode (non circular)
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;	//medium priority
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//Location assigned to peripheral register will be source
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 2;	//number of data to be transfered
 80016ac:	2302      	movs	r3, #2
 80016ae:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; //automatic memory increment disable for peripheral
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	//automatic memory increment enable for memory
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//source peripheral data size = 8bit
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	//destination memory data size = 8bit
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	480e      	ldr	r0, [pc, #56]	; (8001700 <I2C2_initDMA+0x84>)
 80016c6:	f7ff fac9 	bl	8000c5c <DMA_Init>
	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2102      	movs	r1, #2
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <I2C2_initDMA+0x84>)
 80016d0:	f7ff fb2c 	bl	8000d2c <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn; //I2C2 connect to channel 5 of DMA1
 80016d4:	230f      	movs	r3, #15
 80016d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 80016ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f997 	bl	8000a24 <NVIC_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40026058 	.word	0x40026058
 8001704:	40005810 	.word	0x40005810
 8001708:	200000c8 	.word	0x200000c8

0800170c <I2C2_getDeviceAddress>:

uint8_t I2C2_getDeviceAddress(void) {
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	return deviceAddrUseI2c;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <I2C2_getDeviceAddress+0x10>)
 8001712:	781b      	ldrb	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	2000009c 	.word	0x2000009c

08001720 <I2C2_clearDeviceAddress>:

void I2C2_clearDeviceAddress(void) {
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <I2C2_clearDeviceAddress+0x14>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000009c 	.word	0x2000009c

08001738 <I2C2_getRxBuffer>:

uint32_t I2C2_getRxBuffer(int index) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <I2C2_getRxBuffer+0x1c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000c8 	.word	0x200000c8

08001758 <I2C2_getReadRegister>:

uint8_t I2C2_getReadRegister(void) {
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return readReg;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <I2C2_getReadRegister+0x10>)
 800175e:	781b      	ldrb	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	2000009d 	.word	0x2000009d

0800176c <I2C2_clearReadRegister>:

void I2C2_clearReadRegister(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	readReg = 0;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <I2C2_clearReadRegister+0x14>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000009d 	.word	0x2000009d

08001784 <I2C2_Init>:


void I2C2_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff ff1b 	bl	80015c8 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001792:	2101      	movs	r1, #1
 8001794:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001798:	f7ff ff34 	bl	8001604 <RCC_APB1PeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 800179c:	2204      	movs	r2, #4
 800179e:	210a      	movs	r1, #10
 80017a0:	481e      	ldr	r0, [pc, #120]	; (800181c <I2C2_Init+0x98>)
 80017a2:	f7ff fbb9 	bl	8000f18 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 80017a6:	2204      	movs	r2, #4
 80017a8:	210b      	movs	r1, #11
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <I2C2_Init+0x98>)
 80017ac:	f7ff fbb4 	bl	8000f18 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 80017b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80017b6:	2302      	movs	r3, #2
 80017b8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80017c2:	2303      	movs	r3, #3
 80017c4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <I2C2_Init+0x98>)
 80017ce:	f7ff fb0d 	bl	8000dec <GPIO_Init>

	I2C_DeInit(I2C2);
 80017d2:	4813      	ldr	r0, [pc, #76]	; (8001820 <I2C2_Init+0x9c>)
 80017d4:	f7ff fbe8 	bl	8000fa8 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80017d8:	2300      	movs	r3, #0
 80017da:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 80017dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e0:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80017e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ea:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80017ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017f0:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <I2C2_Init+0xa0>)
 80017f4:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C2, &I2C_InitStructure);
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <I2C2_Init+0x9c>)
 80017fc:	f7ff fbf8 	bl	8000ff0 <I2C_Init>
	I2C_Cmd(I2C2, ENABLE);
 8001800:	2101      	movs	r1, #1
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <I2C2_Init+0x9c>)
 8001804:	f7ff fcb6 	bl	8001174 <I2C_Cmd>
	I2C_AcknowledgeConfig(I2C2, ENABLE);
 8001808:	2101      	movs	r1, #1
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <I2C2_Init+0x9c>)
 800180c:	f7ff fd12 	bl	8001234 <I2C_AcknowledgeConfig>
	I2C2_initDMA();
 8001810:	f7ff ff34 	bl	800167c <I2C2_initDMA>
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40020400 	.word	0x40020400
 8001820:	40005800 	.word	0x40005800
 8001824:	00061a80 	.word	0x00061a80

08001828 <I2C2_DMA_Read>:
		;
	I2C_GenerateSTOP(I2C2, ENABLE);

}

void I2C2_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,uint8_t numberBytesReceive) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	460b      	mov	r3, r1
 8001834:	71bb      	strb	r3, [r7, #6]
 8001836:	4613      	mov	r3, r2
 8001838:	717b      	strb	r3, [r7, #5]
	while (deviceAddrUseI2c != 0);
 800183a:	bf00      	nop
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <I2C2_DMA_Read+0xf8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1fb      	bne.n	800183c <I2C2_DMA_Read+0x14>
	deviceAddrUseI2c = slaveAddr;
 8001844:	4a36      	ldr	r2, [pc, #216]	; (8001920 <I2C2_DMA_Read+0xf8>)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	7013      	strb	r3, [r2, #0]
	readReg = readAddr;
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <I2C2_DMA_Read+0xfc>)
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	7013      	strb	r3, [r2, #0]

	/* Disable DMA channel*/
	DMA_Cmd(DMA1_Channel5, DISABLE);
 8001850:	2100      	movs	r1, #0
 8001852:	4835      	ldr	r0, [pc, #212]	; (8001928 <I2C2_DMA_Read+0x100>)
 8001854:	f7ff fa40 	bl	8000cd8 <DMA_Cmd>

	DMA_SetCurrDataCounter(DMA1_Channel5, numberBytesReceive);
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4619      	mov	r1, r3
 800185e:	4832      	ldr	r0, [pc, #200]	; (8001928 <I2C2_DMA_Read+0x100>)
 8001860:	f7ff fa56 	bl	8000d10 <DMA_SetCurrDataCounter>

	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY))
 8001864:	bf00      	nop
 8001866:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800186a:	4830      	ldr	r0, [pc, #192]	; (800192c <I2C2_DMA_Read+0x104>)
 800186c:	f7ff fda0 	bl	80013b0 <I2C_GetFlagStatus>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f7      	bne.n	8001866 <I2C2_DMA_Read+0x3e>
		;

	/* Enable DMA NACK automatic generation */
	I2C_DMALastTransferCmd(I2C2, ENABLE); //Note this one, very important
 8001876:	2101      	movs	r1, #1
 8001878:	482c      	ldr	r0, [pc, #176]	; (800192c <I2C2_DMA_Read+0x104>)
 800187a:	f7ff fd49 	bl	8001310 <I2C_DMALastTransferCmd>

	/* Send START condition */
	I2C_GenerateSTART(I2C2, ENABLE);
 800187e:	2101      	movs	r1, #1
 8001880:	482a      	ldr	r0, [pc, #168]	; (800192c <I2C2_DMA_Read+0x104>)
 8001882:	f7ff fc97 	bl	80011b4 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 8001886:	bf00      	nop
 8001888:	4929      	ldr	r1, [pc, #164]	; (8001930 <I2C2_DMA_Read+0x108>)
 800188a:	4828      	ldr	r0, [pc, #160]	; (800192c <I2C2_DMA_Read+0x104>)
 800188c:	f7ff fd60 	bl	8001350 <I2C_CheckEvent>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f8      	beq.n	8001888 <I2C2_DMA_Read+0x60>
		;

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Transmitter);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	4823      	ldr	r0, [pc, #140]	; (800192c <I2C2_DMA_Read+0x104>)
 800189e:	f7ff fce9 	bl	8001274 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2,
 80018a2:	bf00      	nop
 80018a4:	4923      	ldr	r1, [pc, #140]	; (8001934 <I2C2_DMA_Read+0x10c>)
 80018a6:	4821      	ldr	r0, [pc, #132]	; (800192c <I2C2_DMA_Read+0x104>)
 80018a8:	f7ff fd52 	bl	8001350 <I2C_CheckEvent>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f8      	beq.n	80018a4 <I2C2_DMA_Read+0x7c>
	I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(I2C2, ENABLE);
 80018b2:	2101      	movs	r1, #1
 80018b4:	481d      	ldr	r0, [pc, #116]	; (800192c <I2C2_DMA_Read+0x104>)
 80018b6:	f7ff fc5d 	bl	8001174 <I2C_Cmd>

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(I2C2, readAddr);
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	4619      	mov	r1, r3
 80018be:	481b      	ldr	r0, [pc, #108]	; (800192c <I2C2_DMA_Read+0x104>)
 80018c0:	f7ff fcf6 	bl	80012b0 <I2C_SendData>

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80018c4:	bf00      	nop
 80018c6:	491c      	ldr	r1, [pc, #112]	; (8001938 <I2C2_DMA_Read+0x110>)
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <I2C2_DMA_Read+0x104>)
 80018ca:	f7ff fd41 	bl	8001350 <I2C_CheckEvent>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f8      	beq.n	80018c6 <I2C2_DMA_Read+0x9e>
		;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C2, ENABLE);
 80018d4:	2101      	movs	r1, #1
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <I2C2_DMA_Read+0x104>)
 80018d8:	f7ff fc6c 	bl	80011b4 <I2C_GenerateSTART>

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT))
 80018dc:	bf00      	nop
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <I2C2_DMA_Read+0x108>)
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <I2C2_DMA_Read+0x104>)
 80018e2:	f7ff fd35 	bl	8001350 <I2C_CheckEvent>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f8      	beq.n	80018de <I2C2_DMA_Read+0xb6>
		;

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(I2C2, slaveAddr, I2C_Direction_Receiver);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <I2C2_DMA_Read+0x104>)
 80018f4:	f7ff fcbe 	bl	8001274 <I2C_Send7bitAddress>

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80018f8:	bf00      	nop
 80018fa:	4910      	ldr	r1, [pc, #64]	; (800193c <I2C2_DMA_Read+0x114>)
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <I2C2_DMA_Read+0x104>)
 80018fe:	f7ff fd27 	bl	8001350 <I2C_CheckEvent>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f8      	beq.n	80018fa <I2C2_DMA_Read+0xd2>
		;

	/* Start DMA to receive data from I2C */
	DMA_Cmd(DMA1_Channel5, ENABLE);
 8001908:	2101      	movs	r1, #1
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <I2C2_DMA_Read+0x100>)
 800190c:	f7ff f9e4 	bl	8000cd8 <DMA_Cmd>
	I2C_DMACmd(I2C2, ENABLE);
 8001910:	2101      	movs	r1, #1
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <I2C2_DMA_Read+0x104>)
 8001914:	f7ff fcdc 	bl	80012d0 <I2C_DMACmd>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000009c 	.word	0x2000009c
 8001924:	2000009d 	.word	0x2000009d
 8001928:	40026058 	.word	0x40026058
 800192c:	40005800 	.word	0x40005800
 8001930:	00030001 	.word	0x00030001
 8001934:	00070082 	.word	0x00070082
 8001938:	00070084 	.word	0x00070084
 800193c:	00030002 	.word	0x00030002

08001940 <_ZN5MotorC1Eh>:
#include <Motor/Motor.h>
//------------------------------------------------------------------
Motor::Motor(uint8_t motorAddr) {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <_ZN5MotorC1Eh+0x3c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
	this->motorAddr = motorAddr;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	711a      	strb	r2, [r3, #4]
	this->ticks = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
	this->speedRaw = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	819a      	strh	r2, [r3, #12]
	this->current = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	821a      	strh	r2, [r3, #16]
	this->voltageRaw = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	81da      	strh	r2, [r3, #14]
}
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	080026e8 	.word	0x080026e8

08001980 <_ZN5MotorD1Ev>:
//------------------------------------------------------------------
Motor::~Motor() {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <_ZN5MotorD1Ev+0x24>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]

}
 800198e:	2300      	movs	r3, #0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <_ZN5MotorD1Ev+0x1a>
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fd2c 	bl	80023f2 <_ZdlPv>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	080026e8 	.word	0x080026e8

080019a8 <_ZN5MotorD0Ev>:
	this->speedRaw = 0;
	this->current = 0;
	this->voltageRaw = 0;
}
//------------------------------------------------------------------
Motor::~Motor() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

}
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe5 	bl	8001980 <_ZN5MotorD1Ev>
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fd1b 	bl	80023f2 <_ZdlPv>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop

080019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>:
	tmp[1] = data & 0xFF;
	tmp[0] = (data >> 8) && 0xFF;
	I2C2_BytesWrite(this->motorAddr, tmp, 2, SETPWMREG);
}
//------------------------------------------------------------------
void Motor::DMADeltaTicksInvoke(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	I2C2_DMA_Read(this->motorAddr, GETDELTATICKSREG, 2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	791b      	ldrb	r3, [r3, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	2103      	movs	r1, #3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff25 	bl	8001828 <I2C2_DMA_Read>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop

080019e8 <_ZN5Motor14DMASpeedInvokeEv>:
//------------------------------------------------------------------
void Motor::DMAVoltageInvoke(void) {
	I2C2_DMA_Read(this->motorAddr, GETVOLTAGEREG, 2);
}
//------------------------------------------------------------------
void Motor::DMASpeedInvoke(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	I2C2_DMA_Read(this->motorAddr, GETSPEEDREG, 2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff15 	bl	8001828 <I2C2_DMA_Read>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop

08001a08 <_ZN5Motor13addDeltaTicksEs>:
//------------------------------------------------------------------
void Motor::addDeltaTicks(int16_t data) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
	this->ticks += data;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a1c:	441a      	add	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <_ZN5Motor8getTicksEv>:
//------------------------------------------------------------------
long Motor::getTicks(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	while (I2C2_getReadRegister() == GETDELTATICKSREG)
 8001a34:	f7ff fe90 	bl	8001758 <I2C2_getReadRegister>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	bf0c      	ite	eq
 8001a3e:	2301      	moveq	r3, #1
 8001a40:	2300      	movne	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d000      	beq.n	8001a4a <_ZN5Motor8getTicksEv+0x1e>
 8001a48:	e7f4      	b.n	8001a34 <_ZN5Motor8getTicksEv+0x8>
		;
	return this->ticks;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop

08001a58 <_ZN5Motor11getDistanceEv>:
//------------------------------------------------------------------
double Motor::getDistance(void) {
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	return (double)getTicks()*((wheelDiameter*M_PI)/(numberTicksOfWheel));
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe3 	bl	8001a2c <_ZN5Motor8getTicksEv>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fcdb 	bl	8000424 <__aeabi_i2d>
 8001a6e:	a306      	add	r3, pc, #24	; (adr r3, 8001a88 <_ZN5Motor11getDistanceEv+0x30>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fd3c 	bl	80004f0 <__aeabi_dmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4621      	mov	r1, r4
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2f974273 	.word	0x2f974273
 8001a8c:	40020305 	.word	0x40020305

08001a90 <_ZN5Motor11setSpeedRawEs>:
//------------------------------------------------------------------
void Motor::setSpeedRaw(int16_t speedRaw) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
	this->speedRaw=speedRaw;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	819a      	strh	r2, [r3, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <_ZN5Motor11getSpeedRawEv>:
//------------------------------------------------------------------
int16_t Motor::getSpeedRaw(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	while (I2C2_getReadRegister() == GETSPEEDREG)
 8001ab4:	f7ff fe50 	bl	8001758 <I2C2_getReadRegister>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d000      	beq.n	8001aca <_ZN5Motor11getSpeedRawEv+0x1e>
 8001ac8:	e7f4      	b.n	8001ab4 <_ZN5Motor11getSpeedRawEv+0x8>
		;
	return this->speedRaw;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN5Motor8getSpeedEv>:
//------------------------------------------------------------------
double Motor::getAngleSpeed(void) {
	return getSpeedRaw()*(360/(periodSpeedRegulator*numberTicksOfWheel));
}
//------------------------------------------------------------------
double Motor::getSpeed(void) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	return getSpeedRaw()*((wheelDiameter*M_PI)/(periodSpeedRegulator*numberTicksOfWheel));
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe3 	bl	8001aac <_ZN5Motor11getSpeedRawEv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fc9b 	bl	8000424 <__aeabi_i2d>
 8001aee:	a306      	add	r3, pc, #24	; (adr r3, 8001b08 <_ZN5Motor8getSpeedEv+0x30>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fcfc 	bl	80004f0 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	4621      	mov	r1, r4
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2f974273 	.word	0x2f974273
 8001b0c:	40220305 	.word	0x40220305

08001b10 <_ZN5Motor13setVoltageRawEt>:
//------------------------------------------------------------------
void Motor::setVoltageRaw(uint16_t voltageRaw) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
	this->voltageRaw=voltageRaw;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	81da      	strh	r2, [r3, #14]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <_ZN5Motor10setCurrentEt>:
	while (I2C2_getReadRegister() == GETVOLTAGEREG)
		;
	return (double)this->voltageRaw * (25 / 1023);
}
//------------------------------------------------------------------
void Motor::setCurrent(uint16_t current) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
	this->current=current;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	821a      	strh	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_Z8getMotori>:
Motor *motor2 = new Motor(MOTOR2);
Motor *motor3 = new Motor(MOTOR3);
Motor *motor4 = new Motor(MOTOR4);
Motor *motor5 = new Motor(MOTOR5);
Motor *motor6 = new Motor(MOTOR6);
Motor *getMotor(int i) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	switch (i) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d821      	bhi.n	8001b9c <_Z8getMotori+0x54>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <_Z8getMotori+0x18>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b79 	.word	0x08001b79
 8001b64:	08001b7f 	.word	0x08001b7f
 8001b68:	08001b85 	.word	0x08001b85
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b91 	.word	0x08001b91
 8001b74:	08001b97 	.word	0x08001b97
	case 1:
		return motor1;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <_Z8getMotori+0x60>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e00e      	b.n	8001b9c <_Z8getMotori+0x54>
	case 2:
		return motor2;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <_Z8getMotori+0x64>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e00b      	b.n	8001b9c <_Z8getMotori+0x54>
	case 3:
		return motor3;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <_Z8getMotori+0x68>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e008      	b.n	8001b9c <_Z8getMotori+0x54>
	case 4:
		return motor4;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <_Z8getMotori+0x6c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e005      	b.n	8001b9c <_Z8getMotori+0x54>
	case 5:
		return motor5;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <_Z8getMotori+0x70>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e002      	b.n	8001b9c <_Z8getMotori+0x54>
	case 6:
		return motor6;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <_Z8getMotori+0x74>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e7ff      	b.n	8001b9c <_Z8getMotori+0x54>
	}
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000a0 	.word	0x200000a0
 8001bac:	200000a4 	.word	0x200000a4
 8001bb0:	200000a8 	.word	0x200000a8
 8001bb4:	200000ac 	.word	0x200000ac
 8001bb8:	200000b0 	.word	0x200000b0
 8001bbc:	200000b4 	.word	0x200000b4

08001bc0 <getAverageOfSimilaryValues>:

extern "C" {
#include <I2Clib/i2clib.h>
#include "stm32l1xx.h"

double getAverageOfSimilaryValues(double val1, double val2, double val3) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001bca:	e9c7 2300 	strd	r2, r3, [r7]
	double diff1 = fabs(val1 - val2);
 8001bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd6:	f7fe fad7 	bl	8000188 <__aeabi_dsub>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	461a      	mov	r2, r3
 8001be0:	623a      	str	r2, [r7, #32]
 8001be2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
	double diff2 = fabs(val2 - val3);
 8001be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf0:	f7fe faca 	bl	8000188 <__aeabi_dsub>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	61ba      	str	r2, [r7, #24]
 8001bfc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001c00:	61fb      	str	r3, [r7, #28]
	double diff3 = fabs(val1 - val3);
 8001c02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0a:	f7fe fabd 	bl	8000188 <__aeabi_dsub>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	461a      	mov	r2, r3
 8001c14:	613a      	str	r2, [r7, #16]
 8001c16:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001c1a:	617b      	str	r3, [r7, #20]
	if (diff1 < diff2 && diff1 < diff3) {
 8001c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c24:	f7fe fed6 	bl	80009d4 <__aeabi_dcmplt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01b      	beq.n	8001c66 <getAverageOfSimilaryValues+0xa6>
 8001c2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c36:	f7fe fecd 	bl	80009d4 <__aeabi_dcmplt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <getAverageOfSimilaryValues+0xa6>
		return (val1 + val2) / 2;
 8001c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c48:	f7fe faa0 	bl	800018c <__adddf3>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	460c      	mov	r4, r1
 8001c50:	4618      	mov	r0, r3
 8001c52:	4621      	mov	r1, r4
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5c:	f7fe fd72 	bl	8000744 <__aeabi_ddiv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	e036      	b.n	8001cd4 <getAverageOfSimilaryValues+0x114>
	} else if (diff2 < diff1 && diff2 < diff3) {
 8001c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c6e:	f7fe feb1 	bl	80009d4 <__aeabi_dcmplt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <getAverageOfSimilaryValues+0xf0>
 8001c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c80:	f7fe fea8 	bl	80009d4 <__aeabi_dcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <getAverageOfSimilaryValues+0xf0>
		return (val2 + val3) / 2;
 8001c8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c92:	f7fe fa7b 	bl	800018c <__adddf3>
 8001c96:	4603      	mov	r3, r0
 8001c98:	460c      	mov	r4, r1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca6:	f7fe fd4d 	bl	8000744 <__aeabi_ddiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	460c      	mov	r4, r1
 8001cae:	e011      	b.n	8001cd4 <getAverageOfSimilaryValues+0x114>
	} else
		return (val1 + val3) / 2;
 8001cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb8:	f7fe fa68 	bl	800018c <__adddf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ccc:	f7fe fd3a 	bl	8000744 <__aeabi_ddiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	372c      	adds	r7, #44	; 0x2c
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop

08001ce0 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void) {
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(DMA1_FLAG_TC5)) {
 8001ce6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cea:	f7ff f83d 	bl	8000d68 <DMA_GetFlagStatus>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80e3 	beq.w	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
		DMA_ClearFlag(DMA1_FLAG_TC5);
 8001d00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d04:	f7ff f858 	bl	8000db8 <DMA_ClearFlag>
		I2C_DMACmd(I2C2, DISABLE);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4871      	ldr	r0, [pc, #452]	; (8001ed0 <DMA1_Channel5_IRQHandler+0x1f0>)
 8001d0c:	f7ff fae0 	bl	80012d0 <I2C_DMACmd>
		I2C_GenerateSTOP(I2C2, ENABLE);
 8001d10:	2101      	movs	r1, #1
 8001d12:	486f      	ldr	r0, [pc, #444]	; (8001ed0 <DMA1_Channel5_IRQHandler+0x1f0>)
 8001d14:	f7ff fa6e 	bl	80011f4 <I2C_GenerateSTOP>
		DMA_Cmd(DMA1_Channel5, DISABLE);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	486e      	ldr	r0, [pc, #440]	; (8001ed4 <DMA1_Channel5_IRQHandler+0x1f4>)
 8001d1c:	f7fe ffdc 	bl	8000cd8 <DMA_Cmd>

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
 8001d20:	f7ff fd1a 	bl	8001758 <I2C2_getReadRegister>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d029      	beq.n	8001d88 <DMA1_Channel5_IRQHandler+0xa8>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001d34:	2301      	movs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	f300 80c3 	bgt.w	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4a64      	ldr	r2, [pc, #400]	; (8001ed8 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001d46:	5cd4      	ldrb	r4, [r2, r3]
 8001d48:	f7ff fce0 	bl	800170c <I2C2_getDeviceAddress>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	429c      	cmp	r4, r3
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d011      	beq.n	8001d80 <DMA1_Channel5_IRQHandler+0xa0>
					getMotor(i)->addDeltaTicks((int16_t) I2C2_getRxBuffer(0));
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fef3 	bl	8001b48 <_Z8getMotori>
 8001d62:	4604      	mov	r4, r0
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fce7 	bl	8001738 <I2C2_getRxBuffer>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4620      	mov	r0, r4
 8001d72:	f7ff fe49 	bl	8001a08 <_ZN5Motor13addDeltaTicksEs>
					I2C2_clearReadRegister();
 8001d76:	f7ff fcf9 	bl	800176c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001d7a:	f7ff fcd1 	bl	8001720 <I2C2_clearDeviceAddress>
					break;
 8001d7e:	e0a2      	b.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
		I2C_DMACmd(I2C2, DISABLE);
		I2C_GenerateSTOP(I2C2, ENABLE);
		DMA_Cmd(DMA1_Channel5, DISABLE);

		if (I2C2_getReadRegister() == GETDELTATICKSREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e7d7      	b.n	8001d38 <DMA1_Channel5_IRQHandler+0x58>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
 8001d88:	f7ff fce6 	bl	8001758 <I2C2_getReadRegister>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d029      	beq.n	8001df0 <DMA1_Channel5_IRQHandler+0x110>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	f300 808f 	bgt.w	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4a4a      	ldr	r2, [pc, #296]	; (8001ed8 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001dae:	5cd4      	ldrb	r4, [r2, r3]
 8001db0:	f7ff fcac 	bl	800170c <I2C2_getDeviceAddress>
 8001db4:	4603      	mov	r3, r0
 8001db6:	429c      	cmp	r4, r3
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d011      	beq.n	8001de8 <DMA1_Channel5_IRQHandler+0x108>
					getMotor(i)->setVoltageRaw((uint16_t) I2C2_getRxBuffer(0));
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f7ff febf 	bl	8001b48 <_Z8getMotori>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fcb3 	bl	8001738 <I2C2_getRxBuffer>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff fe99 	bl	8001b10 <_ZN5Motor13setVoltageRawEt>
					I2C2_clearReadRegister();
 8001dde:	f7ff fcc5 	bl	800176c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001de2:	f7ff fc9d 	bl	8001720 <I2C2_clearDeviceAddress>
					break;
 8001de6:	e06e      	b.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETVOLTAGEREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	e7d7      	b.n	8001da0 <DMA1_Channel5_IRQHandler+0xc0>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
 8001df0:	f7ff fcb2 	bl	8001758 <I2C2_getReadRegister>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d028      	beq.n	8001e56 <DMA1_Channel5_IRQHandler+0x176>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001e04:	2301      	movs	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	dc5b      	bgt.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4a31      	ldr	r2, [pc, #196]	; (8001ed8 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001e14:	5cd4      	ldrb	r4, [r2, r3]
 8001e16:	f7ff fc79 	bl	800170c <I2C2_getDeviceAddress>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d011      	beq.n	8001e4e <DMA1_Channel5_IRQHandler+0x16e>
					getMotor(i)->setCurrent((uint16_t) I2C2_getRxBuffer(0));
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe8c 	bl	8001b48 <_Z8getMotori>
 8001e30:	4604      	mov	r4, r0
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fc80 	bl	8001738 <I2C2_getRxBuffer>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fe74 	bl	8001b2c <_ZN5Motor10setCurrentEt>
					I2C2_clearReadRegister();
 8001e44:	f7ff fc92 	bl	800176c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001e48:	f7ff fc6a 	bl	8001720 <I2C2_clearDeviceAddress>
					break;
 8001e4c:	e03b      	b.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETCURRENTREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3301      	adds	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e7d8      	b.n	8001e08 <DMA1_Channel5_IRQHandler+0x128>
					I2C2_clearReadRegister();
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
 8001e56:	f7ff fc7f 	bl	8001758 <I2C2_getReadRegister>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d028      	beq.n	8001ebc <DMA1_Channel5_IRQHandler+0x1dc>
			for (int i = 1; i <= numberOfMotors; i++) {
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	dc28      	bgt.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
				if (MOTORSADDR[i - 1] == I2C2_getDeviceAddress()) {
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <DMA1_Channel5_IRQHandler+0x1f8>)
 8001e7a:	5cd4      	ldrb	r4, [r2, r3]
 8001e7c:	f7ff fc46 	bl	800170c <I2C2_getDeviceAddress>
 8001e80:	4603      	mov	r3, r0
 8001e82:	429c      	cmp	r4, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d011      	beq.n	8001eb4 <DMA1_Channel5_IRQHandler+0x1d4>
					getMotor(i)->setSpeedRaw((int16_t) I2C2_getRxBuffer(0));
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7ff fe59 	bl	8001b48 <_Z8getMotori>
 8001e96:	4604      	mov	r4, r0
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fc4d 	bl	8001738 <I2C2_getRxBuffer>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff fdf3 	bl	8001a90 <_ZN5Motor11setSpeedRawEs>
					I2C2_clearReadRegister();
 8001eaa:	f7ff fc5f 	bl	800176c <I2C2_clearReadRegister>
					I2C2_clearDeviceAddress();
 8001eae:	f7ff fc37 	bl	8001720 <I2C2_clearDeviceAddress>
					break;
 8001eb2:	e008      	b.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else if (I2C2_getReadRegister() == GETSPEEDREG) {
			for (int i = 1; i <= numberOfMotors; i++) {
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	e7d8      	b.n	8001e6e <DMA1_Channel5_IRQHandler+0x18e>
					I2C2_clearDeviceAddress();
					break;
				}
			}
		} else {
			I2C2_clearReadRegister();
 8001ebc:	f7ff fc56 	bl	800176c <I2C2_clearReadRegister>
			I2C2_clearDeviceAddress();
 8001ec0:	f7ff fc2e 	bl	8001720 <I2C2_clearDeviceAddress>
		}

	}
}
 8001ec4:	e7ff      	b.n	8001ec6 <DMA1_Channel5_IRQHandler+0x1e6>
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40005800 	.word	0x40005800
 8001ed4:	40026058 	.word	0x40026058
 8001ed8:	080026f0 	.word	0x080026f0

08001edc <main>:
}

int main(void) {
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b0a3      	sub	sp, #140	; 0x8c
 8001ee0:	af02      	add	r7, sp, #8
I2C2_Init();
 8001ee2:	f7ff fc4f 	bl	8001784 <I2C2_Init>
//getMotor(6)->setSpeedRawMotor(100);
//getMotor(4)->setSpeedRawMotor(0);
//getMotor(5)->setSpeedRawMotor(0);
//getMotor(6)->setSpeedRawMotor(0);
while (1) {
	getMotor(1)->DMADeltaTicksInvoke();
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff fe2e 	bl	8001b48 <_Z8getMotori>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fd6a 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	getMotor(2)->DMADeltaTicksInvoke();
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fe27 	bl	8001b48 <_Z8getMotori>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fd63 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	getMotor(3)->DMADeltaTicksInvoke();
 8001f02:	2003      	movs	r0, #3
 8001f04:	f7ff fe20 	bl	8001b48 <_Z8getMotori>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd5c 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	getMotor(4)->DMADeltaTicksInvoke();
 8001f10:	2004      	movs	r0, #4
 8001f12:	f7ff fe19 	bl	8001b48 <_Z8getMotori>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fd55 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	getMotor(5)->DMADeltaTicksInvoke();
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7ff fe12 	bl	8001b48 <_Z8getMotori>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd4e 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	getMotor(6)->DMADeltaTicksInvoke();
 8001f2c:	2006      	movs	r0, #6
 8001f2e:	f7ff fe0b 	bl	8001b48 <_Z8getMotori>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fd47 	bl	80019c8 <_ZN5Motor19DMADeltaTicksInvokeEv>
	double distance1 = getMotor(1)->getDistance();
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7ff fe04 	bl	8001b48 <_Z8getMotori>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fd88 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001f48:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
	double distance2 = getMotor(2)->getDistance();
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f7ff fdfb 	bl	8001b48 <_Z8getMotori>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fd7f 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001f5a:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
	double distance3 = getMotor(3)->getDistance();
 8001f5e:	2003      	movs	r0, #3
 8001f60:	f7ff fdf2 	bl	8001b48 <_Z8getMotori>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fd76 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001f6c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	double distance4 = getMotor(4)->getDistance();
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff fde9 	bl	8001b48 <_Z8getMotori>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd6d 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001f7e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	double distance5 = getMotor(5)->getDistance();
 8001f82:	2005      	movs	r0, #5
 8001f84:	f7ff fde0 	bl	8001b48 <_Z8getMotori>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd64 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001f90:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	double distance6 = getMotor(6)->getDistance();
 8001f94:	2006      	movs	r0, #6
 8001f96:	f7ff fdd7 	bl	8001b48 <_Z8getMotori>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fd5b 	bl	8001a58 <_ZN5Motor11getDistanceEv>
 8001fa2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
	double distanceL = getAverageOfSimilaryValues(distance1,distance2,distance3);
 8001fa6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001faa:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001fae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fb2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001fb6:	f7ff fe03 	bl	8001bc0 <getAverageOfSimilaryValues>
 8001fba:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
	double distanceR = getAverageOfSimilaryValues(distance4,distance5,distance6);
 8001fbe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001fc2:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fce:	f7ff fdf7 	bl	8001bc0 <getAverageOfSimilaryValues>
 8001fd2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	getMotor(1)->DMASpeedInvoke();
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff fdb6 	bl	8001b48 <_Z8getMotori>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fd02 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	getMotor(2)->DMASpeedInvoke();
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7ff fdaf 	bl	8001b48 <_Z8getMotori>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fcfb 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	getMotor(3)->DMASpeedInvoke();
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f7ff fda8 	bl	8001b48 <_Z8getMotori>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fcf4 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	getMotor(4)->DMASpeedInvoke();
 8002000:	2004      	movs	r0, #4
 8002002:	f7ff fda1 	bl	8001b48 <_Z8getMotori>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fced 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	getMotor(5)->DMASpeedInvoke();
 800200e:	2005      	movs	r0, #5
 8002010:	f7ff fd9a 	bl	8001b48 <_Z8getMotori>
 8002014:	4603      	mov	r3, r0
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fce6 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	getMotor(6)->DMASpeedInvoke();
 800201c:	2006      	movs	r0, #6
 800201e:	f7ff fd93 	bl	8001b48 <_Z8getMotori>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcdf 	bl	80019e8 <_ZN5Motor14DMASpeedInvokeEv>
	double speed1 = getMotor(1)->getSpeed();
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff fd8c 	bl	8001b48 <_Z8getMotori>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fd50 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 8002038:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	double speed2 = getMotor(2)->getSpeed();
 800203c:	2002      	movs	r0, #2
 800203e:	f7ff fd83 	bl	8001b48 <_Z8getMotori>
 8002042:	4603      	mov	r3, r0
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fd47 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 800204a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	double speed3 = getMotor(3)->getSpeed();
 800204e:	2003      	movs	r0, #3
 8002050:	f7ff fd7a 	bl	8001b48 <_Z8getMotori>
 8002054:	4603      	mov	r3, r0
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fd3e 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 800205c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	double speed4 = getMotor(4)->getSpeed();
 8002060:	2004      	movs	r0, #4
 8002062:	f7ff fd71 	bl	8001b48 <_Z8getMotori>
 8002066:	4603      	mov	r3, r0
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fd35 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 800206e:	e9c7 0108 	strd	r0, r1, [r7, #32]
	double speed5 = getMotor(5)->getSpeed();
 8002072:	2005      	movs	r0, #5
 8002074:	f7ff fd68 	bl	8001b48 <_Z8getMotori>
 8002078:	4603      	mov	r3, r0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fd2c 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 8002080:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double speed6 = getMotor(6)->getSpeed();
 8002084:	2006      	movs	r0, #6
 8002086:	f7ff fd5f 	bl	8001b48 <_Z8getMotori>
 800208a:	4603      	mov	r3, r0
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fd23 	bl	8001ad8 <_ZN5Motor8getSpeedEv>
 8002092:	e9c7 0104 	strd	r0, r1, [r7, #16]
	double speedL = getAverageOfSimilaryValues(speed1,speed2,speed3);
 8002096:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800209a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800209e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020a6:	f7ff fd8b 	bl	8001bc0 <getAverageOfSimilaryValues>
 80020aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
	double speedR = getAverageOfSimilaryValues(speed4,speed5,speed6);
 80020ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020b2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80020b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020be:	f7ff fd7f 	bl	8001bc0 <getAverageOfSimilaryValues>
 80020c2:	e9c7 0100 	strd	r0, r1, [r7]
//getMotor(5)->setSpeedRawMotor(100);
//getMotor(6)->setSpeedRawMotor(100);
//getMotor(4)->setSpeedRawMotor(0);
//getMotor(5)->setSpeedRawMotor(0);
//getMotor(6)->setSpeedRawMotor(0);
while (1) {
 80020c6:	e70e      	b.n	8001ee6 <main+0xa>

080020c8 <_Z41__static_initialization_and_destruction_0ii>:
	double speedL = getAverageOfSimilaryValues(speed1,speed2,speed3);
	double speedR = getAverageOfSimilaryValues(speed4,speed5,speed6);
	//for (long i = 0; i < 100000; i++);

}
}
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d146      	bne.n	8002166 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020de:	4293      	cmp	r3, r2
 80020e0:	d141      	bne.n	8002166 <_Z41__static_initialization_and_destruction_0ii+0x9e>
#include <math.h>
#include <Motor/Motor.h>

#define numberOfMotors 6
Motor *motor1 = new Motor(MOTOR1);
 80020e2:	2014      	movs	r0, #20
 80020e4:	f000 f974 	bl	80023d0 <_Znwj>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461c      	mov	r4, r3
 80020ec:	2102      	movs	r1, #2
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff fc26 	bl	8001940 <_ZN5MotorC1Eh>
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80020f6:	601c      	str	r4, [r3, #0]
Motor *motor2 = new Motor(MOTOR2);
 80020f8:	2014      	movs	r0, #20
 80020fa:	f000 f969 	bl	80023d0 <_Znwj>
 80020fe:	4603      	mov	r3, r0
 8002100:	461c      	mov	r4, r3
 8002102:	2104      	movs	r1, #4
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff fc1b 	bl	8001940 <_ZN5MotorC1Eh>
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800210c:	601c      	str	r4, [r3, #0]
Motor *motor3 = new Motor(MOTOR3);
 800210e:	2014      	movs	r0, #20
 8002110:	f000 f95e 	bl	80023d0 <_Znwj>
 8002114:	4603      	mov	r3, r0
 8002116:	461c      	mov	r4, r3
 8002118:	2106      	movs	r1, #6
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fc10 	bl	8001940 <_ZN5MotorC1Eh>
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002122:	601c      	str	r4, [r3, #0]
Motor *motor4 = new Motor(MOTOR4);
 8002124:	2014      	movs	r0, #20
 8002126:	f000 f953 	bl	80023d0 <_Znwj>
 800212a:	4603      	mov	r3, r0
 800212c:	461c      	mov	r4, r3
 800212e:	2108      	movs	r1, #8
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff fc05 	bl	8001940 <_ZN5MotorC1Eh>
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002138:	601c      	str	r4, [r3, #0]
Motor *motor5 = new Motor(MOTOR5);
 800213a:	2014      	movs	r0, #20
 800213c:	f000 f948 	bl	80023d0 <_Znwj>
 8002140:	4603      	mov	r3, r0
 8002142:	461c      	mov	r4, r3
 8002144:	210a      	movs	r1, #10
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff fbfa 	bl	8001940 <_ZN5MotorC1Eh>
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800214e:	601c      	str	r4, [r3, #0]
Motor *motor6 = new Motor(MOTOR6);
 8002150:	2014      	movs	r0, #20
 8002152:	f000 f93d 	bl	80023d0 <_Znwj>
 8002156:	4603      	mov	r3, r0
 8002158:	461c      	mov	r4, r3
 800215a:	210c      	movs	r1, #12
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff fbef 	bl	8001940 <_ZN5MotorC1Eh>
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002164:	601c      	str	r4, [r3, #0]
	double speedL = getAverageOfSimilaryValues(speed1,speed2,speed3);
	double speedR = getAverageOfSimilaryValues(speed4,speed5,speed6);
	//for (long i = 0; i < 100000; i++);

}
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	200000a0 	.word	0x200000a0
 8002174:	200000a4 	.word	0x200000a4
 8002178:	200000a8 	.word	0x200000a8
 800217c:	200000ac 	.word	0x200000ac
 8002180:	200000b0 	.word	0x200000b0
 8002184:	200000b4 	.word	0x200000b4

08002188 <_GLOBAL__sub_I_motor1>:
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
 800218c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff ff99 	bl	80020c8 <_Z41__static_initialization_and_destruction_0ii>
 8002196:	bd80      	pop	{r7, pc}

08002198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800219c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800219e:	e003      	b.n	80021a8 <LoopCopyDataInit>

080021a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80021a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021a6:	3104      	adds	r1, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80021ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021b0:	d3f6      	bcc.n	80021a0 <CopyDataInit>
  ldr r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80021b4:	e002      	b.n	80021bc <LoopFillZerobss>

080021b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021b8:	f842 3b04 	str.w	r3, [r2], #4

080021bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80021be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021c0:	d3f9      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021c2:	f000 f841 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f000 f927 	bl	8002418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ca:	f7ff fe87 	bl	8001edc <main>
  bx lr
 80021ce:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021d0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80021d4:	08002704 	.word	0x08002704
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021dc:	20000080 	.word	0x20000080
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80021e0:	20000080 	.word	0x20000080
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80021e4:	200000f4 	.word	0x200000f4

080021e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_IRQHandler>
	...

080021ec <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80021fc:	e7fe      	b.n	80021fc <HardFault_Handler+0x4>
 80021fe:	bf00      	nop

08002200 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8002204:	e7fe      	b.n	8002204 <MemManage_Handler+0x4>
 8002206:	bf00      	nop

08002208 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800220c:	e7fe      	b.n	800220c <BusFault_Handler+0x4>
 800220e:	bf00      	nop

08002210 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>
 8002216:	bf00      	nop

08002218 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <SystemInit+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <SystemInit+0x5c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002258:	4912      	ldr	r1, [pc, #72]	; (80022a4 <SystemInit+0x5c>)
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <SystemInit+0x5c>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <SystemInit+0x60>)
 8002260:	4013      	ands	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <SystemInit+0x5c>)
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <SystemInit+0x5c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800226e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002272:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002274:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <SystemInit+0x5c>)
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <SystemInit+0x5c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <SystemInit+0x5c>)
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <SystemInit+0x5c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800228a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SystemInit+0x5c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8002292:	f000 f80d 	bl	80022b0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SystemInit+0x64>)
 8002298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229c:	609a      	str	r2, [r3, #8]
#endif
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	88ffc00c 	.word	0x88ffc00c
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80022be:	4a41      	ldr	r2, [pc, #260]	; (80023c4 <SetSysClock+0x114>)
 80022c0:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <SetSysClock+0x114>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <SetSysClock+0x114>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <SetSysClock+0x38>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80022e6:	d1f0      	bne.n	80022ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <SetSysClock+0x114>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80022f4:	2301      	movs	r3, #1
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	e001      	b.n	80022fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d15a      	bne.n	80023ba <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8002304:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <SetSysClock+0x118>)
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <SetSysClock+0x118>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002310:	4a2d      	ldr	r2, [pc, #180]	; (80023c8 <SetSysClock+0x118>)
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <SetSysClock+0x118>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <SetSysClock+0x118>)
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <SetSysClock+0x118>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <SetSysClock+0x114>)
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <SetSysClock+0x114>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <SetSysClock+0x11c>)
 8002336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800233c:	bf00      	nop
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <SetSysClock+0x11c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800234a:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <SetSysClock+0x114>)
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <SetSysClock+0x114>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <SetSysClock+0x114>)
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <SetSysClock+0x114>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <SetSysClock+0x114>)
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <SetSysClock+0x114>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <SetSysClock+0x114>)
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <SetSysClock+0x114>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800236c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800236e:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <SetSysClock+0x114>)
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <SetSysClock+0x114>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8002378:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <SetSysClock+0x114>)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <SetSysClock+0x114>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002384:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002386:	bf00      	nop
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <SetSysClock+0x114>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f9      	beq.n	8002388 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <SetSysClock+0x114>)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <SetSysClock+0x114>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <SetSysClock+0x114>)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <SetSysClock+0x114>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f043 0303 	orr.w	r3, r3, #3
 80023aa:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80023ac:	bf00      	nop
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SetSysClock+0x114>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d1f9      	bne.n	80023ae <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40007000 	.word	0x40007000

080023d0 <_Znwj>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	2800      	cmp	r0, #0
 80023d4:	bf14      	ite	ne
 80023d6:	4604      	movne	r4, r0
 80023d8:	2401      	moveq	r4, #1
 80023da:	4620      	mov	r0, r4
 80023dc:	f000 f842 	bl	8002464 <malloc>
 80023e0:	b930      	cbnz	r0, 80023f0 <_Znwj+0x20>
 80023e2:	f000 f809 	bl	80023f8 <_ZSt15get_new_handlerv>
 80023e6:	b908      	cbnz	r0, 80023ec <_Znwj+0x1c>
 80023e8:	f000 f80e 	bl	8002408 <abort>
 80023ec:	4780      	blx	r0
 80023ee:	e7f4      	b.n	80023da <_Znwj+0xa>
 80023f0:	bd10      	pop	{r4, pc}

080023f2 <_ZdlPv>:
 80023f2:	f000 b83f 	b.w	8002474 <free>
	...

080023f8 <_ZSt15get_new_handlerv>:
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <_ZSt15get_new_handlerv+0xc>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f3bf 8f5f 	dmb	sy
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200000b8 	.word	0x200000b8

08002408 <abort>:
 8002408:	b508      	push	{r3, lr}
 800240a:	2006      	movs	r0, #6
 800240c:	f000 f91e 	bl	800264c <raise>
 8002410:	2001      	movs	r0, #1
 8002412:	f000 f957 	bl	80026c4 <_exit>
	...

08002418 <__libc_init_array>:
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <__libc_init_array+0x3c>)
 800241a:	b570      	push	{r4, r5, r6, lr}
 800241c:	461e      	mov	r6, r3
 800241e:	4c0e      	ldr	r4, [pc, #56]	; (8002458 <__libc_init_array+0x40>)
 8002420:	2500      	movs	r5, #0
 8002422:	1ae4      	subs	r4, r4, r3
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	42a5      	cmp	r5, r4
 8002428:	d004      	beq.n	8002434 <__libc_init_array+0x1c>
 800242a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800242e:	4798      	blx	r3
 8002430:	3501      	adds	r5, #1
 8002432:	e7f8      	b.n	8002426 <__libc_init_array+0xe>
 8002434:	f000 f948 	bl	80026c8 <_init>
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <__libc_init_array+0x44>)
 800243a:	4c09      	ldr	r4, [pc, #36]	; (8002460 <__libc_init_array+0x48>)
 800243c:	461e      	mov	r6, r3
 800243e:	1ae4      	subs	r4, r4, r3
 8002440:	10a4      	asrs	r4, r4, #2
 8002442:	2500      	movs	r5, #0
 8002444:	42a5      	cmp	r5, r4
 8002446:	d004      	beq.n	8002452 <__libc_init_array+0x3a>
 8002448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800244c:	4798      	blx	r3
 800244e:	3501      	adds	r5, #1
 8002450:	e7f8      	b.n	8002444 <__libc_init_array+0x2c>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	080026f8 	.word	0x080026f8
 8002458:	080026f8 	.word	0x080026f8
 800245c:	080026f8 	.word	0x080026f8
 8002460:	08002700 	.word	0x08002700

08002464 <malloc>:
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <malloc+0xc>)
 8002466:	4601      	mov	r1, r0
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	f000 b857 	b.w	800251c <_malloc_r>
 800246e:	bf00      	nop
 8002470:	2000007c 	.word	0x2000007c

08002474 <free>:
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <free+0xc>)
 8002476:	4601      	mov	r1, r0
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f000 b803 	b.w	8002484 <_free_r>
 800247e:	bf00      	nop
 8002480:	2000007c 	.word	0x2000007c

08002484 <_free_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4605      	mov	r5, r0
 8002488:	2900      	cmp	r1, #0
 800248a:	d044      	beq.n	8002516 <_free_r+0x92>
 800248c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002490:	1f0c      	subs	r4, r1, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	bfb8      	it	lt
 8002496:	18e4      	addlt	r4, r4, r3
 8002498:	f000 f8f4 	bl	8002684 <__malloc_lock>
 800249c:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <_free_r+0x94>)
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	4611      	mov	r1, r2
 80024a2:	b913      	cbnz	r3, 80024aa <_free_r+0x26>
 80024a4:	6063      	str	r3, [r4, #4]
 80024a6:	6014      	str	r4, [r2, #0]
 80024a8:	e030      	b.n	800250c <_free_r+0x88>
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	d90d      	bls.n	80024ca <_free_r+0x46>
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	18a0      	adds	r0, r4, r2
 80024b2:	4283      	cmp	r3, r0
 80024b4:	bf01      	itttt	eq
 80024b6:	6818      	ldreq	r0, [r3, #0]
 80024b8:	685b      	ldreq	r3, [r3, #4]
 80024ba:	1812      	addeq	r2, r2, r0
 80024bc:	6022      	streq	r2, [r4, #0]
 80024be:	6063      	str	r3, [r4, #4]
 80024c0:	600c      	str	r4, [r1, #0]
 80024c2:	e023      	b.n	800250c <_free_r+0x88>
 80024c4:	42a2      	cmp	r2, r4
 80024c6:	d803      	bhi.n	80024d0 <_free_r+0x4c>
 80024c8:	4613      	mov	r3, r2
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d1f9      	bne.n	80024c4 <_free_r+0x40>
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	1819      	adds	r1, r3, r0
 80024d4:	42a1      	cmp	r1, r4
 80024d6:	d10b      	bne.n	80024f0 <_free_r+0x6c>
 80024d8:	6821      	ldr	r1, [r4, #0]
 80024da:	4401      	add	r1, r0
 80024dc:	1858      	adds	r0, r3, r1
 80024de:	4282      	cmp	r2, r0
 80024e0:	6019      	str	r1, [r3, #0]
 80024e2:	d113      	bne.n	800250c <_free_r+0x88>
 80024e4:	6810      	ldr	r0, [r2, #0]
 80024e6:	6852      	ldr	r2, [r2, #4]
 80024e8:	4401      	add	r1, r0
 80024ea:	6019      	str	r1, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e00d      	b.n	800250c <_free_r+0x88>
 80024f0:	d902      	bls.n	80024f8 <_free_r+0x74>
 80024f2:	230c      	movs	r3, #12
 80024f4:	602b      	str	r3, [r5, #0]
 80024f6:	e009      	b.n	800250c <_free_r+0x88>
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	1860      	adds	r0, r4, r1
 80024fc:	4282      	cmp	r2, r0
 80024fe:	bf01      	itttt	eq
 8002500:	6810      	ldreq	r0, [r2, #0]
 8002502:	6852      	ldreq	r2, [r2, #4]
 8002504:	1809      	addeq	r1, r1, r0
 8002506:	6021      	streq	r1, [r4, #0]
 8002508:	6062      	str	r2, [r4, #4]
 800250a:	605c      	str	r4, [r3, #4]
 800250c:	4628      	mov	r0, r5
 800250e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002512:	f000 b8b8 	b.w	8002686 <__malloc_unlock>
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	200000c0 	.word	0x200000c0

0800251c <_malloc_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	1ccd      	adds	r5, r1, #3
 8002520:	f025 0503 	bic.w	r5, r5, #3
 8002524:	3508      	adds	r5, #8
 8002526:	2d0c      	cmp	r5, #12
 8002528:	bf38      	it	cc
 800252a:	250c      	movcc	r5, #12
 800252c:	2d00      	cmp	r5, #0
 800252e:	4606      	mov	r6, r0
 8002530:	db01      	blt.n	8002536 <_malloc_r+0x1a>
 8002532:	42a9      	cmp	r1, r5
 8002534:	d902      	bls.n	800253c <_malloc_r+0x20>
 8002536:	230c      	movs	r3, #12
 8002538:	6033      	str	r3, [r6, #0]
 800253a:	e046      	b.n	80025ca <_malloc_r+0xae>
 800253c:	f000 f8a2 	bl	8002684 <__malloc_lock>
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <_malloc_r+0xb4>)
 8002542:	681c      	ldr	r4, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4621      	mov	r1, r4
 8002548:	b1a1      	cbz	r1, 8002574 <_malloc_r+0x58>
 800254a:	680b      	ldr	r3, [r1, #0]
 800254c:	1b5b      	subs	r3, r3, r5
 800254e:	d40e      	bmi.n	800256e <_malloc_r+0x52>
 8002550:	2b0b      	cmp	r3, #11
 8002552:	d903      	bls.n	800255c <_malloc_r+0x40>
 8002554:	600b      	str	r3, [r1, #0]
 8002556:	18cc      	adds	r4, r1, r3
 8002558:	50cd      	str	r5, [r1, r3]
 800255a:	e01e      	b.n	800259a <_malloc_r+0x7e>
 800255c:	428c      	cmp	r4, r1
 800255e:	bf0b      	itete	eq
 8002560:	6863      	ldreq	r3, [r4, #4]
 8002562:	684b      	ldrne	r3, [r1, #4]
 8002564:	6013      	streq	r3, [r2, #0]
 8002566:	6063      	strne	r3, [r4, #4]
 8002568:	bf18      	it	ne
 800256a:	460c      	movne	r4, r1
 800256c:	e015      	b.n	800259a <_malloc_r+0x7e>
 800256e:	460c      	mov	r4, r1
 8002570:	6849      	ldr	r1, [r1, #4]
 8002572:	e7e9      	b.n	8002548 <_malloc_r+0x2c>
 8002574:	4c17      	ldr	r4, [pc, #92]	; (80025d4 <_malloc_r+0xb8>)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	b91b      	cbnz	r3, 8002582 <_malloc_r+0x66>
 800257a:	4630      	mov	r0, r6
 800257c:	f000 f82c 	bl	80025d8 <_sbrk_r>
 8002580:	6020      	str	r0, [r4, #0]
 8002582:	4629      	mov	r1, r5
 8002584:	4630      	mov	r0, r6
 8002586:	f000 f827 	bl	80025d8 <_sbrk_r>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	d018      	beq.n	80025c0 <_malloc_r+0xa4>
 800258e:	1cc4      	adds	r4, r0, #3
 8002590:	f024 0403 	bic.w	r4, r4, #3
 8002594:	42a0      	cmp	r0, r4
 8002596:	d10d      	bne.n	80025b4 <_malloc_r+0x98>
 8002598:	6025      	str	r5, [r4, #0]
 800259a:	4630      	mov	r0, r6
 800259c:	f000 f873 	bl	8002686 <__malloc_unlock>
 80025a0:	f104 000b 	add.w	r0, r4, #11
 80025a4:	1d23      	adds	r3, r4, #4
 80025a6:	f020 0007 	bic.w	r0, r0, #7
 80025aa:	1ac3      	subs	r3, r0, r3
 80025ac:	d00e      	beq.n	80025cc <_malloc_r+0xb0>
 80025ae:	425a      	negs	r2, r3
 80025b0:	50e2      	str	r2, [r4, r3]
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	1a21      	subs	r1, r4, r0
 80025b6:	4630      	mov	r0, r6
 80025b8:	f000 f80e 	bl	80025d8 <_sbrk_r>
 80025bc:	3001      	adds	r0, #1
 80025be:	d1eb      	bne.n	8002598 <_malloc_r+0x7c>
 80025c0:	230c      	movs	r3, #12
 80025c2:	6033      	str	r3, [r6, #0]
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f85e 	bl	8002686 <__malloc_unlock>
 80025ca:	2000      	movs	r0, #0
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
 80025ce:	bf00      	nop
 80025d0:	200000c0 	.word	0x200000c0
 80025d4:	200000bc 	.word	0x200000bc

080025d8 <_sbrk_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4c06      	ldr	r4, [pc, #24]	; (80025f4 <_sbrk_r+0x1c>)
 80025dc:	2300      	movs	r3, #0
 80025de:	4605      	mov	r5, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	f000 f860 	bl	80026a8 <_sbrk>
 80025e8:	1c43      	adds	r3, r0, #1
 80025ea:	d102      	bne.n	80025f2 <_sbrk_r+0x1a>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	b103      	cbz	r3, 80025f2 <_sbrk_r+0x1a>
 80025f0:	602b      	str	r3, [r5, #0]
 80025f2:	bd38      	pop	{r3, r4, r5, pc}
 80025f4:	200000f0 	.word	0x200000f0

080025f8 <_raise_r>:
 80025f8:	291f      	cmp	r1, #31
 80025fa:	b538      	push	{r3, r4, r5, lr}
 80025fc:	4604      	mov	r4, r0
 80025fe:	460d      	mov	r5, r1
 8002600:	d904      	bls.n	800260c <_raise_r+0x14>
 8002602:	2316      	movs	r3, #22
 8002604:	6003      	str	r3, [r0, #0]
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800260e:	b112      	cbz	r2, 8002616 <_raise_r+0x1e>
 8002610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002614:	b94b      	cbnz	r3, 800262a <_raise_r+0x32>
 8002616:	4620      	mov	r0, r4
 8002618:	f000 f832 	bl	8002680 <_getpid_r>
 800261c:	462a      	mov	r2, r5
 800261e:	4601      	mov	r1, r0
 8002620:	4620      	mov	r0, r4
 8002622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002626:	f000 b819 	b.w	800265c <_kill_r>
 800262a:	2b01      	cmp	r3, #1
 800262c:	d00c      	beq.n	8002648 <_raise_r+0x50>
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	d103      	bne.n	800263a <_raise_r+0x42>
 8002632:	2316      	movs	r3, #22
 8002634:	6003      	str	r3, [r0, #0]
 8002636:	2001      	movs	r0, #1
 8002638:	bd38      	pop	{r3, r4, r5, pc}
 800263a:	2400      	movs	r4, #0
 800263c:	4628      	mov	r0, r5
 800263e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002642:	4798      	blx	r3
 8002644:	4620      	mov	r0, r4
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	2000      	movs	r0, #0
 800264a:	bd38      	pop	{r3, r4, r5, pc}

0800264c <raise>:
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <raise+0xc>)
 800264e:	4601      	mov	r1, r0
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	f7ff bfd1 	b.w	80025f8 <_raise_r>
 8002656:	bf00      	nop
 8002658:	2000007c 	.word	0x2000007c

0800265c <_kill_r>:
 800265c:	b538      	push	{r3, r4, r5, lr}
 800265e:	4c07      	ldr	r4, [pc, #28]	; (800267c <_kill_r+0x20>)
 8002660:	2300      	movs	r3, #0
 8002662:	4605      	mov	r5, r0
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	f000 f815 	bl	8002698 <_kill>
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	d102      	bne.n	8002678 <_kill_r+0x1c>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	b103      	cbz	r3, 8002678 <_kill_r+0x1c>
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	bd38      	pop	{r3, r4, r5, pc}
 800267a:	bf00      	nop
 800267c:	200000f0 	.word	0x200000f0

08002680 <_getpid_r>:
 8002680:	f000 b802 	b.w	8002688 <_getpid>

08002684 <__malloc_lock>:
 8002684:	4770      	bx	lr

08002686 <__malloc_unlock>:
 8002686:	4770      	bx	lr

08002688 <_getpid>:
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <_getpid+0xc>)
 800268a:	2258      	movs	r2, #88	; 0x58
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f04f 30ff 	mov.w	r0, #4294967295
 8002692:	4770      	bx	lr
 8002694:	200000f0 	.word	0x200000f0

08002698 <_kill>:
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <_kill+0xc>)
 800269a:	2258      	movs	r2, #88	; 0x58
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f04f 30ff 	mov.w	r0, #4294967295
 80026a2:	4770      	bx	lr
 80026a4:	200000f0 	.word	0x200000f0

080026a8 <_sbrk>:
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <_sbrk+0x14>)
 80026aa:	4602      	mov	r2, r0
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	b909      	cbnz	r1, 80026b4 <_sbrk+0xc>
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <_sbrk+0x18>)
 80026b2:	6019      	str	r1, [r3, #0]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	4402      	add	r2, r0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	4770      	bx	lr
 80026bc:	200000c4 	.word	0x200000c4
 80026c0:	200000f4 	.word	0x200000f4

080026c4 <_exit>:
 80026c4:	e7fe      	b.n	80026c4 <_exit>
	...

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
